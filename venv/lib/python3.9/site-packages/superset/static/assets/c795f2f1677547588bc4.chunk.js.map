{"version":3,"file":"c795f2f1677547588bc4.chunk.js","mappings":"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","sources":["webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationTypes.js","webpack://superset/./src/explore/components/controls/AnnotationLayerControl/AnnotationLayer.jsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\n\nfunction extractTypes(metadata) {\n  return Object.keys(metadata).reduce((prev, key) => {\n    const result = prev;\n    result[key] = key;\n    return result;\n  }, {});\n}\n\nexport const ANNOTATION_TYPES_METADATA = {\n  FORMULA: {\n    value: 'FORMULA',\n    label: t('Formula'),\n  },\n  EVENT: {\n    value: 'EVENT',\n    label: t('Event'),\n    supportNativeSource: true,\n  },\n  INTERVAL: {\n    value: 'INTERVAL',\n    label: t('Interval'),\n    supportNativeSource: true,\n  },\n  TIME_SERIES: {\n    value: 'TIME_SERIES',\n    label: t('Time series'),\n  },\n};\n\nexport const ANNOTATION_TYPES = extractTypes(ANNOTATION_TYPES_METADATA);\n\nexport const DEFAULT_ANNOTATION_TYPE = ANNOTATION_TYPES.FORMULA;\n\nexport const ANNOTATION_SOURCE_TYPES_METADATA = {\n  NATIVE: {\n    value: 'NATIVE',\n    label: 'Superset annotation',\n  },\n};\n\nexport const ANNOTATION_SOURCE_TYPES = extractTypes(\n  ANNOTATION_SOURCE_TYPES_METADATA,\n);\n\nexport function requiresQuery(annotationSourceType) {\n  return !!annotationSourceType;\n}\n\nconst NATIVE_COLUMN_NAMES = {\n  timeColumn: 'start_dttm',\n  intervalEndColumn: 'end_dttm',\n  titleColumn: 'short_descr',\n  descriptionColumns: ['long_descr'],\n};\n\nexport function applyNativeColumns(annotation) {\n  if (annotation.sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n    return { ...annotation, ...NATIVE_COLUMN_NAMES };\n  }\n  return annotation;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { PureComponent } from 'react';\nimport rison from 'rison';\nimport PropTypes from 'prop-types';\nimport { CompactPicker } from 'react-color';\nimport Button from 'src/components/Button';\nimport {\n  t,\n  SupersetClient,\n  getCategoricalSchemeRegistry,\n  getChartMetadataRegistry,\n  validateNonEmpty,\n  isValidExpression,\n  styled,\n  getColumnLabel,\n  withTheme,\n} from '@superset-ui/core';\nimport SelectControl from 'src/explore/components/controls/SelectControl';\nimport { AsyncSelect } from 'src/components';\nimport TextControl from 'src/explore/components/controls/TextControl';\nimport CheckboxControl from 'src/explore/components/controls/CheckboxControl';\nimport PopoverSection from 'src/components/PopoverSection';\nimport ControlHeader from 'src/explore/components/ControlHeader';\nimport { EmptyStateSmall } from 'src/components/EmptyState';\nimport {\n  ANNOTATION_SOURCE_TYPES,\n  ANNOTATION_TYPES,\n  ANNOTATION_TYPES_METADATA,\n  DEFAULT_ANNOTATION_TYPE,\n  requiresQuery,\n  ANNOTATION_SOURCE_TYPES_METADATA,\n} from './AnnotationTypes';\n\nconst AUTOMATIC_COLOR = '';\n\nconst propTypes = {\n  name: PropTypes.string,\n  annotationType: PropTypes.string,\n  sourceType: PropTypes.string,\n  color: PropTypes.string,\n  opacity: PropTypes.string,\n  style: PropTypes.string,\n  width: PropTypes.number,\n  showMarkers: PropTypes.bool,\n  hideLine: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  overrides: PropTypes.object,\n  show: PropTypes.bool,\n  showLabel: PropTypes.bool,\n  titleColumn: PropTypes.string,\n  descriptionColumns: PropTypes.arrayOf(PropTypes.string),\n  timeColumn: PropTypes.string,\n  intervalEndColumn: PropTypes.string,\n  vizType: PropTypes.string,\n\n  error: PropTypes.string,\n  colorScheme: PropTypes.string,\n\n  addAnnotationLayer: PropTypes.func,\n  removeAnnotationLayer: PropTypes.func,\n  close: PropTypes.func,\n};\n\nconst defaultProps = {\n  name: '',\n  annotationType: DEFAULT_ANNOTATION_TYPE,\n  sourceType: '',\n  color: AUTOMATIC_COLOR,\n  opacity: '',\n  style: 'solid',\n  width: 1,\n  showMarkers: false,\n  hideLine: false,\n  overrides: {},\n  colorScheme: 'd3Category10',\n  show: true,\n  showLabel: false,\n  titleColumn: '',\n  descriptionColumns: [],\n  timeColumn: '',\n  intervalEndColumn: '',\n\n  addAnnotationLayer: () => {},\n  removeAnnotationLayer: () => {},\n  close: () => {},\n};\n\nconst NotFoundContentWrapper = styled.div`\n  && > div:first-child {\n    padding-left: 0;\n    padding-right: 0;\n  }\n`;\n\nconst NotFoundContent = () => (\n  <NotFoundContentWrapper>\n    <EmptyStateSmall\n      title={t('No annotation layers')}\n      description={\n        <span>\n          {t('Add an annotation layer')}{' '}\n          <a\n            href=\"/annotationlayer/list\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {t('here')}\n          </a>\n          .\n        </span>\n      }\n      image=\"empty.svg\"\n    />\n  </NotFoundContentWrapper>\n);\n\nclass AnnotationLayer extends PureComponent {\n  constructor(props) {\n    super(props);\n    const {\n      name,\n      annotationType,\n      sourceType,\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      value,\n      overrides,\n      show,\n      showLabel,\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      vizType,\n    } = props;\n\n    // Only allow override whole time_range\n    if ('since' in overrides || 'until' in overrides) {\n      overrides.time_range = null;\n      delete overrides.since;\n      delete overrides.until;\n    }\n\n    // Check if annotationType is supported by this chart\n    const metadata = getChartMetadataRegistry().get(vizType);\n    const supportedAnnotationTypes = metadata?.supportedAnnotationTypes || [];\n    const validAnnotationType = supportedAnnotationTypes.includes(\n      annotationType,\n    )\n      ? annotationType\n      : supportedAnnotationTypes[0];\n\n    this.state = {\n      // base\n      name,\n      annotationType: validAnnotationType,\n      sourceType,\n      value,\n      overrides,\n      show,\n      showLabel,\n      // slice\n      titleColumn,\n      descriptionColumns,\n      timeColumn,\n      intervalEndColumn,\n      // display\n      color: color || AUTOMATIC_COLOR,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      // refData\n      isNew: !name,\n      slice: null,\n    };\n    this.submitAnnotation = this.submitAnnotation.bind(this);\n    this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    this.applyAnnotation = this.applyAnnotation.bind(this);\n    this.isValidForm = this.isValidForm.bind(this);\n    // Handlers\n    this.handleAnnotationType = this.handleAnnotationType.bind(this);\n    this.handleAnnotationSourceType =\n      this.handleAnnotationSourceType.bind(this);\n    this.handleSelectValue = this.handleSelectValue.bind(this);\n    this.handleTextValue = this.handleTextValue.bind(this);\n    // Fetch related functions\n    this.fetchOptions = this.fetchOptions.bind(this);\n    this.fetchCharts = this.fetchCharts.bind(this);\n    this.fetchNativeAnnotations = this.fetchNativeAnnotations.bind(this);\n    this.fetchAppliedAnnotation = this.fetchAppliedAnnotation.bind(this);\n    this.fetchSliceData = this.fetchSliceData.bind(this);\n    this.shouldFetchSliceData = this.shouldFetchSliceData.bind(this);\n    this.fetchAppliedChart = this.fetchAppliedChart.bind(this);\n    this.fetchAppliedNativeAnnotation =\n      this.fetchAppliedNativeAnnotation.bind(this);\n    this.shouldFetchAppliedAnnotation =\n      this.shouldFetchAppliedAnnotation.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.shouldFetchAppliedAnnotation()) {\n      const { value } = this.state;\n      /* The value prop is the id of the chart/native. This function will set\n      value in state to an object with the id as value.value to be used by\n      AsyncSelect */\n      this.fetchAppliedAnnotation(value);\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.shouldFetchSliceData(prevState)) {\n      const { value } = this.state;\n      this.fetchSliceData(value.value);\n    }\n  }\n\n  getSupportedSourceTypes(annotationType) {\n    // Get vis types that can be source.\n    const sources = getChartMetadataRegistry()\n      .entries()\n      .filter(({ value: chartMetadata }) =>\n        chartMetadata.canBeAnnotationType(annotationType),\n      )\n      .map(({ key, value: chartMetadata }) => ({\n        value: key,\n        label: chartMetadata.name,\n      }));\n    // Prepend native source if applicable\n    if (ANNOTATION_TYPES_METADATA[annotationType]?.supportNativeSource) {\n      sources.unshift(ANNOTATION_SOURCE_TYPES_METADATA.NATIVE);\n    }\n    return sources;\n  }\n\n  shouldFetchAppliedAnnotation() {\n    const { value, sourceType } = this.state;\n    return value && requiresQuery(sourceType);\n  }\n\n  shouldFetchSliceData(prevState) {\n    const { value, sourceType } = this.state;\n    const isChart =\n      sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE &&\n      requiresQuery(sourceType);\n    const valueIsNew = value && prevState.value !== value;\n    return valueIsNew && isChart;\n  }\n\n  isValidFormulaAnnotation(expression, annotationType) {\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return isValidExpression(expression);\n    }\n    return true;\n  }\n\n  isValidForm() {\n    const {\n      name,\n      annotationType,\n      sourceType,\n      value,\n      timeColumn,\n      intervalEndColumn,\n    } = this.state;\n    const errors = [\n      validateNonEmpty(name),\n      validateNonEmpty(annotationType),\n      validateNonEmpty(value),\n    ];\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE) {\n      if (annotationType === ANNOTATION_TYPES.EVENT) {\n        errors.push(validateNonEmpty(timeColumn));\n      }\n      if (annotationType === ANNOTATION_TYPES.INTERVAL) {\n        errors.push(validateNonEmpty(timeColumn));\n        errors.push(validateNonEmpty(intervalEndColumn));\n      }\n    }\n    errors.push(!this.isValidFormulaAnnotation(value, annotationType));\n    return !errors.filter(x => x).length;\n  }\n\n  handleAnnotationType(annotationType) {\n    this.setState({\n      annotationType,\n      sourceType: null,\n      value: null,\n      slice: null,\n    });\n  }\n\n  handleAnnotationSourceType(sourceType) {\n    const { sourceType: prevSourceType } = this.state;\n\n    if (prevSourceType !== sourceType) {\n      this.setState({\n        sourceType,\n        value: null,\n        slice: null,\n      });\n    }\n  }\n\n  handleSelectValue(selectedValueObject) {\n    this.setState({\n      value: selectedValueObject,\n      descriptionColumns: [],\n      intervalEndColumn: null,\n      timeColumn: null,\n      titleColumn: null,\n      overrides: { time_range: null },\n    });\n  }\n\n  handleTextValue(inputValue) {\n    this.setState({\n      value: inputValue,\n    });\n  }\n\n  fetchNativeAnnotations = async (search, page, pageSize) => {\n    const queryParams = rison.encode({\n      filters: [\n        {\n          col: 'name',\n          opr: 'ct',\n          value: search,\n        },\n      ],\n      columns: ['id', 'name'],\n      page,\n      page_size: pageSize,\n    });\n\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/annotation_layer/?q=${queryParams}`,\n    });\n\n    const { result, count } = json;\n\n    const layersArray = result.map(layer => ({\n      value: layer.id,\n      label: layer.name,\n    }));\n\n    return {\n      data: layersArray,\n      totalCount: count,\n    };\n  };\n\n  fetchCharts = async (search, page, pageSize) => {\n    const { annotationType } = this.state;\n\n    const queryParams = rison.encode({\n      filters: [\n        { col: 'slice_name', opr: 'chart_all_text', value: search },\n        {\n          col: 'id',\n          opr: 'chart_owned_created_favored_by_me',\n          value: true,\n        },\n      ],\n      columns: ['id', 'slice_name', 'viz_type'],\n      order_column: 'slice_name',\n      order_direction: 'asc',\n      page,\n      page_size: pageSize,\n    });\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/chart/?q=${queryParams}`,\n    });\n\n    const { result, count } = json;\n    const registry = getChartMetadataRegistry();\n\n    const chartsArray = result\n      .filter(chart => {\n        const metadata = registry.get(chart.viz_type);\n        return metadata && metadata.canBeAnnotationType(annotationType);\n      })\n      .map(chart => ({\n        value: chart.id,\n        label: chart.slice_name,\n        viz_type: chart.viz_type,\n      }));\n\n    return {\n      data: chartsArray,\n      totalCount: count,\n    };\n  };\n\n  fetchOptions = (search, page, pageSize) => {\n    const { sourceType } = this.state;\n\n    if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n      return this.fetchNativeAnnotations(search, page, pageSize);\n    }\n    return this.fetchCharts(search, page, pageSize);\n  };\n\n  fetchSliceData = id => {\n    const queryParams = rison.encode({\n      columns: ['query_context'],\n    });\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${id}?q=${queryParams}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const queryContext = result.query_context;\n      const formData = JSON.parse(queryContext).form_data;\n      const dataObject = {\n        data: {\n          ...formData,\n          groupby: formData.groupby?.map(column => getColumnLabel(column)),\n        },\n      };\n      this.setState({\n        slice: dataObject,\n      });\n    });\n  };\n\n  fetchAppliedChart(id) {\n    const { annotationType } = this.state;\n    const registry = getChartMetadataRegistry();\n    const queryParams = rison.encode({\n      columns: ['slice_name', 'query_context', 'viz_type'],\n    });\n    SupersetClient.get({\n      endpoint: `/api/v1/chart/${id}?q=${queryParams}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const sliceName = result.slice_name;\n      const queryContext = result.query_context;\n      const vizType = result.viz_type;\n      const formData = JSON.parse(queryContext).form_data;\n      const metadata = registry.get(vizType);\n      const canBeAnnotationType =\n        metadata && metadata.canBeAnnotationType(annotationType);\n      if (canBeAnnotationType) {\n        this.setState({\n          value: {\n            value: id,\n            label: sliceName,\n          },\n          slice: {\n            data: {\n              ...formData,\n              groupby: formData.groupby?.map(column => getColumnLabel(column)),\n            },\n          },\n        });\n      }\n    });\n  }\n\n  fetchAppliedNativeAnnotation(id) {\n    SupersetClient.get({\n      endpoint: `/api/v1/annotation_layer/${id}`,\n    }).then(({ json }) => {\n      const { result } = json;\n      const layer = result;\n      this.setState({\n        value: {\n          value: layer.id,\n          label: layer.name,\n        },\n      });\n    });\n  }\n\n  fetchAppliedAnnotation(id) {\n    const { sourceType } = this.state;\n\n    if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n      return this.fetchAppliedNativeAnnotation(id);\n    }\n    return this.fetchAppliedChart(id);\n  }\n\n  deleteAnnotation() {\n    this.props.removeAnnotationLayer();\n    this.props.close();\n  }\n\n  applyAnnotation() {\n    const { value, sourceType } = this.state;\n    if (this.isValidForm()) {\n      const annotationFields = [\n        'name',\n        'annotationType',\n        'sourceType',\n        'color',\n        'opacity',\n        'style',\n        'width',\n        'showMarkers',\n        'hideLine',\n        'overrides',\n        'show',\n        'showLabel',\n        'titleColumn',\n        'descriptionColumns',\n        'timeColumn',\n        'intervalEndColumn',\n      ];\n      const newAnnotation = {};\n      annotationFields.forEach(field => {\n        if (this.state[field] !== null) {\n          newAnnotation[field] = this.state[field];\n        }\n      });\n\n      // Prepare newAnnotation.value for use in runAnnotationQuery()\n      const applicableValue = requiresQuery(sourceType) ? value.value : value;\n      newAnnotation.value = applicableValue;\n\n      if (newAnnotation.color === AUTOMATIC_COLOR) {\n        newAnnotation.color = null;\n      }\n\n      this.props.addAnnotationLayer(newAnnotation);\n      this.setState({ isNew: false });\n    }\n  }\n\n  submitAnnotation() {\n    this.applyAnnotation();\n    this.props.close();\n  }\n\n  renderChartHeader(label, description, value) {\n    return (\n      <ControlHeader\n        hovered\n        label={label}\n        description={description}\n        validationErrors={!value ? ['Mandatory'] : []}\n      />\n    );\n  }\n\n  renderValueConfiguration() {\n    const { annotationType, sourceType, value } = this.state;\n    let label = '';\n    let description = '';\n    if (requiresQuery(sourceType)) {\n      if (sourceType === ANNOTATION_SOURCE_TYPES.NATIVE) {\n        label = t('Annotation layer');\n        description = t('Select the Annotation Layer you would like to use.');\n      } else {\n        label = t('Chart');\n        description = t(\n          `Use another existing chart as a source for annotations and overlays.\n          Your chart must be one of these visualization types: [%s]`,\n          this.getSupportedSourceTypes(annotationType)\n            .map(x => x.label)\n            .join(', '),\n        );\n      }\n    } else if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      label = t('Formula');\n      description = t(`Expects a formula with depending time parameter 'x'\n        in milliseconds since epoch. mathjs is used to evaluate the formulas.\n        Example: '2x+5'`);\n    }\n    if (requiresQuery(sourceType)) {\n      return (\n        <AsyncSelect\n          /* key to force re-render on sourceType change */\n          key={sourceType}\n          ariaLabel={t('Annotation layer value')}\n          name=\"annotation-layer-value\"\n          header={this.renderChartHeader(label, description, value)}\n          options={this.fetchOptions}\n          value={value || null}\n          onChange={this.handleSelectValue}\n          notFoundContent={<NotFoundContent />}\n        />\n      );\n    }\n    if (annotationType === ANNOTATION_TYPES.FORMULA) {\n      return (\n        <TextControl\n          name=\"annotation-layer-value\"\n          hovered\n          showHeader\n          description={description}\n          label={label}\n          placeholder=\"\"\n          value={value}\n          onChange={this.handleTextValue}\n          validationErrors={\n            !this.isValidFormulaAnnotation(value, annotationType)\n              ? [t('Bad formula.')]\n              : []\n          }\n        />\n      );\n    }\n    return '';\n  }\n\n  renderSliceConfiguration() {\n    const {\n      annotationType,\n      sourceType,\n      value,\n      slice,\n      overrides,\n      titleColumn,\n      timeColumn,\n      intervalEndColumn,\n      descriptionColumns,\n    } = this.state;\n\n    if (!slice || !value) {\n      return '';\n    }\n\n    if (sourceType !== ANNOTATION_SOURCE_TYPES.NATIVE && slice) {\n      const columns = (slice.data.groupby || [])\n        .concat(slice.data.all_columns || [])\n        .map(x => ({ value: x, label: x }));\n      const timeColumnOptions = slice.data.include_time\n        ? [{ value: '__timestamp', label: '__timestamp' }].concat(columns)\n        : columns;\n      return (\n        <div style={{ marginRight: '2rem' }}>\n          <PopoverSection\n            isSelected\n            title={t('Annotation Slice Configuration')}\n            info={t(`This section allows you to configure how to use the slice\n              to generate annotations.`)}\n          >\n            {(annotationType === ANNOTATION_TYPES.EVENT ||\n              annotationType === ANNOTATION_TYPES.INTERVAL) && (\n              <SelectControl\n                ariaLabel={t('Annotation layer time column')}\n                hovered\n                name=\"annotation-layer-time-column\"\n                label={\n                  annotationType === ANNOTATION_TYPES.INTERVAL\n                    ? t('Interval start column')\n                    : t('Event time column')\n                }\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!timeColumn ? ['Mandatory'] : []}\n                clearable={false}\n                options={timeColumnOptions}\n                value={timeColumn}\n                onChange={v => this.setState({ timeColumn: v })}\n              />\n            )}\n            {annotationType === ANNOTATION_TYPES.INTERVAL && (\n              <SelectControl\n                ariaLabel={t('Annotation layer interval end')}\n                hovered\n                name=\"annotation-layer-intervalEnd\"\n                label={t('Interval End column')}\n                description={t(\n                  'This column must contain date/time information.',\n                )}\n                validationErrors={!intervalEndColumn ? ['Mandatory'] : []}\n                options={columns}\n                value={intervalEndColumn}\n                onChange={value => this.setState({ intervalEndColumn: value })}\n              />\n            )}\n            <SelectControl\n              ariaLabel={t('Annotation layer title column')}\n              hovered\n              name=\"annotation-layer-title\"\n              label={t('Title Column')}\n              description={t('Pick a title for you annotation.')}\n              options={[{ value: '', label: t('None') }].concat(columns)}\n              value={titleColumn}\n              onChange={value => this.setState({ titleColumn: value })}\n            />\n            {annotationType !== ANNOTATION_TYPES.TIME_SERIES && (\n              <SelectControl\n                ariaLabel={t('Annotation layer description columns')}\n                hovered\n                name=\"annotation-layer-title\"\n                label={t('Description Columns')}\n                description={t(\n                  \"Pick one or more columns that should be shown in the annotation. If you don't select a column all of them will be shown.\",\n                )}\n                multi\n                options={columns}\n                value={descriptionColumns}\n                onChange={value => this.setState({ descriptionColumns: value })}\n              />\n            )}\n            <div style={{ marginTop: '1rem' }}>\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-time_range\"\n                label={t('Override time range')}\n                description={t(`This controls whether the \"time_range\" field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_range' in overrides}\n                onChange={v => {\n                  delete overrides.time_range;\n                  if (v) {\n                    this.setState({\n                      overrides: { ...overrides, time_range: null },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <CheckboxControl\n                hovered\n                name=\"annotation-override-timegrain\"\n                label={t('Override time grain')}\n                description={t(`This controls whether the time grain field from the current\n                  view should be passed down to the chart containing the annotation data.`)}\n                value={'time_grain_sqla' in overrides}\n                onChange={v => {\n                  delete overrides.time_grain_sqla;\n                  delete overrides.granularity;\n                  if (v) {\n                    this.setState({\n                      overrides: {\n                        ...overrides,\n                        time_grain_sqla: null,\n                        granularity: null,\n                      },\n                    });\n                  } else {\n                    this.setState({ overrides: { ...overrides } });\n                  }\n                }}\n              />\n              <TextControl\n                hovered\n                name=\"annotation-layer-timeshift\"\n                label={t('Time Shift')}\n                description={t(`Time delta in natural language\n                  (example:  24 hours, 7 days, 56 weeks, 365 days)`)}\n                placeholder=\"\"\n                value={overrides.time_shift}\n                onChange={v =>\n                  this.setState({ overrides: { ...overrides, time_shift: v } })\n                }\n              />\n            </div>\n          </PopoverSection>\n        </div>\n      );\n    }\n    return '';\n  }\n\n  renderDisplayConfiguration() {\n    const {\n      color,\n      opacity,\n      style,\n      width,\n      showMarkers,\n      hideLine,\n      annotationType,\n    } = this.state;\n    const colorScheme = getCategoricalSchemeRegistry()\n      .get(this.props.colorScheme)\n      .colors.concat();\n    if (\n      color &&\n      color !== AUTOMATIC_COLOR &&\n      !colorScheme.find(x => x.toLowerCase() === color.toLowerCase())\n    ) {\n      colorScheme.push(color);\n    }\n    return (\n      <PopoverSection\n        isSelected\n        title={t('Display configuration')}\n        info={t('Configure your how you overlay is displayed here.')}\n      >\n        <SelectControl\n          ariaLabel={t('Annotation layer stroke')}\n          name=\"annotation-layer-stroke\"\n          label={t('Style')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: 'solid', label: t('Solid') },\n            { value: 'dashed', label: t('Dashed') },\n            { value: 'longDashed', label: t('Long dashed') },\n            { value: 'dotted', label: t('Dotted') },\n          ]}\n          value={style}\n          clearable={false}\n          onChange={v => this.setState({ style: v })}\n        />\n        <SelectControl\n          ariaLabel={t('Annotation layer opacity')}\n          name=\"annotation-layer-opacity\"\n          label={t('Opacity')}\n          // see '../../../visualizations/nvd3_vis.css'\n          options={[\n            { value: '', label: t('Solid') },\n            { value: 'opacityLow', label: '0.2' },\n            { value: 'opacityMedium', label: '0.5' },\n            { value: 'opacityHigh', label: '0.8' },\n          ]}\n          value={opacity}\n          onChange={value => this.setState({ opacity: value })}\n        />\n        <div>\n          <ControlHeader label={t('Color')} />\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            <CompactPicker\n              color={color}\n              colors={colorScheme}\n              onChangeComplete={v => this.setState({ color: v.hex })}\n            />\n            <Button\n              style={{ marginTop: '0.5rem', marginBottom: '0.5rem' }}\n              buttonStyle={color === AUTOMATIC_COLOR ? 'success' : 'default'}\n              buttonSize=\"xsmall\"\n              onClick={() => this.setState({ color: AUTOMATIC_COLOR })}\n            >\n              {t('Automatic Color')}\n            </Button>\n          </div>\n        </div>\n        <TextControl\n          name=\"annotation-layer-stroke-width\"\n          label={t('Line width')}\n          isInt\n          value={width}\n          onChange={v => this.setState({ width: v })}\n        />\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-show-markers\"\n            label={t('Show Markers')}\n            description={t('Shows or hides markers for the time series')}\n            value={showMarkers}\n            onChange={v => this.setState({ showMarkers: v })}\n          />\n        )}\n        {annotationType === ANNOTATION_TYPES.TIME_SERIES && (\n          <CheckboxControl\n            hovered\n            name=\"annotation-layer-hide-line\"\n            label={t('Hide Line')}\n            description={t('Hides the Line for the time series')}\n            value={hideLine}\n            onChange={v => this.setState({ hideLine: v })}\n          />\n        )}\n      </PopoverSection>\n    );\n  }\n\n  render() {\n    const { isNew, name, annotationType, sourceType, show, showLabel } =\n      this.state;\n    const isValid = this.isValidForm();\n    const metadata = getChartMetadataRegistry().get(this.props.vizType);\n    const supportedAnnotationTypes = metadata\n      ? metadata.supportedAnnotationTypes.map(\n          type => ANNOTATION_TYPES_METADATA[type],\n        )\n      : [];\n    const supportedSourceTypes = this.getSupportedSourceTypes(annotationType);\n\n    return (\n      <>\n        {this.props.error && (\n          <span style={{ color: this.props.theme.colors.error.base }}>\n            ERROR: {this.props.error}\n          </span>\n        )}\n        <div style={{ display: 'flex', flexDirection: 'row' }}>\n          <div style={{ marginRight: '2rem' }}>\n            <PopoverSection\n              isSelected\n              title={t('Layer configuration')}\n              info={t('Configure the basics of your Annotation Layer.')}\n            >\n              <TextControl\n                name=\"annotation-layer-name\"\n                label={t('Name')}\n                placeholder=\"\"\n                value={name}\n                onChange={v => this.setState({ name: v })}\n                validationErrors={!name ? [t('Mandatory')] : []}\n              />\n              <CheckboxControl\n                name=\"annotation-layer-hide\"\n                label={t('Hide layer')}\n                value={!show}\n                onChange={v => this.setState({ show: !v })}\n              />\n              <CheckboxControl\n                name=\"annotation-label-show\"\n                label={t('Show label')}\n                value={showLabel}\n                hovered\n                description={t('Whether to always show the annotation label')}\n                onChange={v => this.setState({ showLabel: v })}\n              />\n              <SelectControl\n                ariaLabel={t('Annotation layer type')}\n                hovered\n                description={t('Choose the annotation layer type')}\n                label={t('Annotation layer type')}\n                name=\"annotation-layer-type\"\n                clearable={false}\n                options={supportedAnnotationTypes}\n                value={annotationType}\n                onChange={this.handleAnnotationType}\n              />\n              {supportedSourceTypes.length > 0 && (\n                <SelectControl\n                  ariaLabel={t('Annotation source type')}\n                  hovered\n                  description={t('Choose the source of your annotations')}\n                  label={t('Annotation source')}\n                  name=\"annotation-source-type\"\n                  options={supportedSourceTypes}\n                  notFoundContent={<NotFoundContent />}\n                  value={sourceType}\n                  onChange={this.handleAnnotationSourceType}\n                  validationErrors={!sourceType ? [t('Mandatory')] : []}\n                />\n              )}\n              {this.renderValueConfiguration()}\n            </PopoverSection>\n          </div>\n          {this.renderSliceConfiguration()}\n          {this.renderDisplayConfiguration()}\n        </div>\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n          {isNew ? (\n            <Button buttonSize=\"small\" onClick={() => this.props.close()}>\n              {t('Cancel')}\n            </Button>\n          ) : (\n            <Button buttonSize=\"small\" onClick={this.deleteAnnotation}>\n              {t('Remove')}\n            </Button>\n          )}\n          <div>\n            <Button\n              buttonSize=\"small\"\n              disabled={!isValid}\n              onClick={this.applyAnnotation}\n            >\n              {t('Apply')}\n            </Button>\n\n            <Button\n              buttonSize=\"small\"\n              buttonStyle=\"primary\"\n              disabled={!isValid}\n              onClick={this.submitAnnotation}\n            >\n              {t('OK')}\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nAnnotationLayer.propTypes = propTypes;\nAnnotationLayer.defaultProps = defaultProps;\n\nexport default withTheme(AnnotationLayer);\n"],"names":["extractTypes","metadata","Object","keys","reduce","prev","key","result","ANNOTATION_TYPES_METADATA","FORMULA","value","label","t","EVENT","supportNativeSource","INTERVAL","TIME_SERIES","ANNOTATION_TYPES","DEFAULT_ANNOTATION_TYPE","ANNOTATION_SOURCE_TYPES_METADATA","NATIVE","ANNOTATION_SOURCE_TYPES","requiresQuery","annotationSourceType","AUTOMATIC_COLOR","propTypes","name","PropTypes","annotationType","sourceType","color","opacity","style","width","showMarkers","hideLine","overrides","show","showLabel","titleColumn","descriptionColumns","timeColumn","intervalEndColumn","vizType","error","colorScheme","addAnnotationLayer","removeAnnotationLayer","close","defaultProps","NotFoundContentWrapper","styled","div","NotFoundContent","_jsx","children","EmptyStateSmall","title","description","_jsxs","href","target","rel","image","AnnotationLayer","PureComponent","constructor","props","super","fetchNativeAnnotations","async","search","page","pageSize","queryParams","rison","filters","col","opr","columns","page_size","json","SupersetClient","get","endpoint","count","data","map","layer","id","totalCount","fetchCharts","this","state","order_column","order_direction","registry","getChartMetadataRegistry","filter","chart","viz_type","canBeAnnotationType","slice_name","fetchOptions","fetchSliceData","then","_formData$groupby","queryContext","query_context","formData","JSON","parse","form_data","dataObject","groupby","column","getColumnLabel","setState","slice","time_range","since","until","supportedAnnotationTypes","validAnnotationType","includes","isNew","submitAnnotation","bind","deleteAnnotation","applyAnnotation","isValidForm","handleAnnotationType","handleAnnotationSourceType","handleSelectValue","handleTextValue","fetchAppliedAnnotation","shouldFetchSliceData","fetchAppliedChart","fetchAppliedNativeAnnotation","shouldFetchAppliedAnnotation","componentDidMount","componentDidUpdate","prevProps","prevState","getSupportedSourceTypes","_ANNOTATION_TYPES_MET","sources","entries","chartMetadata","unshift","isChart","isValidFormulaAnnotation","expression","isValidExpression","errors","validateNonEmpty","push","x","length","prevSourceType","selectedValueObject","inputValue","sliceName","_formData$groupby2","newAnnotation","forEach","field","applicableValue","renderChartHeader","ControlHeader","hovered","validationErrors","renderValueConfiguration","join","AsyncSelect","ariaLabel","header","options","onChange","notFoundContent","TextControl","showHeader","placeholder","renderSliceConfiguration","concat","all_columns","timeColumnOptions","include_time","marginRight","PopoverSection","isSelected","info","SelectControl","clearable","v","multi","marginTop","CheckboxControl","time_grain_sqla","granularity","time_shift","renderDisplayConfiguration","getCategoricalSchemeRegistry","colors","find","toLowerCase","display","flexDirection","CompactPicker","onChangeComplete","hex","Button","marginBottom","buttonStyle","buttonSize","onClick","isInt","render","isValid","type","supportedSourceTypes","_Fragment","theme","base","justifyContent","disabled","withTheme"],"sourceRoot":""}
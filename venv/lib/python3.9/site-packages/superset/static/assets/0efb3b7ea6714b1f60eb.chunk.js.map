{"version":3,"file":"0efb3b7ea6714b1f60eb.chunk.js","mappings":"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","sources":["webpack://superset/./src/features/tags/TagModal.tsx","webpack://superset/./src/features/allEntities/AllEntitiesTable.tsx","webpack://superset/./src/pages/AllEntities/index.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ChangeEvent, useState, useEffect, FC } from 'react';\n\nimport rison from 'rison';\nimport Modal from 'src/components/Modal';\nimport AsyncSelect from 'src/components/Select/AsyncSelect';\nimport { FormLabel } from 'src/components/Form';\nimport { t, styled, SupersetClient } from '@superset-ui/core';\nimport { Input } from 'antd';\nimport { Divider } from 'src/components';\nimport Button from 'src/components/Button';\nimport { Tag } from 'src/views/CRUD/types';\nimport { fetchObjectsByTagIds } from 'src/features/tags/tags';\n\nconst StyledModalBody = styled.div`\n  .ant-select-dropdown {\n    max-height: ${({ theme }) => theme.gridUnit * 40}px;\n  }\n  .tag-input {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 3}px;\n  }\n`;\n\nexport interface TaggableResourceOption {\n  label: string;\n  value: number;\n  key: number;\n}\n\nexport enum TaggableResources {\n  Chart = 'chart',\n  Dashboard = 'dashboard',\n  SavedQuery = 'query',\n}\n\ninterface TagModalProps {\n  onHide: () => void;\n  refreshData: () => void;\n  addSuccessToast: (msg: string) => void;\n  addDangerToast: (msg: string) => void;\n  show: boolean;\n  clearOnHide?: boolean;\n  editTag?: Tag | null;\n}\n\nconst TagModal: FC<TagModalProps> = ({\n  show,\n  onHide,\n  editTag,\n  refreshData,\n  addSuccessToast,\n  addDangerToast,\n  clearOnHide = false,\n}) => {\n  const [dashboardsToTag, setDashboardsToTag] = useState<\n    TaggableResourceOption[]\n  >([]);\n  const [chartsToTag, setChartsToTag] = useState<TaggableResourceOption[]>([]);\n  const [savedQueriesToTag, setSavedQueriesToTag] = useState<\n    TaggableResourceOption[]\n  >([]);\n\n  const [tagName, setTagName] = useState<string>('');\n  const [description, setDescription] = useState<string>('');\n\n  const isEditMode = !!editTag;\n  const modalTitle = isEditMode ? 'Edit Tag' : 'Create Tag';\n\n  const clearResources = () => {\n    setDashboardsToTag([]);\n    setChartsToTag([]);\n    setSavedQueriesToTag([]);\n  };\n\n  const clearTagForm = () => {\n    setTagName('');\n    setDescription('');\n    setDashboardsToTag([]);\n    setChartsToTag([]);\n    setSavedQueriesToTag([]);\n  };\n\n  useEffect(() => {\n    const resourceMap: { [key: string]: TaggableResourceOption[] } = {\n      [TaggableResources.Dashboard]: [],\n      [TaggableResources.Chart]: [],\n      [TaggableResources.SavedQuery]: [],\n    };\n\n    const updateResourceOptions = ({ id, name, type }: Tag) => {\n      const resourceOptions = resourceMap[type];\n      if (resourceOptions) {\n        resourceOptions.push({\n          value: id,\n          label: name,\n          key: id,\n        });\n      }\n    };\n    clearResources();\n    if (isEditMode) {\n      fetchObjectsByTagIds(\n        { tagIds: [editTag.id], types: null },\n        (data: Tag[]) => {\n          data.forEach(updateResourceOptions);\n          setDashboardsToTag(resourceMap[TaggableResources.Dashboard]);\n          setChartsToTag(resourceMap[TaggableResources.Chart]);\n          setSavedQueriesToTag(resourceMap[TaggableResources.SavedQuery]);\n        },\n        (error: Response) => {\n          addDangerToast('Error Fetching Tagged Objects');\n        },\n      );\n      setTagName(editTag.name);\n      setDescription(editTag.description);\n    }\n  }, [editTag]);\n\n  const loadData = async (\n    search: string,\n    page: number,\n    pageSize: number,\n    columns: string[],\n    filterColumn: string,\n    orderColumn: string,\n    endpoint: string,\n  ) => {\n    const queryParams = rison.encode({\n      columns,\n      filters: [\n        {\n          col: filterColumn,\n          opr: 'ct',\n          value: search,\n        },\n      ],\n      page,\n      order_column: orderColumn,\n    });\n\n    const { json } = await SupersetClient.get({\n      endpoint: `/api/v1/${endpoint}/?q=${queryParams}`,\n    });\n    const { result, count } = json;\n\n    return {\n      data: result.map((item: { id: number }) => ({\n        value: item.id,\n        label: item[filterColumn],\n      })),\n      totalCount: count,\n    };\n  };\n\n  const loadCharts = async (search: string, page: number, pageSize: number) =>\n    loadData(\n      search,\n      page,\n      pageSize,\n      ['id', 'slice_name'],\n      'slice_name',\n      'slice_name',\n      'chart',\n    );\n\n  const loadDashboards = async (\n    search: string,\n    page: number,\n    pageSize: number,\n  ) =>\n    loadData(\n      search,\n      page,\n      pageSize,\n      ['id', 'dashboard_title'],\n      'dashboard_title',\n      'dashboard_title',\n      'dashboard',\n    );\n\n  const loadQueries = async (search: string, page: number, pageSize: number) =>\n    loadData(\n      search,\n      page,\n      pageSize,\n      ['id', 'label'],\n      'label',\n      'label',\n      'saved_query',\n    );\n\n  const handleOptionChange = (resource: TaggableResources, data: any) => {\n    if (resource === TaggableResources.Dashboard) setDashboardsToTag(data);\n    else if (resource === TaggableResources.Chart) setChartsToTag(data);\n    else if (resource === TaggableResources.SavedQuery)\n      setSavedQueriesToTag(data);\n  };\n\n  const handleTagNameChange = (ev: ChangeEvent<HTMLInputElement>) =>\n    setTagName(ev.target.value);\n  const handleDescriptionChange = (ev: ChangeEvent<HTMLInputElement>) =>\n    setDescription(ev.target.value);\n\n  const onSave = () => {\n    const dashboards = dashboardsToTag.map(dash => ['dashboard', dash.value]);\n    const charts = chartsToTag.map(chart => ['chart', chart.value]);\n    const savedQueries = savedQueriesToTag.map(q => ['query', q.value]);\n\n    if (isEditMode) {\n      SupersetClient.put({\n        endpoint: `/api/v1/tag/${editTag.id}`,\n        jsonPayload: {\n          description,\n          name: tagName,\n          objects_to_tag: [...dashboards, ...charts, ...savedQueries],\n        },\n      })\n        .then(({ json = {} }) => {\n          refreshData();\n          clearTagForm();\n          addSuccessToast(t('Tag updated'));\n          onHide();\n        })\n        .catch(err => {\n          addDangerToast(err.message || 'Error Updating Tag');\n        });\n    } else {\n      SupersetClient.post({\n        endpoint: `/api/v1/tag/`,\n        jsonPayload: {\n          description,\n          name: tagName,\n          objects_to_tag: [...dashboards, ...charts, ...savedQueries],\n        },\n      })\n        .then(({ json = {} }) => {\n          refreshData();\n          clearTagForm();\n          addSuccessToast(t('Tag created'));\n          onHide();\n        })\n        .catch(err => addDangerToast(err.message || 'Error Creating Tag'));\n    }\n  };\n\n  return (\n    <Modal\n      title={modalTitle}\n      onHide={() => {\n        if (clearOnHide) clearTagForm();\n        onHide();\n      }}\n      show={show}\n      footer={\n        <div>\n          <Button\n            data-test=\"modal-save-dashboard-button\"\n            buttonStyle=\"secondary\"\n            onClick={onHide}\n          >\n            {t('Cancel')}\n          </Button>\n          <Button\n            data-test=\"modal-save-dashboard-button\"\n            buttonStyle=\"primary\"\n            onClick={onSave}\n          >\n            {t('Save')}\n          </Button>\n        </div>\n      }\n    >\n      <StyledModalBody>\n        <FormLabel>{t('Tag name')}</FormLabel>\n        <Input\n          className=\"tag-input\"\n          onChange={handleTagNameChange}\n          placeholder={t('Name of your tag')}\n          value={tagName}\n        />\n        <FormLabel>{t('Description')}</FormLabel>\n        <Input\n          className=\"tag-input\"\n          onChange={handleDescriptionChange}\n          placeholder={t('Add description of your tag')}\n          value={description}\n        />\n        <Divider />\n        <AsyncSelect\n          className=\"tag-input\"\n          ariaLabel={t('Select dashboards')}\n          mode=\"multiple\"\n          name=\"dashboards\"\n          // @ts-ignore\n          value={dashboardsToTag}\n          options={loadDashboards}\n          onChange={value =>\n            handleOptionChange(TaggableResources.Dashboard, value)\n          }\n          header={<FormLabel>{t('Dashboards')}</FormLabel>}\n          allowClear\n        />\n        <AsyncSelect\n          className=\"tag-input\"\n          ariaLabel={t('Select charts')}\n          mode=\"multiple\"\n          name=\"charts\"\n          // @ts-ignore\n          value={chartsToTag}\n          options={loadCharts}\n          onChange={value => handleOptionChange(TaggableResources.Chart, value)}\n          header={<FormLabel>{t('Charts')}</FormLabel>}\n          allowClear\n        />\n        <AsyncSelect\n          className=\"tag-input\"\n          ariaLabel={t('Select saved queries')}\n          mode=\"multiple\"\n          name=\"savedQueries\"\n          // @ts-ignore\n          value={savedQueriesToTag}\n          options={loadQueries}\n          onChange={value =>\n            handleOptionChange(TaggableResources.SavedQuery, value)\n          }\n          header={<FormLabel>{t('Saved queries')}</FormLabel>}\n          allowClear\n        />\n      </StyledModalBody>\n    </Modal>\n  );\n};\n\nexport default TagModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport moment from 'moment';\nimport { t, styled } from '@superset-ui/core';\nimport TableView, { EmptyWrapperType } from 'src/components/TableView';\nimport { TagsList } from 'src/components/Tags';\nimport FacePile from 'src/components/FacePile';\nimport Tag from 'src/types/TagType';\nimport Owner from 'src/types/Owner';\nimport { EmptyStateBig } from 'src/components/EmptyState';\nimport { NumberParam, useQueryParam } from 'use-query-params';\n\nconst MAX_TAGS_TO_SHOW = 3;\nconst PAGE_SIZE = 10;\n\nconst AllEntitiesTableContainer = styled.div`\n  text-align: left;\n  border-radius: ${({ theme }) => theme.gridUnit * 1}px 0;\n  .table {\n    table-layout: fixed;\n  }\n  .td {\n    width: 33%;\n  }\n  .entity-title {\n    font-family: Inter;\n    font-size: ${({ theme }) => theme.typography.sizes.m}px;\n    font-weight: ${({ theme }) => theme.typography.weights.medium};\n    line-height: 17px;\n    letter-spacing: 0px;\n    text-align: left;\n    margin: ${({ theme }) => theme.gridUnit * 4}px 0;\n  }\n`;\n\ninterface TaggedObject {\n  id: number;\n  type: string;\n  name: string;\n  url: string;\n  changed_on: moment.MomentInput;\n  created_by: number | undefined;\n  creator: string;\n  owners: Owner[];\n  tags: Tag[];\n}\n\nexport interface TaggedObjects {\n  dashboard: TaggedObject[];\n  chart: TaggedObject[];\n  query: TaggedObject[];\n}\n\ninterface AllEntitiesTableProps {\n  search?: string;\n  setShowTagModal: (show: boolean) => void;\n  objects: TaggedObjects;\n}\n\nexport default function AllEntitiesTable({\n  search = '',\n  setShowTagModal,\n  objects,\n}: AllEntitiesTableProps) {\n  type objectType = 'dashboard' | 'chart' | 'query';\n\n  const [tagId] = useQueryParam('id', NumberParam);\n  const showListViewObjs =\n    objects.dashboard.length > 0 ||\n    objects.chart.length > 0 ||\n    objects.query.length > 0;\n\n  const renderTable = (type: objectType) => {\n    const data = objects[type].map((o: TaggedObject) => ({\n      [type]: <a href={o.url}>{o.name}</a>,\n      modified: moment.utc(o.changed_on).fromNow(),\n      tags: o.tags,\n      owners: o.owners,\n    }));\n\n    return (\n      <TableView\n        className=\"table-condensed\"\n        emptyWrapperType={EmptyWrapperType.Small}\n        data={data}\n        pageSize={PAGE_SIZE}\n        columns={[\n          {\n            accessor: type,\n            Header: 'Title',\n          },\n          {\n            Cell: ({\n              row: {\n                original: { tags = [] },\n              },\n            }: {\n              row: {\n                original: {\n                  tags: Tag[];\n                };\n              };\n            }) => (\n              // Only show custom type tags\n              <TagsList\n                tags={tags.filter(\n                  (tag: Tag) =>\n                    tag.type !== undefined &&\n                    ['TagType.custom', 1].includes(tag.type) &&\n                    tag.id !== tagId,\n                )}\n                maxTags={MAX_TAGS_TO_SHOW}\n              />\n            ),\n            Header: t('Tags'),\n            accessor: 'tags',\n            disableSortBy: true,\n          },\n          {\n            Cell: ({\n              row: {\n                original: { owners = [] },\n              },\n            }: any) => <FacePile users={owners} />,\n            Header: t('Owners'),\n            accessor: 'owners',\n            disableSortBy: true,\n            size: 'xl',\n          },\n        ]}\n      />\n    );\n  };\n\n  return (\n    <AllEntitiesTableContainer>\n      {showListViewObjs ? (\n        <>\n          <div className=\"entity-title\">{t('Dashboards')}</div>\n          {renderTable('dashboard')}\n          <div className=\"entity-title\">{t('Charts')}</div>\n          {renderTable('chart')}\n          <div className=\"entity-title\">{t('Queries')}</div>\n          {renderTable('query')}\n        </>\n      ) : (\n        <EmptyStateBig\n          image=\"dashboard.svg\"\n          title={t('No entities have this tag currently assigned')}\n          buttonAction={() => setShowTagModal(true)}\n          buttonText={t('Add tag to entities')}\n        />\n      )}\n    </AllEntitiesTableContainer>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useState } from 'react';\nimport { styled, t, css, SupersetTheme } from '@superset-ui/core';\nimport { NumberParam, useQueryParam } from 'use-query-params';\nimport AllEntitiesTable, {\n  TaggedObjects,\n} from 'src/features/allEntities/AllEntitiesTable';\nimport Button from 'src/components/Button';\nimport MetadataBar, {\n  MetadataType,\n  Description,\n  Owner,\n  LastModified,\n} from 'src/components/MetadataBar';\nimport { PageHeaderWithActions } from 'src/components/PageHeaderWithActions';\nimport { Tag } from 'src/views/CRUD/types';\nimport TagModal from 'src/features/tags/TagModal';\nimport withToasts, { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { fetchObjectsByTagIds, fetchSingleTag } from 'src/features/tags/tags';\nimport Loading from 'src/components/Loading';\nimport getOwnerName from 'src/utils/getOwnerName';\n\ninterface TaggedObject {\n  id: number;\n  type: string;\n  name: string;\n  url: string;\n  changed_on: moment.MomentInput;\n  created_by: number | undefined;\n  creator: string;\n  owners: Owner[];\n  tags: Tag[];\n}\n\nconst additionalItemsStyles = (theme: SupersetTheme) => css`\n  display: flex;\n  align-items: center;\n  margin-left: ${theme.gridUnit}px;\n  & > span {\n    margin-right: ${theme.gridUnit * 3}px;\n  }\n`;\n\nconst AllEntitiesContainer = styled.div`\n  ${({ theme }) => `\n  background-color: ${theme.colors.grayscale.light4};\n  .select-control {\n    margin-left: ${theme.gridUnit * 4}px;\n    margin-right: ${theme.gridUnit * 4}px;\n    margin-bottom: ${theme.gridUnit * 2}px;\n  }\n  .select-control-label {\n    text-transform: uppercase;\n    font-size: ${theme.gridUnit * 3}px;\n    color: ${theme.colors.grayscale.base};\n    margin-bottom: ${theme.gridUnit * 1}px;\n  }\n  .entities {\n    margin: ${theme.gridUnit * 6}px; 0px;\n  }\n  .pagination-container {\n    background-color: transparent;\n  }\n  `}\n`;\n\nconst AllEntitiesNav = styled.div`\n  ${({ theme }) => `\n  height: ${theme.gridUnit * 12.5}px;\n  background-color: ${theme.colors.grayscale.light5};\n  margin-bottom: ${theme.gridUnit * 4}px;\n  .navbar-brand {\n    margin-left: ${theme.gridUnit * 2}px;\n    font-weight: ${theme.typography.weights.bold};\n  }\n  .header {\n    font-weight: ${theme.typography.weights.bold};\n    margin-right:  ${theme.gridUnit * 3}px;\n    text-align: left;\n    font-size: ${theme.gridUnit * 4.5}px;\n    padding: ${theme.gridUnit * 3}px;\n    display: inline-block;\n    line-height: ${theme.gridUnit * 9}px;\n  }\n  `};\n`;\n\nfunction AllEntities() {\n  const [tagId] = useQueryParam('id', NumberParam);\n  const [tag, setTag] = useState<Tag | null>(null);\n  const [showTagModal, setShowTagModal] = useState<boolean>(false);\n  const { addSuccessToast, addDangerToast } = useToasts();\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [objects, setObjects] = useState<TaggedObjects>({\n    dashboard: [],\n    chart: [],\n    query: [],\n  });\n\n  const editableTitleProps = {\n    title: tag?.name || '',\n    placeholder: 'testing',\n    onSave: (newDatasetName: string) => {},\n    canEdit: false,\n    label: t('dataset name'),\n  };\n\n  const items = [];\n  if (tag?.description) {\n    const description: Description = {\n      type: MetadataType.Description,\n      value: tag?.description || '',\n    };\n    items.push(description);\n  }\n\n  const owner: Owner = {\n    type: MetadataType.Owner,\n    createdBy: getOwnerName(tag?.created_by),\n    createdOn: tag?.created_on_delta_humanized || '',\n  };\n  items.push(owner);\n\n  const lastModified: LastModified = {\n    type: MetadataType.LastModified,\n    value: tag?.changed_on_delta_humanized || '',\n    modifiedBy: getOwnerName(tag?.changed_by),\n  };\n  items.push(lastModified);\n\n  const fetchTaggedObjects = () => {\n    setLoading(true);\n    if (!tag) {\n      addDangerToast('Error tag object is not referenced!');\n      return;\n    }\n    fetchObjectsByTagIds(\n      { tagIds: [tag?.id] || '', types: null },\n      (data: TaggedObject[]) => {\n        const objects = { dashboard: [], chart: [], query: [] };\n        data.forEach(function (object) {\n          const object_type = object.type;\n          objects[object_type].push(object);\n        });\n        setObjects(objects);\n        setLoading(false);\n      },\n      (error: Response) => {\n        addDangerToast('Error Fetching Tagged Objects');\n        setLoading(false);\n      },\n    );\n  };\n\n  const fetchTag = (tagId: number) => {\n    fetchSingleTag(\n      tagId,\n      (tag: Tag) => {\n        setTag(tag);\n        setLoading(false);\n      },\n      (error: Response) => {\n        addDangerToast(t('Error Fetching Tagged Objects'));\n        setLoading(false);\n      },\n    );\n  };\n\n  useEffect(() => {\n    // fetch single tag met\n    if (tagId) {\n      setLoading(true);\n      fetchTag(tagId);\n    }\n  }, [tagId]);\n\n  useEffect(() => {\n    if (tag) fetchTaggedObjects();\n  }, [tag]);\n\n  if (isLoading) return <Loading />;\n  return (\n    <AllEntitiesContainer>\n      <TagModal\n        show={showTagModal}\n        onHide={() => {\n          setShowTagModal(false);\n        }}\n        editTag={tag}\n        addSuccessToast={addSuccessToast}\n        addDangerToast={addDangerToast}\n        refreshData={() => {\n          fetchTaggedObjects();\n          if (tagId) fetchTag(tagId);\n        }}\n      />\n      <AllEntitiesNav>\n        <PageHeaderWithActions\n          additionalActionsMenu={<></>}\n          editableTitleProps={editableTitleProps}\n          faveStarProps={{ itemId: 1, saveFaveStar: () => {} }}\n          showFaveStar={false}\n          showTitlePanelItems\n          titlePanelAdditionalItems={\n            <div css={additionalItemsStyles}>\n              <MetadataBar items={items} tooltipPlacement=\"bottom\" />\n            </div>\n          }\n          rightPanelAdditionalItems={\n            <>\n              <Button\n                data-test=\"bulk-select-action\"\n                buttonStyle=\"secondary\"\n                onClick={() => setShowTagModal(true)}\n                showMarginRight={false}\n              >\n                {t('Edit Tag')}{' '}\n              </Button>\n            </>\n          }\n          menuDropdownProps={{\n            disabled: true,\n          }}\n          showMenuDropdown={false}\n        />\n      </AllEntitiesNav>\n      <div className=\"entities\">\n        <AllEntitiesTable\n          search={tag?.name || ''}\n          setShowTagModal={setShowTagModal}\n          objects={objects}\n        />\n      </div>\n    </AllEntitiesContainer>\n  );\n}\n\nexport default withToasts(AllEntities);\n"],"names":["StyledModalBody","styled","div","theme","gridUnit","TaggableResources","TagModal","show","onHide","editTag","refreshData","addSuccessToast","addDangerToast","clearOnHide","dashboardsToTag","setDashboardsToTag","useState","chartsToTag","setChartsToTag","savedQueriesToTag","setSavedQueriesToTag","tagName","setTagName","description","setDescription","isEditMode","modalTitle","clearTagForm","useEffect","resourceMap","Dashboard","Chart","SavedQuery","updateResourceOptions","id","name","type","resourceOptions","push","value","label","key","fetchObjectsByTagIds","tagIds","types","data","forEach","error","loadData","async","search","page","pageSize","columns","filterColumn","orderColumn","endpoint","queryParams","rison","filters","col","opr","order_column","json","SupersetClient","get","result","count","map","item","totalCount","handleOptionChange","resource","_jsx","Modal","title","footer","_jsxs","children","Button","buttonStyle","onClick","t","onSave","dashboards","dash","charts","chart","savedQueries","q","put","jsonPayload","objects_to_tag","then","catch","err","message","post","FormLabel","Input","className","onChange","ev","target","placeholder","Divider","AsyncSelect","ariaLabel","mode","options","header","allowClear","AllEntitiesTableContainer","typography","sizes","m","weights","medium","AllEntitiesTable","setShowTagModal","objects","tagId","useQueryParam","NumberParam","showListViewObjs","dashboard","length","query","renderTable","o","href","url","modified","moment","changed_on","fromNow","tags","owners","TableView","emptyWrapperType","EmptyWrapperType","Small","accessor","Header","Cell","row","original","TagsList","filter","tag","undefined","includes","maxTags","disableSortBy","FacePile","users","size","_Fragment","EmptyStateBig","image","buttonAction","buttonText","additionalItemsStyles","css","AllEntitiesContainer","colors","grayscale","light4","base","AllEntitiesNav","light5","bold","withToasts","setTag","showTagModal","useToasts","isLoading","setLoading","setObjects","editableTitleProps","newDatasetName","canEdit","items","MetadataType","Description","owner","Owner","createdBy","getOwnerName","created_by","createdOn","created_on_delta_humanized","lastModified","LastModified","changed_on_delta_humanized","modifiedBy","changed_by","fetchTaggedObjects","object","object_type","fetchTag","fetchSingleTag","Loading","PageHeaderWithActions","additionalActionsMenu","faveStarProps","itemId","saveFaveStar","showFaveStar","showTitlePanelItems","titlePanelAdditionalItems","MetadataBar","tooltipPlacement","rightPanelAdditionalItems","showMarginRight","menuDropdownProps","disabled","showMenuDropdown"],"sourceRoot":""}
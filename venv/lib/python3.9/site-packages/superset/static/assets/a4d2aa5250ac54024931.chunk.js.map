{"version":3,"file":"a4d2aa5250ac54024931.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/BigNumber/BigNumberPeriodOverPeriod/useOverflowDetection.ts","webpack://superset/./plugins/plugin-chart-echarts/src/BigNumber/BigNumberPeriodOverPeriod/PopKPI.tsx"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useRef, useState } from 'react';\nimport { debounce } from 'lodash';\n\nexport const useOverflowDetection = (flexGap: number) => {\n  const symbolContainerRef = useRef<HTMLDivElement>(null);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const [isOverflowing, setIsOverflowing] = useState(false);\n\n  useEffect(() => {\n    let obs: ResizeObserver;\n    const symbolContainerElem = symbolContainerRef.current;\n    const wrapperElem = wrapperRef.current;\n    if (symbolContainerElem && wrapperElem) {\n      const symbolContainerChildrenElems = Array.from(\n        symbolContainerElem.children,\n      );\n      obs = new ResizeObserver(\n        debounce(() => {\n          const totalChildrenWidth = symbolContainerChildrenElems.reduce(\n            (acc, element) =>\n              // take symbol container's child's scroll width to account for the container growing with display: flex\n              acc + (element.firstElementChild?.scrollWidth ?? 0),\n            0,\n          );\n          if (\n            totalChildrenWidth +\n              flexGap * Math.max(symbolContainerChildrenElems.length - 1, 0) >\n            wrapperElem.clientWidth\n          ) {\n            setIsOverflowing(true);\n          } else {\n            setIsOverflowing(false);\n          }\n        }, 500),\n      );\n      obs.observe(document.body);\n      symbolContainerChildrenElems.forEach(elem => {\n        obs.observe(elem);\n      });\n    }\n    return () => obs?.disconnect();\n  }, [flexGap]);\n\n  return { isOverflowing, symbolContainerRef, wrapperRef };\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useEffect, useMemo, useState } from 'react';\nimport {\n  css,\n  ensureIsArray,\n  fetchTimeRange,\n  getTimeOffset,\n  styled,\n  t,\n  useTheme,\n} from '@superset-ui/core';\nimport { Tooltip } from '@superset-ui/chart-controls';\nimport { isEmpty } from 'lodash';\nimport {\n  ColorSchemeEnum,\n  PopKPIComparisonSymbolStyleProps,\n  PopKPIComparisonValueStyleProps,\n  PopKPIProps,\n} from './types';\nimport { useOverflowDetection } from './useOverflowDetection';\n\nconst NumbersContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  width: 100%;\n  overflow: auto;\n`;\n\nconst ComparisonValue = styled.div<PopKPIComparisonValueStyleProps>`\n  ${({ theme, subheaderFontSize }) => `\n    font-weight: ${theme.typography.weights.light};\n    display: flex;\n    justify-content: center;\n    font-size: ${subheaderFontSize || 20}px;\n    flex: 1 1 0px;\n  `}\n`;\n\nconst SymbolWrapper = styled.span<PopKPIComparisonSymbolStyleProps>`\n  ${({ theme, backgroundColor, textColor }) => `\n    background-color: ${backgroundColor};\n    color: ${textColor};\n    padding: ${theme.gridUnit}px ${theme.gridUnit * 2}px;\n    border-radius: ${theme.gridUnit * 2}px;\n    margin-right: ${theme.gridUnit}px;\n  `}\n`;\n\nexport default function PopKPI(props: PopKPIProps) {\n  const {\n    height,\n    width,\n    bigNumber,\n    prevNumber,\n    valueDifference,\n    percentDifferenceFormattedString,\n    headerFontSize,\n    subheaderFontSize,\n    comparisonColorEnabled,\n    comparisonColorScheme,\n    percentDifferenceNumber,\n    currentTimeRangeFilter,\n    startDateOffset,\n    shift,\n    dashboardTimeRange,\n  } = props;\n\n  const [comparisonRange, setComparisonRange] = useState<string>('');\n\n  useEffect(() => {\n    if (!currentTimeRangeFilter || (!shift && !startDateOffset)) {\n      setComparisonRange('');\n    } else if (!isEmpty(shift) || startDateOffset) {\n      const newShift = getTimeOffset({\n        timeRangeFilter: {\n          ...currentTimeRangeFilter,\n          comparator:\n            dashboardTimeRange ?? (currentTimeRangeFilter as any).comparator,\n        },\n        shifts: ensureIsArray(shift),\n        startDate: startDateOffset || '',\n      });\n      const promise: any = fetchTimeRange(\n        dashboardTimeRange ?? (currentTimeRangeFilter as any).comparator,\n        currentTimeRangeFilter.subject,\n        newShift || [],\n      );\n      Promise.resolve(promise).then((res: any) => {\n        const response: string[] = ensureIsArray(res.value);\n        const firstRange: string = response.flat()[0];\n        const rangeText = firstRange.split('vs\\n');\n        setComparisonRange(\n          rangeText.length > 1 ? rangeText[1].trim() : rangeText[0],\n        );\n      });\n    }\n  }, [currentTimeRangeFilter, shift, startDateOffset, dashboardTimeRange]);\n\n  const theme = useTheme();\n  const flexGap = theme.gridUnit * 5;\n  const wrapperDivStyles = css`\n    font-family: ${theme.typography.families.sansSerif};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: ${height}px;\n    width: ${width}px;\n    overflow: auto;\n  `;\n\n  const bigValueContainerStyles = css`\n    font-size: ${headerFontSize || 60}px;\n    font-weight: ${theme.typography.weights.normal};\n    text-align: center;\n    margin-bottom: ${theme.gridUnit * 4}px;\n  `;\n\n  const getArrowIndicatorColor = () => {\n    if (!comparisonColorEnabled || percentDifferenceNumber === 0) {\n      return theme.colors.grayscale.base;\n    }\n\n    if (percentDifferenceNumber > 0) {\n      // Positive difference\n      return comparisonColorScheme === ColorSchemeEnum.Green\n        ? theme.colors.success.base\n        : theme.colors.error.base;\n    }\n    // Negative difference\n    return comparisonColorScheme === ColorSchemeEnum.Red\n      ? theme.colors.success.base\n      : theme.colors.error.base;\n  };\n\n  const arrowIndicatorStyle = css`\n    color: ${getArrowIndicatorColor()};\n    margin-left: ${theme.gridUnit}px;\n  `;\n\n  const defaultBackgroundColor = theme.colors.grayscale.light4;\n  const defaultTextColor = theme.colors.grayscale.base;\n  const { backgroundColor, textColor } = useMemo(() => {\n    let bgColor = defaultBackgroundColor;\n    let txtColor = defaultTextColor;\n    if (comparisonColorEnabled && percentDifferenceNumber !== 0) {\n      const useSuccess =\n        (percentDifferenceNumber > 0 &&\n          comparisonColorScheme === ColorSchemeEnum.Green) ||\n        (percentDifferenceNumber < 0 &&\n          comparisonColorScheme === ColorSchemeEnum.Red);\n\n      // Set background and text colors based on the conditions\n      bgColor = useSuccess\n        ? theme.colors.success.light2\n        : theme.colors.error.light2;\n      txtColor = useSuccess\n        ? theme.colors.success.base\n        : theme.colors.error.base;\n    }\n\n    return {\n      backgroundColor: bgColor,\n      textColor: txtColor,\n    };\n  }, [\n    theme,\n    comparisonColorScheme,\n    comparisonColorEnabled,\n    percentDifferenceNumber,\n  ]);\n\n  const SYMBOLS_WITH_VALUES = useMemo(\n    () => [\n      {\n        symbol: '#',\n        value: prevNumber,\n        tooltipText: t('Data for %s', comparisonRange || 'previous range'),\n      },\n      {\n        symbol: '△',\n        value: valueDifference,\n        tooltipText: t('Value difference between the time periods'),\n      },\n      {\n        symbol: '%',\n        value: percentDifferenceFormattedString,\n        tooltipText: t('Percentage difference between the time periods'),\n      },\n    ],\n    [\n      comparisonRange,\n      prevNumber,\n      valueDifference,\n      percentDifferenceFormattedString,\n    ],\n  );\n\n  const { isOverflowing, symbolContainerRef, wrapperRef } =\n    useOverflowDetection(flexGap);\n\n  return (\n    <div css={wrapperDivStyles} ref={wrapperRef}>\n      <NumbersContainer\n        css={\n          isOverflowing &&\n          css`\n            width: fit-content;\n            margin: auto;\n            align-items: flex-start;\n          `\n        }\n      >\n        <div css={bigValueContainerStyles}>\n          {bigNumber}\n          {percentDifferenceNumber !== 0 && (\n            <span css={arrowIndicatorStyle}>\n              {percentDifferenceNumber > 0 ? '↑' : '↓'}\n            </span>\n          )}\n        </div>\n\n        <div\n          css={[\n            css`\n              display: flex;\n              justify-content: space-around;\n              gap: ${flexGap}px;\n              min-width: 0;\n              flex-shrink: 1;\n            `,\n            isOverflowing\n              ? css`\n                  flex-direction: column;\n                  align-items: flex-start;\n                  width: fit-content;\n                `\n              : css`\n                  align-items: center;\n                  width: 100%;\n                `,\n          ]}\n          ref={symbolContainerRef}\n        >\n          {SYMBOLS_WITH_VALUES.map((symbol_with_value, index) => (\n            <ComparisonValue\n              key={`comparison-symbol-${symbol_with_value.symbol}`}\n              subheaderFontSize={subheaderFontSize}\n            >\n              <Tooltip\n                id=\"tooltip\"\n                placement=\"top\"\n                title={symbol_with_value.tooltipText}\n              >\n                <SymbolWrapper\n                  backgroundColor={\n                    index > 0 ? backgroundColor : defaultBackgroundColor\n                  }\n                  textColor={index > 0 ? textColor : defaultTextColor}\n                >\n                  {symbol_with_value.symbol}\n                </SymbolWrapper>\n                {symbol_with_value.value}\n              </Tooltip>\n            </ComparisonValue>\n          ))}\n        </div>\n      </NumbersContainer>\n    </div>\n  );\n}\n"],"names":["useOverflowDetection","flexGap","symbolContainerRef","useRef","wrapperRef","isOverflowing","setIsOverflowing","useState","useEffect","obs","symbolContainerElem","current","wrapperElem","symbolContainerChildrenElems","Array","from","children","ResizeObserver","_debounce","reduce","acc","element","_element$firstElement","_element$firstElement2","firstElementChild","scrollWidth","Math","max","length","clientWidth","observe","document","body","forEach","elem","_obs","disconnect","NumbersContainer","styled","div","ComparisonValue","theme","subheaderFontSize","typography","weights","light","SymbolWrapper","span","backgroundColor","textColor","gridUnit","PopKPI","props","height","width","bigNumber","prevNumber","valueDifference","percentDifferenceFormattedString","headerFontSize","comparisonColorEnabled","comparisonColorScheme","percentDifferenceNumber","currentTimeRangeFilter","startDateOffset","shift","dashboardTimeRange","comparisonRange","setComparisonRange","_isEmpty","newShift","getTimeOffset","timeRangeFilter","comparator","shifts","ensureIsArray","startDate","promise","fetchTimeRange","subject","Promise","resolve","then","res","rangeText","value","flat","split","trim","useTheme","wrapperDivStyles","css","families","sansSerif","bigValueContainerStyles","normal","arrowIndicatorStyle","ColorSchemeEnum","Green","colors","success","base","error","Red","grayscale","defaultBackgroundColor","light4","defaultTextColor","useMemo","bgColor","txtColor","useSuccess","light2","SYMBOLS_WITH_VALUES","symbol","tooltipText","t","_jsx","ref","_jsxs","map","symbol_with_value","index","Tooltip","id","placement","title"],"sourceRoot":""}
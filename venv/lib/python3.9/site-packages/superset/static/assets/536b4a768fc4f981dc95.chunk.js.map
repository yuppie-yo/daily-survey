{"version":3,"file":"536b4a768fc4f981dc95.chunk.js","mappings":"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","sources":["webpack://superset/./plugins/plugin-chart-echarts/src/BoxPlot/EchartsBoxPlot.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/components/Echart.tsx","webpack://superset/./plugins/plugin-chart-echarts/src/utils/eventHandlers.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Echart from '../components/Echart';\nimport { allEventHandlers } from '../utils/eventHandlers';\nimport { BoxPlotChartTransformedProps } from './types';\n\nexport default function EchartsBoxPlot(props: BoxPlotChartTransformedProps) {\n  const { height, width, echartOptions, selectedValues, refs } = props;\n\n  const eventHandlers = allEventHandlers(props);\n\n  return (\n    <Echart\n      refs={refs}\n      height={height}\n      width={width}\n      echartOptions={echartOptions}\n      eventHandlers={eventHandlers}\n      selectedValues={selectedValues}\n    />\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  useRef,\n  useEffect,\n  useMemo,\n  forwardRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useCallback,\n  Ref,\n} from 'react';\n\nimport { styled } from '@superset-ui/core';\nimport { use, init, EChartsType } from 'echarts/core';\nimport {\n  SankeyChart,\n  PieChart,\n  BarChart,\n  FunnelChart,\n  GaugeChart,\n  GraphChart,\n  LineChart,\n  ScatterChart,\n  RadarChart,\n  BoxplotChart,\n  TreeChart,\n  TreemapChart,\n  HeatmapChart,\n  SunburstChart,\n} from 'echarts/charts';\nimport { CanvasRenderer } from 'echarts/renderers';\nimport {\n  TooltipComponent,\n  GridComponent,\n  VisualMapComponent,\n  LegendComponent,\n  DataZoomComponent,\n  ToolboxComponent,\n  GraphicComponent,\n  AriaComponent,\n  MarkAreaComponent,\n  MarkLineComponent,\n} from 'echarts/components';\nimport { LabelLayout } from 'echarts/features';\nimport { EchartsHandler, EchartsProps, EchartsStylesProps } from '../types';\n\nconst Styles = styled.div<EchartsStylesProps>`\n  height: ${({ height }) => height};\n  width: ${({ width }) => width};\n`;\n\nuse([\n  CanvasRenderer,\n  BarChart,\n  BoxplotChart,\n  FunnelChart,\n  GaugeChart,\n  GraphChart,\n  HeatmapChart,\n  LineChart,\n  PieChart,\n  RadarChart,\n  SankeyChart,\n  ScatterChart,\n  SunburstChart,\n  TreeChart,\n  TreemapChart,\n  AriaComponent,\n  DataZoomComponent,\n  GraphicComponent,\n  GridComponent,\n  MarkAreaComponent,\n  MarkLineComponent,\n  LegendComponent,\n  ToolboxComponent,\n  TooltipComponent,\n  VisualMapComponent,\n  LabelLayout,\n]);\n\nfunction Echart(\n  {\n    width,\n    height,\n    echartOptions,\n    eventHandlers,\n    zrEventHandlers,\n    selectedValues = {},\n    refs,\n  }: EchartsProps,\n  ref: Ref<EchartsHandler>,\n) {\n  const divRef = useRef<HTMLDivElement>(null);\n  if (refs) {\n    // eslint-disable-next-line no-param-reassign\n    refs.divRef = divRef;\n  }\n  const chartRef = useRef<EChartsType>();\n  const currentSelection = useMemo(\n    () => Object.keys(selectedValues) || [],\n    [selectedValues],\n  );\n  const previousSelection = useRef<string[]>([]);\n\n  useImperativeHandle(ref, () => ({\n    getEchartInstance: () => chartRef.current,\n  }));\n\n  useEffect(() => {\n    if (!divRef.current) return;\n    if (!chartRef.current) {\n      chartRef.current = init(divRef.current);\n    }\n\n    Object.entries(eventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.off(name);\n      chartRef.current?.on(name, handler);\n    });\n\n    Object.entries(zrEventHandlers || {}).forEach(([name, handler]) => {\n      chartRef.current?.getZr().off(name);\n      chartRef.current?.getZr().on(name, handler);\n    });\n\n    chartRef.current.setOption(echartOptions, true);\n  }, [echartOptions, eventHandlers, zrEventHandlers]);\n\n  // highlighting\n  useEffect(() => {\n    if (!chartRef.current) return;\n    chartRef.current.dispatchAction({\n      type: 'downplay',\n      dataIndex: previousSelection.current.filter(\n        value => !currentSelection.includes(value),\n      ),\n    });\n    if (currentSelection.length) {\n      chartRef.current.dispatchAction({\n        type: 'highlight',\n        dataIndex: currentSelection,\n      });\n    }\n    previousSelection.current = currentSelection;\n  }, [currentSelection]);\n\n  const handleSizeChange = useCallback(\n    ({ width, height }: { width: number; height: number }) => {\n      if (chartRef.current) {\n        chartRef.current.resize({ width, height });\n      }\n    },\n    [],\n  );\n\n  // did mount\n  useEffect(() => {\n    handleSizeChange({ width, height });\n    return () => chartRef.current?.dispose();\n  }, []);\n\n  useLayoutEffect(() => {\n    handleSizeChange({ width, height });\n  }, [width, height, handleSizeChange]);\n\n  return <Styles ref={divRef} height={height} width={width} />;\n}\n\nexport default forwardRef(Echart);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  BinaryQueryObjectFilterClause,\n  ContextMenuFilters,\n  DataMask,\n  QueryFormColumn,\n  QueryFormData,\n  getColumnLabel,\n  getNumberFormatter,\n  getTimeFormatter,\n} from '@superset-ui/core';\nimport { noop } from 'lodash';\n\nimport {\n  BaseTransformedProps,\n  CrossFilterTransformedProps,\n  EventHandlers,\n} from '../types';\nimport { formatSeriesName } from './series';\n\nexport type Event = {\n  name: string;\n  event: { stop: () => void; event: PointerEvent };\n};\n\nconst getCrossFilterDataMask =\n  (\n    selectedValues: Record<number, string>,\n    groupby: QueryFormColumn[],\n    labelMap: Record<string, string[]>,\n  ) =>\n  (value: string) => {\n    const selected = Object.values(selectedValues);\n    let values: string[];\n    if (selected.includes(value)) {\n      values = selected.filter(v => v !== value);\n    } else {\n      values = [value];\n    }\n\n    const groupbyValues = values.map(value => labelMap[value]);\n\n    return {\n      dataMask: {\n        extraFormData: {\n          filters:\n            values.length === 0\n              ? []\n              : groupby.map((col, idx) => {\n                  const val = groupbyValues.map(v => v[idx]);\n                  if (val === null || val === undefined)\n                    return {\n                      col,\n                      op: 'IS NULL' as const,\n                    };\n                  return {\n                    col,\n                    op: 'IN' as const,\n                    val: val as (string | number | boolean)[],\n                  };\n                }),\n        },\n        filterState: {\n          value: groupbyValues.length ? groupbyValues : null,\n          selectedValues: values.length ? values : null,\n        },\n      },\n      isCurrentValueSelected: selected.includes(value),\n    };\n  };\n\nexport const clickEventHandler =\n  (\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    setDataMask: (dataMask: DataMask) => void,\n    emitCrossFilters?: boolean,\n  ) =>\n  ({ name }: { name: string }) => {\n    if (!emitCrossFilters) {\n      return;\n    }\n    const dataMask = getCrossFilterDataMask(name)?.dataMask;\n    if (dataMask) {\n      setDataMask(dataMask);\n    }\n  };\n\nexport const contextMenuEventHandler =\n  (\n    groupby: (BaseTransformedProps<any> &\n      CrossFilterTransformedProps)['groupby'],\n    onContextMenu: BaseTransformedProps<any>['onContextMenu'],\n    labelMap: Record<string, string[]>,\n    getCrossFilterDataMask: (\n      value: string,\n    ) => ContextMenuFilters['crossFilter'],\n    formData: QueryFormData,\n    coltypeMapping?: Record<string, number>,\n  ) =>\n  (e: Event) => {\n    if (onContextMenu) {\n      e.event.stop();\n      const pointerEvent = e.event.event;\n      const drillFilters: BinaryQueryObjectFilterClause[] = [];\n      if (groupby.length > 0) {\n        const values = labelMap[e.name];\n        groupby.forEach((dimension, i) => {\n          drillFilters.push({\n            col: dimension,\n            op: '==',\n            val: values[i],\n            formattedVal: formatSeriesName(values[i], {\n              timeFormatter: getTimeFormatter(formData.dateFormat),\n              numberFormatter: getNumberFormatter(formData.numberFormat),\n              coltype: coltypeMapping?.[getColumnLabel(dimension)],\n            }),\n          });\n        });\n      }\n      onContextMenu(pointerEvent.clientX, pointerEvent.clientY, {\n        drillToDetail: drillFilters,\n        crossFilter:\n          groupby.length > 0 ? getCrossFilterDataMask(e.name) : undefined,\n        drillBy: { filters: drillFilters, groupbyFieldName: 'groupby' },\n      });\n    }\n  };\n\nexport const allEventHandlers = (\n  transformedProps: BaseTransformedProps<any> & CrossFilterTransformedProps,\n) => {\n  const {\n    groupby,\n    onContextMenu,\n    setDataMask,\n    labelMap,\n    emitCrossFilters,\n    selectedValues,\n    coltypeMapping,\n    formData,\n  } = transformedProps;\n  const eventHandlers: EventHandlers = {\n    click:\n      groupby.length > 0\n        ? clickEventHandler(\n            getCrossFilterDataMask(selectedValues, groupby, labelMap),\n            setDataMask,\n            emitCrossFilters,\n          )\n        : noop,\n    contextmenu: contextMenuEventHandler(\n      groupby,\n      onContextMenu,\n      labelMap,\n      getCrossFilterDataMask(selectedValues, groupby, labelMap),\n      formData,\n      coltypeMapping,\n    ),\n  };\n  return eventHandlers;\n};\n"],"names":["EchartsBoxPlot","props","height","width","echartOptions","selectedValues","refs","eventHandlers","allEventHandlers","_jsx","Echart","Styles","styled","div","zrEventHandlers","ref","divRef","useRef","chartRef","currentSelection","useMemo","Object","keys","previousSelection","useImperativeHandle","getEchartInstance","current","useEffect","init","entries","forEach","name","handler","_chartRef$current","_chartRef$current2","off","on","_chartRef$current3","_chartRef$current4","getZr","setOption","dispatchAction","type","dataIndex","filter","value","includes","length","handleSizeChange","useCallback","resize","_chartRef$current5","dispose","useLayoutEffect","use","CanvasRenderer","BarChart","BoxplotChart","FunnelChart","GaugeChart","GraphChart","HeatmapChart","LineChart","PieChart","RadarChart","SankeyChart","ScatterChart","SunburstChart","TreeChart","TreemapChart","AriaComponent","DataZoomComponent","GraphicComponent","GridComponent","MarkAreaComponent","MarkLineComponent","LegendComponent","ToolboxComponent","TooltipComponent","VisualMapComponent","LabelLayout","forwardRef","getCrossFilterDataMask","groupby","labelMap","selected","values","v","groupbyValues","map","dataMask","extraFormData","filters","col","idx","val","op","filterState","isCurrentValueSelected","clickEventHandler","setDataMask","emitCrossFilters","_getCrossFilterDataMa","contextMenuEventHandler","onContextMenu","formData","coltypeMapping","e","event","stop","pointerEvent","drillFilters","dimension","i","push","formattedVal","formatSeriesName","timeFormatter","getTimeFormatter","dateFormat","numberFormatter","getNumberFormatter","numberFormat","coltype","getColumnLabel","clientX","clientY","drillToDetail","crossFilter","undefined","drillBy","groupbyFieldName","transformedProps","click","_noop","contextmenu"],"sourceRoot":""}
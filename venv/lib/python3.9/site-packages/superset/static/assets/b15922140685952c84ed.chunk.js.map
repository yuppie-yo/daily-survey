{"version":3,"file":"b15922140685952c84ed.chunk.js","mappings":"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","sources":["webpack://superset/../../../src/lib/composite-layer.ts","webpack://superset/../../../src/path-layer/path-tesselator.ts","webpack://superset/../../../src/path-layer/path.ts","webpack://superset/../../../src/path-layer/path-layer-vertex.glsl.ts","webpack://superset/../../../src/path-layer/path-layer.ts","webpack://superset/../../../src/path-layer/path-layer-fragment.glsl.ts","webpack://superset/../../src/utils.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/components/Tooltip.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/DeckGLContainer.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/TooltipRow.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/components/Legend.tsx","webpack://superset/../../../src/polygon-layer/polygon-layer.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/getPointsFromPolygon.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Polygon/Polygon.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/common.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/colors.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/fitViewport.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/sandbox.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\nimport {PROP_TYPES_SYMBOL} from '../lifecycle/constants';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT extends {} = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  /** Returns sub layer props for a specific sublayer */\n  // eslint-disable-next-line complexity\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n","import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\nimport type {NumericArray} from '@math.gl/core';\nimport type {Position} from '@deck.gl/core';\n\nexport type NestedPathGeometry = Position[];\nexport type FlatPathGeometry = NumericArray;\nexport type PathGeometry = NestedPathGeometry | FlatPathGeometry;\nexport type NormalizedPathGeometry = FlatPathGeometry[] | FlatPathGeometry;\n\n/**\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n * Returns a flat array of path positions, or a list of flat arrays representing multiple paths\n */\nexport function normalizePath(\n  path: PathGeometry,\n  size: number,\n  gridResolution?: number,\n  wrapLongitude?: boolean\n): number[][] | NumericArray {\n  let flatPath: NumericArray;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  } else {\n    flatPath = path as NumericArray;\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = any> = _PathLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled, safeHtmlSpan } from '@superset-ui/core';\nimport { ReactNode } from 'react';\n\nexport type TooltipProps = {\n  tooltip:\n    | {\n        x: number;\n        y: number;\n        content: ReactNode;\n      }\n    | null\n    | undefined;\n};\n\nconst StyledDiv = styled.div<{ top: number; left: number }>`\n  ${({ theme, top, left }) => `\n    position: absolute;\n    top: ${top}px;\n    left: ${left}px;\n    padding: ${theme.gridUnit * 2}px;\n    margin: ${theme.gridUnit * 2}px;\n    background: ${theme.colors.grayscale.dark2};\n    color: ${theme.colors.grayscale.light5};\n    maxWidth: 300px;\n    fontSize: ${theme.typography.sizes.s}px;\n    zIndex: 9;\n    pointerEvents: none;\n  `}\n`;\n\nexport default function Tooltip(props: TooltipProps) {\n  const { tooltip } = props;\n  if (typeof tooltip === 'undefined' || tooltip === null) {\n    return null;\n  }\n\n  const { x, y, content } = tooltip;\n  const safeContent =\n    typeof content === 'string' ? safeHtmlSpan(content) : content;\n\n  return (\n    <StyledDiv top={y} left={x}>\n      {safeContent}\n    </StyledDiv>\n  );\n}\n","/* eslint-disable react/jsx-sort-default-props */\n/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/forbid-prop-types */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  forwardRef,\n  memo,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { isEqual } from 'lodash';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL, { Layer } from 'deck.gl/typed';\nimport { JsonObject, JsonValue, styled, usePrevious } from '@superset-ui/core';\nimport Tooltip, { TooltipProps } from './components/Tooltip';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { Viewport } from './utils/fitViewport';\n\nconst TICK = 250; // milliseconds\n\nexport type DeckGLContainerProps = {\n  viewport: Viewport;\n  setControlValue?: (control: string, value: JsonValue) => void;\n  mapStyle?: string;\n  mapboxApiAccessToken: string;\n  children?: ReactNode;\n  width: number;\n  height: number;\n  layers: (Layer | (() => Layer))[];\n  onViewportChange?: (viewport: Viewport) => void;\n};\n\nexport const DeckGLContainer = memo(\n  forwardRef((props: DeckGLContainerProps, ref) => {\n    const [tooltip, setTooltip] = useState<TooltipProps['tooltip']>(null);\n    const [lastUpdate, setLastUpdate] = useState<number | null>(null);\n    const [viewState, setViewState] = useState(props.viewport);\n    const prevViewport = usePrevious(props.viewport);\n\n    useImperativeHandle(ref, () => ({ setTooltip }), []);\n\n    const tick = useCallback(() => {\n      // Rate limiting updating viewport controls as it triggers lots of renders\n      if (lastUpdate && Date.now() - lastUpdate > TICK) {\n        const setCV = props.setControlValue;\n        if (setCV) {\n          setCV('viewport', viewState);\n        }\n        setLastUpdate(null);\n      }\n    }, [lastUpdate, props.setControlValue, viewState]);\n\n    useEffect(() => {\n      const timer = setInterval(tick, TICK);\n      return clearInterval(timer);\n    }, [tick]);\n\n    useEffect(() => {\n      if (!isEqual(props.viewport, prevViewport)) {\n        setViewState(props.viewport);\n      }\n    }, [prevViewport, props.viewport]);\n\n    const onViewStateChange = useCallback(\n      ({ viewState }: { viewState: JsonObject }) => {\n        setViewState(viewState as Viewport);\n        setLastUpdate(Date.now());\n      },\n      [],\n    );\n\n    const layers = useCallback(() => {\n      // Support for layer factory\n      if (props.layers.some(l => typeof l === 'function')) {\n        return props.layers.map(l =>\n          typeof l === 'function' ? l() : l,\n        ) as Layer[];\n      }\n\n      return props.layers as Layer[];\n    }, [props.layers]);\n\n    const { children = null, height, width } = props;\n\n    return (\n      <>\n        <div style={{ position: 'relative', width, height }}>\n          <DeckGL\n            controller\n            width={width}\n            height={height}\n            layers={layers()}\n            viewState={viewState}\n            glOptions={{ preserveDrawingBuffer: true }}\n            onViewStateChange={onViewStateChange}\n          >\n            <StaticMap\n              preserveDrawingBuffer\n              mapStyle={props.mapStyle || 'light'}\n              mapboxApiAccessToken={props.mapboxApiAccessToken}\n            />\n          </DeckGL>\n          {children}\n        </div>\n        <Tooltip tooltip={tooltip} />\n      </>\n    );\n  }),\n);\n\nexport const DeckGLContainerStyledWrapper = styled(DeckGLContainer)`\n  .deckgl-tooltip > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport type DeckGLContainerHandle = typeof DeckGLContainer & {\n  setTooltip: (tooltip: ReactNode) => void;\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ntype TooltipRowProps = {\n  label: string;\n  value: string;\n};\n\nconst TooltipRow = ({ label, value }: TooltipRowProps) => (\n  <div>\n    {label}\n    <strong>{value}</strong>\n  </div>\n);\n\nexport default TooltipRow;\n","/* eslint-disable react/jsx-sort-default-props */\n/* eslint-disable react/sort-prop-types */\n/* eslint-disable jsx-a11y/anchor-is-valid */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { memo } from 'react';\nimport { formatNumber, styled } from '@superset-ui/core';\n\nconst StyledLegend = styled.div`\n  ${({ theme }) => `\n    font-size: ${theme.typography.sizes.s}px;\n    position: absolute;\n    background: ${theme.colors.grayscale.light5};\n    box-shadow: 0 0 ${theme.gridUnit}px ${theme.colors.grayscale.light2};\n    margin: ${theme.gridUnit * 6}px;\n    padding: ${theme.gridUnit * 3}px ${theme.gridUnit * 5}px;\n    outline: none;\n    overflow-y: scroll;\n    max-height: 200px;\n\n    & ul {\n      list-style: none;\n      padding-left: 0;\n      margin: 0;\n\n      & li a {\n        display: flex;\n        color: ${theme.colors.grayscale.base};\n        text-decoration: none;\n        padding: ${theme.gridUnit}px 0;\n\n        & span {\n          margin-right: ${theme.gridUnit}px;\n        }\n      }\n    }\n  `}\n`;\n\nconst categoryDelimiter = ' - ';\n\nexport type LegendProps = {\n  format: string | null;\n  forceCategorical?: boolean;\n  position?: null | 'tl' | 'tr' | 'bl' | 'br';\n  categories: Record<string, { enabled: boolean; color: number[] }>;\n  toggleCategory?: (key: string) => void;\n  showSingleCategory?: (key: string) => void;\n};\n\nconst Legend = ({\n  format: d3Format = null,\n  forceCategorical = false,\n  position = 'tr',\n  categories: categoriesObject = {},\n  toggleCategory = () => {},\n  showSingleCategory = () => {},\n}: LegendProps) => {\n  const format = (value: string) => {\n    if (!d3Format || forceCategorical) {\n      return value;\n    }\n\n    const numValue = parseFloat(value);\n\n    return formatNumber(d3Format, numValue);\n  };\n\n  const formatCategoryLabel = (k: string) => {\n    if (!d3Format) {\n      return k;\n    }\n\n    if (k.includes(categoryDelimiter)) {\n      const values = k.split(categoryDelimiter);\n\n      return format(values[0]) + categoryDelimiter + format(values[1]);\n    }\n\n    return format(k);\n  };\n\n  if (Object.keys(categoriesObject).length === 0 || position === null) {\n    return null;\n  }\n\n  const categories = Object.entries(categoriesObject).map(([k, v]) => {\n    const style = { color: `rgba(${v.color.join(', ')})` };\n    const icon = v.enabled ? '\\u25FC' : '\\u25FB';\n\n    return (\n      <li key={k}>\n        <a\n          href=\"#\"\n          role=\"button\"\n          onClick={() => toggleCategory(k)}\n          onDoubleClick={() => showSingleCategory(k)}\n        >\n          <span style={style}>{icon}</span> {formatCategoryLabel(k)}\n        </a>\n      </li>\n    );\n  });\n\n  const vertical = position?.charAt(0) === 't' ? 'top' : 'bottom';\n  const horizontal = position?.charAt(1) === 'r' ? 'right' : 'left';\n  const style = {\n    position: 'absolute' as const,\n    [vertical]: '0px',\n    [horizontal]: '10px',\n  };\n\n  return (\n    <StyledLegend className=\"dupa\" style={style}>\n      <ul>{categories}</ul>\n    </StyledLegend>\n  );\n};\n\nexport default memo(Legend);\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  AccessorFunction,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  createIterable,\n  Layer,\n  LayerDataSource,\n  LayersList,\n  log,\n  Unit,\n  Material,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport * as Polygon from '../solid-polygon-layer/polygon';\nimport {replaceInRange} from '../utils';\n\n/**\n * All properties supported by `PolygonLayer`.\n */\nexport type PolygonLayerProps<DataT = any> = _PolygonLayerProps<DataT> & CompositeLayerProps;\n\n/**\n * Properties added by `PolygonLayer`.\n */\ntype _PolygonLayerProps<DataT = any> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Whether to extrude the polygons.\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * If set to `false`, all polygons will be flat, this generates less geometry and is faster\n   * than simply returning 0 from getElevation.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: number;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * The outline will have \"horizontal\" lines closing the top and bottom polygons and a vertical\n   * line (a \"strut\") for each vertex on the polygon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * The line width multiplier that multiplied to all outlines of `Polygon` and `MultiPolygon`\n   * features if the stroked attribute is true.\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  lineDashJustified?: boolean;\n\n  /** Called on each object in the data stream to retrieve its corresponding polygon. */\n  getPolygon?: AccessorFunction<DataT, any>;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<DataT, number>;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<DataT, number>;\n\n  /**\n   * This property has been moved to `PathStyleExtension`.\n   *\n   * @deprecated\n   */\n  getLineDashArray?: Accessor<DataT, number> | null;\n\n  /**\n   * If `false`, will skip normalizing the coordinates returned by `getPolygon`.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default true\n   */\n  _normalize?: boolean;\n\n  /**\n   * Specifies the winding order of rings in the polygon data.\n   *\n   * **Note**: This prop is experimental\n   *\n   * @default 'CW'\n   */\n  _windingOrder?: 'CW' | 'CCW';\n\n  /**\n   * Material settings for lighting effect. Applies if `extruded: true`.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\nconst defaultLineColor: [number, number, number, number] = [0, 0, 0, 255];\nconst defaultFillColor: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PolygonLayerProps> = {\n  stroked: true,\n  filled: true,\n  extruded: false,\n  elevationScale: 1,\n  wireframe: false,\n  _normalize: true,\n  _windingOrder: 'CW',\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: 1,\n  lineWidthMinPixels: 0,\n  lineWidthMaxPixels: Number.MAX_SAFE_INTEGER,\n  lineJointRounded: false,\n  lineMiterLimit: 4,\n\n  getPolygon: {type: 'accessor', value: f => f.polygon},\n  // Polygon fill color\n  getFillColor: {type: 'accessor', value: defaultFillColor},\n  // Point, line and polygon outline color\n  getLineColor: {type: 'accessor', value: defaultLineColor},\n  // Line and polygon outline accessors\n  getLineWidth: {type: 'accessor', value: 1},\n  // Polygon extrusion accessor\n  getElevation: {type: 'accessor', value: 1000},\n\n  // Optional material for 'lighting' shader module\n  material: true\n};\n\n/** A composite layer that renders filled, stroked and/or extruded polygons. */\nexport default class PolygonLayer<DataT = any, ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<_PolygonLayerProps<DataT>> & ExtraProps\n> {\n  static layerName = 'PolygonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      paths: []\n    };\n\n    if (this.props.getLineDashArray) {\n      log.removed('getLineDashArray', 'PathStyleExtension')();\n    }\n  }\n\n  updateState({changeFlags}: UpdateParameters<this>) {\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPolygon));\n\n    if (geometryChanged && Array.isArray(changeFlags.dataChanged)) {\n      const paths = this.state.paths.slice();\n      const pathsDiff = changeFlags.dataChanged.map(dataRange =>\n        replaceInRange({\n          data: paths,\n          getIndex: p => p.__source.index,\n          dataRange,\n          replace: this._getPaths(dataRange)\n        })\n      );\n      this.setState({paths, pathsDiff});\n    } else if (geometryChanged) {\n      this.setState({\n        paths: this._getPaths(),\n        pathsDiff: null\n      });\n    }\n  }\n\n  private _getPaths(dataRange: {startRow?: number; endRow?: number} = {}): {path: number[]}[] {\n    const {data, getPolygon, positionFormat, _normalize} = this.props;\n    const paths: {path: number[]}[] = [];\n    const positionSize = positionFormat === 'XY' ? 2 : 3;\n    const {startRow, endRow} = dataRange;\n\n    const {iterable, objectInfo} = createIterable(data, startRow, endRow);\n    for (const object of iterable) {\n      objectInfo.index++;\n      let polygon = getPolygon(object, objectInfo);\n      if (_normalize) {\n        polygon = Polygon.normalize(polygon, positionSize);\n      }\n      const {holeIndices} = polygon;\n      const positions = polygon.positions || polygon;\n\n      if (holeIndices) {\n        // split the positions array into `holeIndices.length + 1` rings\n        // holeIndices[-1] falls back to 0\n        // holeIndices[holeIndices.length] falls back to positions.length\n        for (let i = 0; i <= holeIndices.length; i++) {\n          const path = positions.slice(holeIndices[i - 1] || 0, holeIndices[i] || positions.length);\n          paths.push(this.getSubLayerRow({path}, object, objectInfo.index));\n        }\n      } else {\n        paths.push(this.getSubLayerRow({path: positions}, object, objectInfo.index));\n      }\n    }\n    return paths;\n  }\n\n  /* eslint-disable complexity */\n  renderLayers(): Layer | null | LayersList {\n    // Layer composition props\n    const {\n      data,\n      _dataDiff,\n      stroked,\n      filled,\n      extruded,\n      wireframe,\n      _normalize,\n      _windingOrder,\n      elevationScale,\n      transitions,\n      positionFormat\n    } = this.props;\n\n    // Rendering props underlying layer\n    const {\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels,\n      lineJointRounded,\n      lineMiterLimit,\n      lineDashJustified\n    } = this.props;\n\n    // Accessor props for underlying layers\n    const {\n      getFillColor,\n      getLineColor,\n      getLineWidth,\n      getLineDashArray,\n      getElevation,\n      getPolygon,\n      updateTriggers,\n      material\n    } = this.props;\n\n    const {paths, pathsDiff} = this.state;\n\n    const FillLayer = this.getSubLayerClass('fill', SolidPolygonLayer);\n    const StrokeLayer = this.getSubLayerClass('stroke', PathLayer);\n\n    // Filled Polygon Layer\n    const polygonLayer =\n      this.shouldRenderSubLayer('fill', paths) &&\n      new FillLayer(\n        {\n          _dataDiff,\n          extruded,\n          elevationScale,\n\n          filled,\n          wireframe,\n          _normalize,\n          _windingOrder,\n\n          getElevation,\n          getFillColor,\n          getLineColor: extruded && wireframe ? getLineColor : defaultLineColor,\n\n          material,\n          transitions\n        },\n        this.getSubLayerProps({\n          id: 'fill',\n          updateTriggers: updateTriggers && {\n            getPolygon: updateTriggers.getPolygon,\n            getElevation: updateTriggers.getElevation,\n            getFillColor: updateTriggers.getFillColor,\n            // using a legacy API to invalid lineColor attributes\n            // if (extruded && wireframe) has changed\n            lineColors: extruded && wireframe,\n            getLineColor: updateTriggers.getLineColor\n          }\n        }),\n        {\n          data,\n          positionFormat,\n          getPolygon\n        }\n      );\n\n    // Polygon line layer\n    const polygonLineLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer('stroke', paths) &&\n      new StrokeLayer(\n        {\n          _dataDiff: pathsDiff && (() => pathsDiff),\n          widthUnits: lineWidthUnits,\n          widthScale: lineWidthScale,\n          widthMinPixels: lineWidthMinPixels,\n          widthMaxPixels: lineWidthMaxPixels,\n          jointRounded: lineJointRounded,\n          miterLimit: lineMiterLimit,\n          dashJustified: lineDashJustified,\n\n          // Already normalized\n          _pathType: 'loop',\n\n          transitions: transitions && {\n            getWidth: transitions.getLineWidth,\n            getColor: transitions.getLineColor,\n            getPath: transitions.getPolygon\n          },\n\n          getColor: this.getSubLayerAccessor(getLineColor),\n          getWidth: this.getSubLayerAccessor(getLineWidth),\n          getDashArray: this.getSubLayerAccessor(getLineDashArray)\n        },\n        this.getSubLayerProps({\n          id: 'stroke',\n          updateTriggers: updateTriggers && {\n            getWidth: updateTriggers.getLineWidth,\n            getColor: updateTriggers.getLineColor,\n            getDashArray: updateTriggers.getLineDashArray\n          }\n        }),\n        {\n          data: paths,\n          positionFormat,\n          getPath: x => x.path\n        }\n      );\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonLayer,\n      polygonLineLayer,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonLayer\n    ];\n  }\n  /* eslint-enable complexity */\n}\n","/* eslint-disable no-negated-condition */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent } from 'd3-array';\nimport { ScaleLinear, ScaleThreshold, scaleThreshold } from 'd3-scale';\nimport {\n  getSequentialSchemeRegistry,\n  JsonObject,\n  QueryFormData,\n  SequentialScheme,\n} from '@superset-ui/core';\nimport { isNumber } from 'lodash';\nimport { hexToRGB } from './utils/colors';\n\nconst DEFAULT_NUM_BUCKETS = 10;\n\nexport type Buckets = {\n  break_points: string[];\n  num_buckets: string;\n};\n\nexport type BucketsWithColorScale = Buckets & {\n  linear_color_scheme: string | string[];\n  opacity: number;\n};\n\nexport function getBreakPoints(\n  {\n    break_points: formDataBreakPoints,\n    num_buckets: formDataNumBuckets,\n  }: Buckets,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  if (!features) {\n    return [];\n  }\n  if (formDataBreakPoints === undefined || formDataBreakPoints.length === 0) {\n    // compute evenly distributed break points based on number of buckets\n    const numBuckets = formDataNumBuckets\n      ? parseInt(formDataNumBuckets, 10)\n      : DEFAULT_NUM_BUCKETS;\n    const [minValue, maxValue] = extent<JsonObject, number>(\n      features,\n      accessor,\n    ).map((value: number | string | undefined) =>\n      typeof value === 'string' ? parseFloat(value) : value,\n    );\n    if (minValue === undefined || maxValue === undefined) {\n      return [];\n    }\n    const delta = (maxValue - minValue) / numBuckets;\n    const precision =\n      delta === 0 ? 0 : Math.max(0, Math.ceil(Math.log10(1 / delta)));\n    const extraBucket =\n      maxValue > parseFloat(maxValue.toFixed(precision)) ? 1 : 0;\n    const startValue =\n      minValue < parseFloat(minValue.toFixed(precision))\n        ? minValue - 1\n        : minValue;\n\n    return new Array(numBuckets + 1 + extraBucket)\n      .fill(0)\n      .map((_, i) => (startValue + i * delta).toFixed(precision));\n  }\n\n  return formDataBreakPoints.sort(\n    (a: string, b: string) => parseFloat(a) - parseFloat(b),\n  );\n}\n\nexport function getBreakPointColorScaler(\n  {\n    break_points: formDataBreakPoints,\n    num_buckets: formDataNumBuckets,\n    linear_color_scheme: linearColorScheme,\n    opacity,\n  }: BucketsWithColorScale,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  const breakPoints =\n    formDataBreakPoints || formDataNumBuckets\n      ? getBreakPoints(\n          {\n            break_points: formDataBreakPoints,\n            num_buckets: formDataNumBuckets,\n          },\n          features,\n          accessor,\n        )\n      : null;\n  const colorScheme = Array.isArray(linearColorScheme)\n    ? new SequentialScheme({\n        colors: linearColorScheme,\n        id: 'custom',\n      })\n    : getSequentialSchemeRegistry().get(linearColorScheme);\n\n  if (!colorScheme) {\n    return null;\n  }\n  let scaler: ScaleLinear<string, string> | ScaleThreshold<number, string>;\n  let maskPoint: (v: number | undefined) => boolean;\n  if (breakPoints !== null) {\n    // bucket colors into discrete colors\n    const n = breakPoints.length - 1;\n    const bucketedColors =\n      n > 1\n        ? colorScheme.getColors(n)\n        : [colorScheme.colors[colorScheme.colors.length - 1]];\n\n    // repeat ends\n    const first = bucketedColors[0];\n    const last = bucketedColors[bucketedColors.length - 1];\n    bucketedColors.unshift(first);\n    bucketedColors.push(last);\n\n    const points = breakPoints.map(parseFloat);\n    scaler = scaleThreshold<number, string>()\n      .domain(points)\n      .range(bucketedColors);\n    maskPoint = value => !!value && (value > points[n] || value < points[0]);\n  } else {\n    // interpolate colors linearly\n    const linearScaleDomain = extent(features, accessor);\n    if (!linearScaleDomain.some(isNumber)) {\n      scaler = colorScheme.createLinearScale();\n    } else {\n      scaler = colorScheme.createLinearScale(\n        extent(features, accessor) as number[],\n      );\n    }\n    maskPoint = () => false;\n  }\n\n  return (d: JsonObject): [number, number, number, number] => {\n    const v = accessor(d);\n    if (!v) {\n      return [0, 0, 0, 0];\n    }\n    const c = hexToRGB(scaler(v));\n    if (maskPoint(v)) {\n      c[3] = 0;\n    } else {\n      c[3] = (opacity / 100) * 255;\n    }\n\n    return c;\n  };\n}\n\nexport function getBuckets(\n  fd: QueryFormData & BucketsWithColorScale,\n  features: JsonObject[],\n  accessor: (value: JsonObject) => number | undefined,\n) {\n  const breakPoints = getBreakPoints(fd, features, accessor);\n  const colorScaler = getBreakPointColorScaler(fd, features, accessor);\n  const buckets = {};\n  breakPoints.slice(1).forEach((value, i) => {\n    const range = `${breakPoints[i]} - ${breakPoints[i + 1]}`;\n    const mid =\n      0.5 * (parseFloat(breakPoints[i]) + parseFloat(breakPoints[i + 1]));\n    // fix polygon doesn't show\n    const metricLabel = fd.metric ? fd.metric.label || fd.metric : null;\n    buckets[range] = {\n      color: colorScaler?.({ [metricLabel || fd.metric]: mid }),\n      enabled: true,\n    };\n  });\n\n  return buckets;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { Point } from '../types';\n\n/** Format originally used by the Polygon plugin */\ntype CustomPolygonFeature = {\n  polygon: Point[];\n};\n\n/**\n * Format that is geojson standard\n * https://geojson.org/geojson-spec.html\n */\ntype GeojsonPolygonFeature = {\n  polygon: {\n    type: 'Feature';\n    geometry: {\n      type: 'Polygon';\n      coordinates: Point[][];\n    };\n  };\n};\n\nexport default function getPointsFromPolygon(\n  feature: CustomPolygonFeature | GeojsonPolygonFeature,\n) {\n  return 'geometry' in feature.polygon\n    ? feature.polygon.geometry.coordinates[0]\n    : feature.polygon;\n}\n","/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/no-access-state-in-setstate */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\n\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  HandlerFunction,\n  JsonObject,\n  JsonValue,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\n\nimport { PolygonLayer } from 'deck.gl/typed';\n\nimport Legend from '../../components/Legend';\nimport TooltipRow from '../../TooltipRow';\nimport { getBuckets, getBreakPointColorScaler } from '../../utils';\n\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport getPointsFromPolygon from '../../utils/getPointsFromPolygon';\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { TooltipProps } from '../../components/Tooltip';\n\nconst DOUBLE_CLICK_THRESHOLD = 250; // milliseconds\n\nfunction getElevation(\n  d: JsonObject,\n  colorScaler: (d: JsonObject) => [number, number, number, number],\n) {\n  /* in deck.gl 5.3.4 (used in Superset as of 2018-10-24), if a polygon has\n   * opacity zero it will make everything behind it have opacity zero,\n   * effectively showing the map layer no matter what other polygons are\n   * behind it.\n   */\n  return colorScaler(d)[3] === 0 ? 0 : d.elevation;\n}\n\nfunction setTooltipContent(formData: PolygonFormData) {\n  return (o: JsonObject) => {\n    const metricLabel = formData?.metric?.label || formData?.metric;\n\n    return (\n      <div className=\"deckgl-tooltip\">\n        {o.object?.name && (\n          <TooltipRow\n            // eslint-disable-next-line prefer-template\n            label={t('name') + ': '}\n            value={`${o.object.name}`}\n          />\n        )}\n        {o.object?.[formData?.line_column] && (\n          <TooltipRow\n            label={`${formData.line_column}: `}\n            value={`${o.object[formData.line_column]}`}\n          />\n        )}\n        {formData?.metric && (\n          <TooltipRow\n            label={`${metricLabel}: `}\n            value={`${o.object?.[metricLabel]}`}\n          />\n        )}\n      </div>\n    );\n  };\n}\n\nexport function getLayer(\n  formData: PolygonFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  selected: JsonObject[],\n  onSelect: (value: JsonValue) => void,\n) {\n  const fd = formData;\n  const fc = fd.fill_color_picker;\n  const sc = fd.stroke_color_picker;\n  let data = [...payload.data.features];\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  const metricLabel = fd.metric ? fd.metric.label || fd.metric : null;\n  const accessor = (d: JsonObject) => d[metricLabel];\n  // base color for the polygons\n  const baseColorScaler =\n    fd.metric === null\n      ? () => [fc.r, fc.g, fc.b, 255 * fc.a]\n      : getBreakPointColorScaler(fd, data, accessor);\n\n  // when polygons are selected, reduce the opacity of non-selected polygons\n  const colorScaler = (d: JsonObject): [number, number, number, number] => {\n    const baseColor = (baseColorScaler?.(d) as [\n      number,\n      number,\n      number,\n      number,\n    ]) || [0, 0, 0, 0];\n    if (selected.length > 0 && !selected.includes(d[fd.line_column])) {\n      baseColor[3] /= 2;\n    }\n\n    return baseColor;\n  };\n\n  const tooltipContentGenerator =\n    fd.line_column &&\n    fd.metric &&\n    ['json', 'geohash', 'zipcode'].includes(fd.line_type)\n      ? setTooltipContent(fd)\n      : () => null;\n\n  return new PolygonLayer({\n    id: `path-layer-${fd.slice_id}` as const,\n    data,\n    filled: fd.filled,\n    stroked: fd.stroked,\n    getPolygon: getPointsFromPolygon,\n    getFillColor: colorScaler,\n    getLineColor: [sc.r, sc.g, sc.b, 255 * sc.a],\n    getLineWidth: fd.line_width,\n    extruded: fd.extruded,\n    lineWidthUnits: fd.line_width_unit,\n    getElevation: d => getElevation(d, colorScaler),\n    elevationScale: fd.multiplier,\n    fp64: true,\n    ...commonLayerProps(fd, setTooltip, tooltipContentGenerator, onSelect),\n  });\n}\n\nexport type PolygonFormData = QueryFormData & {\n  break_points: string[];\n  num_buckets: string;\n  linear_color_scheme: string | string[];\n  opacity: number;\n};\nexport type DeckGLPolygonProps = {\n  formData: PolygonFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  onAddFilter: HandlerFunction;\n  width: number;\n  height: number;\n};\n\nconst DeckGLPolygon = (props: DeckGLPolygonProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const getAdjustedViewport = useCallback(() => {\n    let viewport = { ...props.viewport };\n    if (props.formData.autozoom) {\n      const features = props.payload.data.features || [];\n      viewport = fitViewport(viewport, {\n        width: props.width,\n        height: props.height,\n        points: features.flatMap(getPointsFromPolygon),\n      });\n    }\n    if (viewport.zoom < 0) {\n      viewport.zoom = 0;\n    }\n    return viewport;\n  }, [props]);\n\n  const [lastClick, setLastClick] = useState(0);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [selected, setSelected] = useState<JsonObject[]>([]);\n\n  useEffect(() => {\n    const { payload } = props;\n\n    if (payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setSelected([]);\n      setLastClick(0);\n      setStateFormData(payload.form_data);\n    }\n  }, [getAdjustedViewport, props, stateFormData, viewport]);\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const onSelect = useCallback(\n    (polygon: JsonObject) => {\n      const { formData, onAddFilter } = props;\n\n      const now = new Date().getDate();\n      const doubleClick = now - lastClick <= DOUBLE_CLICK_THRESHOLD;\n\n      // toggle selected polygons\n      const selectedCopy = [...selected];\n      if (doubleClick) {\n        selectedCopy.splice(0, selectedCopy.length, polygon);\n      } else if (formData.toggle_polygons) {\n        const i = selectedCopy.indexOf(polygon);\n        if (i === -1) {\n          selectedCopy.push(polygon);\n        } else {\n          selectedCopy.splice(i, 1);\n        }\n      } else {\n        selectedCopy.splice(0, 1, polygon);\n      }\n\n      setSelected(selectedCopy);\n      setLastClick(now);\n      if (formData.table_filter) {\n        onAddFilter(formData.line_column, selected, false, true);\n      }\n    },\n    [lastClick, props, selected],\n  );\n\n  const getLayers = useCallback(() => {\n    if (props.payload.data.features === undefined) {\n      return [];\n    }\n\n    const layer = getLayer(\n      props.formData,\n      props.payload,\n      props.onAddFilter,\n      setTooltip,\n      selected,\n      onSelect,\n    );\n\n    return [layer];\n  }, [\n    onSelect,\n    props.formData,\n    props.onAddFilter,\n    props.payload,\n    selected,\n    setTooltip,\n  ]);\n\n  const { payload, formData, setControlValue } = props;\n\n  const metricLabel = formData.metric\n    ? formData.metric.label || formData.metric\n    : null;\n  const accessor = (d: JsonObject) => d[metricLabel];\n\n  const buckets = getBuckets(formData, payload.data.features, accessor);\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <DeckGLContainerStyledWrapper\n        ref={containerRef}\n        viewport={viewport}\n        layers={getLayers()}\n        setControlValue={setControlValue}\n        mapStyle={formData.mapbox_style}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        width={props.width}\n        height={props.height}\n      />\n\n      {formData.metric !== null && (\n        <Legend\n          categories={buckets}\n          position={formData.legend_position}\n          format={formData.legend_format}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(DeckGLPolygon);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\nimport * as d3array from 'd3-array';\nimport { JsonObject, JsonValue, QueryFormData } from '@superset-ui/core';\nimport sandboxedEval from '../utils/sandbox';\nimport { TooltipProps } from '../components/Tooltip';\n\nexport function commonLayerProps(\n  formData: QueryFormData,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  setTooltipContent: (content: JsonObject) => ReactNode,\n  onSelect?: (value: JsonValue) => void,\n) {\n  const fd = formData;\n  let onHover;\n  let tooltipContentGenerator = setTooltipContent;\n  if (fd.js_tooltip) {\n    tooltipContentGenerator = sandboxedEval(fd.js_tooltip);\n  }\n  if (tooltipContentGenerator) {\n    onHover = (o: JsonObject) => {\n      if (o.picked) {\n        setTooltip({\n          content: tooltipContentGenerator(o),\n          x: o.x,\n          y: o.y,\n        });\n      } else {\n        setTooltip(null);\n      }\n      return true;\n    };\n  }\n  let onClick;\n  if (fd.js_onclick_href) {\n    onClick = (o: any) => {\n      const href = sandboxedEval(fd.js_onclick_href)(o);\n      window.open(href);\n      return true;\n    };\n  } else if (fd.table_filter && onSelect !== undefined) {\n    onClick = (o: any) => {\n      onSelect(o.object[fd.line_column]);\n      return true;\n    };\n  }\n\n  return {\n    onClick,\n    onHover,\n    pickable: Boolean(onHover),\n  };\n}\n\nconst percentiles = {\n  p1: 0.01,\n  p5: 0.05,\n  p95: 0.95,\n  p99: 0.99,\n};\n\n/* Get a stat function that operates on arrays, aligns with control=js_agg_function  */\nexport function getAggFunc(\n  type = 'sum',\n  accessor: ((object: any) => number | undefined) | null = null,\n) {\n  if (type === 'count') {\n    return (arr: number[]) => arr.length;\n  }\n  let d3func: (\n    iterable: Array<unknown>,\n    accessor?: (object: JsonObject) => number | undefined,\n  ) => number[] | number | undefined;\n  if (type in percentiles) {\n    d3func = (arr, acc: (object: JsonObject) => number | undefined) => {\n      let sortedArr;\n      if (accessor) {\n        sortedArr = arr.sort((o1: JsonObject, o2: JsonObject) =>\n          d3array.ascending(accessor(o1), accessor(o2)),\n        );\n      } else {\n        sortedArr = arr.sort(d3array.ascending);\n      }\n\n      return d3array.quantile(sortedArr, percentiles[type], acc);\n    };\n  } else {\n    d3func = d3array[type];\n  }\n  if (!accessor) {\n    return (arr: JsonObject[]) => d3func(arr);\n  }\n\n  return (arr: JsonObject[]) => d3func(arr.map(x => accessor(x)));\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { rgb } from 'd3-color';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function hexToRGB(\n  hex: string | undefined,\n  alpha = 255,\n): [number, number, number, number] {\n  if (!hex) {\n    return [0, 0, 0, alpha];\n  }\n  const { r, g, b } = rgb(hex);\n\n  return [r, g, b, alpha];\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent as d3Extent } from 'd3-array';\nimport { Point, Range } from '../types';\n\nconst LAT_LIMIT: Range = [-90, 90];\nconst LNG_LIMIT: Range = [-180, 180];\n\n/**\n * Expand a coordinate range by `padding` and within limits, if needed\n */\nfunction expandIfNeeded(\n  [curMin, curMax]: Range,\n  [minBound, maxBound]: Range,\n  padding = 0.25,\n) {\n  return curMin < curMax\n    ? [curMin, curMax]\n    : [\n        Math.max(minBound, curMin - padding),\n        Math.min(maxBound, curMax + padding),\n      ];\n}\n\nexport default function computeBoundsFromPoints(\n  points: Point[],\n): [Point, Point] {\n  const latBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[1]) as Range,\n    LAT_LIMIT,\n  );\n  const lngBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[0]) as Range,\n    LNG_LIMIT,\n  );\n  return [\n    [lngBounds[0], latBounds[0]],\n    [lngBounds[1], latBounds[1]],\n  ];\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { fitBounds } from '@math.gl/web-mercator';\nimport computeBoundsFromPoints from './computeBoundsFromPoints';\nimport { Point } from '../types';\n\nexport type Viewport = {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  bearing?: number;\n  pitch?: number;\n};\n\nexport type FitViewportOptions = {\n  points: Point[];\n  width: number;\n  height: number;\n  minExtent?: number;\n  maxZoom?: number;\n  offset?: [number, number];\n  padding?: number;\n};\n\nexport default function fitViewport(\n  originalViewPort: Viewport,\n  {\n    points,\n    width,\n    height,\n    minExtent,\n    maxZoom,\n    offset,\n    padding = 20,\n  }: FitViewportOptions,\n): Viewport {\n  const { bearing, pitch } = originalViewPort;\n  const bounds = computeBoundsFromPoints(points);\n\n  try {\n    return {\n      ...fitBounds({\n        bounds,\n        width,\n        height,\n        minExtent,\n        maxZoom,\n        offset,\n        padding,\n      }),\n      bearing,\n      pitch,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Could not fit viewport', error);\n  }\n\n  return originalViewPort;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// A safe alternative to JS's eval\nimport vm, { Context, RunningScriptOptions } from 'vm';\nimport _ from 'underscore';\nimport * as d3array from 'd3-array';\nimport * as colors from './colors';\n\n// Objects exposed here should be treated like a public API\n// if `underscore` had backwards incompatible changes in a future release, we'd\n// have to be careful about bumping the library as those changes could break user charts\nconst GLOBAL_CONTEXT = {\n  console,\n  _,\n  colors,\n  d3array,\n};\n\n// Copied/modified from https://github.com/hacksparrow/safe-eval/blob/master/index.js\nexport default function sandboxedEval(\n  code: string,\n  context?: Context,\n  opts?: RunningScriptOptions | string,\n) {\n  const sandbox = {};\n  const resultKey = `SAFE_EVAL_${Math.floor(Math.random() * 1000000)}`;\n  sandbox[resultKey] = {};\n  const codeToEval = `${resultKey}=${code}`;\n  const sandboxContext = { ...GLOBAL_CONTEXT, ...context };\n  Object.keys(sandboxContext).forEach(key => {\n    sandbox[key] = sandboxContext[key];\n  });\n  try {\n    vm.runInNewContext(codeToEval, sandbox, opts);\n\n    return sandbox[resultKey];\n  } catch (error) {\n    return () => error;\n  }\n}\n"],"names":["CompositeLayer","Layer","isComposite","isLoaded","super","this","getSubLayers","every","layer","internalState","subLayers","initializeState","context","setState","updateObject","setNeedsUpdate","getPickingInfo","info","object","__source","parent","id","index","filterSubLayer","shouldRenderSubLayer","subLayerId","data","length","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","props","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","accessor","objectInfo","target","x","i","getSubLayerProps","sublayerProps","_this$props$updateTri","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","newProps","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","propTypes","PROP_TYPES_SYMBOL","subLayerPropTypes","_propTypes","key","propType","Object","assign","concat","all","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_getAttributeManager","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","flatten","Boolean","debug","PathTesselator","Tesselator","constructor","opts","attributes","positions","size","padding","initialize","fp64","Float64Array","Float32Array","segmentTypes","Uint8ClampedArray","get","attributeName","getGeometryFromBuffer","buffer","normalize","normalizeGeometry","path","gridResolution","flatPath","Array","isArray","j","cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","positionSize","resolution","getGeometrySize","isCut","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","fill","p","ptIndex","getPointOnPath","loop","lastPointIndex","DEFAULT_COLOR","defaultProps","widthUnits","widthScale","min","value","widthMinPixels","widthMaxPixels","Number","MAX_SAFE_INTEGER","jointRounded","capRounded","miterLimit","billboard","_pathType","getPath","getColor","getWidth","rounded","deprecatedFor","ATTRIBUTE_TRANSITION","enter","chunk","subarray","PathLayer","args","_defineProperty","getShaders","vs","fs","modules","project32","picking","getAttributeManager","addInstanced","vertexOffset","use64bitPositions","transition","update","calculatePositions","noAlloc","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","defaultValue","instanceColors","colorFormat","normalized","instancePickingColors","encodePickingColor","pathTesselator","updateState","params","changeFlags","attributeManager","dataChanged","updateTriggersChanged","state","buffers","updateGeometry","geometryBuffer","getGeometry","viewport","numInstances","instanceCount","startIndices","vertexStarts","invalidateAll","extensionsChanged","_this$state$model","gl","model","delete","_getModel","find","d","disablePickingIndex","objectIndex","_disablePickingIndex","draw","uniforms","setUniforms","jointType","capType","UNIT","Model","geometry","Geometry","drawMode","indices","Uint16Array","isInstanced","attribute","replaceInRange","getIndex","dataRange","replace","startRow","endRow","Infinity","count","replaceStart","replaceEnd","endChunk","slice","undefined","StyledDiv","styled","div","theme","top","left","gridUnit","colors","grayscale","dark2","light5","typography","sizes","s","Tooltip","tooltip","y","content","safeContent","safeHtmlSpan","_jsx","children","DeckGLContainer","memo","forwardRef","ref","setTooltip","useState","lastUpdate","setLastUpdate","viewState","setViewState","prevViewport","usePrevious","useImperativeHandle","tick","useCallback","Date","now","setCV","setControlValue","useEffect","timer","setInterval","clearInterval","_isEqual","onViewStateChange","layers","some","l","map","height","width","_jsxs","_Fragment","style","position","DeckGL","controller","glOptions","preserveDrawingBuffer","StaticMap","mapStyle","mapboxApiAccessToken","DeckGLContainerStyledWrapper","TooltipRow","label","StyledLegend","light2","base","categoryDelimiter","Legend","format","d3Format","forceCategorical","categories","categoriesObject","toggleCategory","showSingleCategory","numValue","parseFloat","formatNumber","formatCategoryLabel","k","includes","values","split","keys","entries","v","color","join","icon","enabled","href","role","onClick","onDoubleClick","charAt","className","defaultLineColor","stroked","filled","extruded","elevationScale","wireframe","_normalize","_windingOrder","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","lineJointRounded","lineMiterLimit","getPolygon","f","polygon","getFillColor","getLineColor","getLineWidth","getElevation","material","PolygonLayer","paths","getLineDashArray","log","removed","geometryChanged","pathsDiff","_getPaths","iterable","createIterable","Polygon","holeIndices","push","_dataDiff","transitions","lineDashJustified","FillLayer","SolidPolygonLayer","StrokeLayer","polygonLayer","lineColors","dashJustified","getDashArray","DEFAULT_NUM_BUCKETS","getBreakPoints","break_points","formDataBreakPoints","num_buckets","formDataNumBuckets","features","numBuckets","parseInt","minValue","maxValue","extent","delta","precision","Math","max","ceil","log10","extraBucket","toFixed","startValue","_","sort","a","b","getBreakPointColorScaler","linear_color_scheme","linearColorScheme","breakPoints","colorScheme","SequentialScheme","getSequentialSchemeRegistry","scaler","maskPoint","n","bucketedColors","getColors","first","last","unshift","points","scaleThreshold","domain","range","linearScaleDomain","createLinearScale","c","hexToRGB","getPointsFromPolygon","feature","coordinates","getLayer","formData","payload","onAddFilter","selected","onSelect","fd","fc","fill_color_picker","sc","stroke_color_picker","js_data_mutator","sandboxedEval","jsFnMutator","metricLabel","metric","baseColorScaler","r","g","colorScaler","baseColor","line_column","tooltipContentGenerator","line_type","o","_formData$metric","_o$object","_o$object2","_o$object3","name","t","setTooltipContent","slice_id","line_width","line_width_unit","elevation","multiplier","commonLayerProps","DeckGLPolygon","containerRef","useRef","getAdjustedViewport","autozoom","fitViewport","flatMap","zoom","lastClick","setLastClick","setViewport","stateFormData","setStateFormData","form_data","setSelected","current","getDate","doubleClick","selectedCopy","splice","toggle_polygons","indexOf","table_filter","getLayers","buckets","forEach","mid","getBuckets","mapbox_style","mapboxApiKey","legend_position","legend_format","onHover","js_tooltip","picked","js_onclick_href","window","open","percentiles","p1","p5","p95","p99","getAggFunc","arr","d3func","acc","sortedArr","o1","o2","d3array","hex","alpha","rgb","LAT_LIMIT","LNG_LIMIT","expandIfNeeded","curMin","curMax","minBound","maxBound","originalViewPort","minExtent","maxZoom","offset","bearing","pitch","bounds","latBounds","d3Extent","lngBounds","computeBoundsFromPoints","fitBounds","error","console","GLOBAL_CONTEXT","code","sandbox","resultKey","floor","random","codeToEval","sandboxContext","vm"],"sourceRoot":""}
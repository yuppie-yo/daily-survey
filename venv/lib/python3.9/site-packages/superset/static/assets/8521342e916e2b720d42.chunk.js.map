{"version":3,"file":"8521342e916e2b720d42.chunk.js","mappings":"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","sources":["webpack://superset/../../../src/utils/prop-utils.js","webpack://superset/../../src/aggregation-layer.ts","webpack://superset/../../../src/utils/color-utils.ts","webpack://superset/../../../src/lib/composite-layer.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Heatmap/Heatmap.tsx"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport function filterProps(props, filterKeys) {\n  const filteredProps = {};\n  for (const key in props) {\n    if (!filterKeys.includes(key)) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange: [number, number, number][] = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\nimport {PROP_TYPES_SYMBOL} from '../lifecycle/constants';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT extends {} = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  /** Returns sub layer props for a specific sublayer */\n  // eslint-disable-next-line complexity\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { HeatmapLayer, Position, Color } from 'deck.gl/typed';\nimport { t, getSequentialSchemeRegistry, JsonObject } from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport sandboxedEval from '../../utils/sandbox';\nimport { hexToRGB } from '../../utils/colors';\nimport { createDeckGLComponent, getLayerType } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Centroid (Longitude and Latitude): ')}\n        value={`(${o?.coordinate[0]}, ${o?.coordinate[1]})`}\n      />\n    </div>\n  );\n}\nexport const getLayer: getLayerType<unknown> = (\n  formData,\n  payload,\n  onAddFilter,\n  setTooltip,\n) => {\n  const fd = formData;\n  const {\n    intensity = 1,\n    radius_pixels: radiusPixels = 30,\n    aggregation = 'SUM',\n    js_data_mutator: jsFnMutator,\n    linear_color_scheme: colorScheme,\n  } = fd;\n  let data = payload.data.features;\n\n  if (jsFnMutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutatorFunction = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutatorFunction(data);\n  }\n\n  const colorScale = getSequentialSchemeRegistry()\n    ?.get(colorScheme)\n    ?.createLinearScale([0, 6]);\n  const colorRange = colorScale\n    ?.range()\n    ?.map(color => hexToRGB(color))\n    ?.reverse() as Color[];\n\n  return new HeatmapLayer({\n    id: `heatmp-layer-${fd.slice_id}` as const,\n    data,\n    intensity,\n    radiusPixels,\n    colorRange,\n    aggregation: aggregation.toUpperCase(),\n    getPosition: (d: { position: Position; weight: number }) => d.position,\n    getWeight: (d: { position: number[]; weight: number }) =>\n      d.weight ? d.weight : 1,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n};\n\nfunction getPoints(data: any[]) {\n  return data.map(d => d.position);\n}\n\nexport default createDeckGLComponent(getLayer, getPoints);\n"],"names":["filterProps","props","filterKeys","filteredProps","key","includes","AggregationLayer","CompositeLayer","constructor","args","_defineProperty","initializeAggregationLayer","dimensions","super","initializeState","this","context","setState","ignoreProps","_propTypes","data","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","Object","assign","create","pickingActive","devicePixelRatio","cssToDeviceRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","compareProps","newProps","propTypes","name","isAttributeChanged","undefined","obj","isEmpty","isObjectEmpty","_getAttributeManager","AttributeManager","id","stats","defaultColorRange","colorRangeToFlatArray","colorRange","normalize","ArrayType","Float32Array","flatArray","Number","isFinite","length","index","i","color","Layer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","updateObject","setNeedsUpdate","getPickingInfo","info","object","__source","parent","filterSubLayer","shouldRenderSubLayer","subLayerId","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","objectInfo","target","x","getSubLayerProps","sublayerProps","_this$props$updateTri","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","PROP_TYPES_SYMBOL","subLayerPropTypes","propType","concat","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","flatten","Boolean","debug","setTooltipContent","o","_jsx","className","children","TooltipRow","label","t","value","coordinate","getLayer","formData","payload","onAddFilter","setTooltip","_getSequentialSchemeR","_getSequentialSchemeR2","_colorScale$range","_colorScale$range$map","fd","intensity","radius_pixels","radiusPixels","aggregation","js_data_mutator","jsFnMutator","linear_color_scheme","colorScheme","features","sandboxedEval","jsFnMutatorFunction","colorScale","getSequentialSchemeRegistry","get","createLinearScale","range","map","hexToRGB","reverse","HeatmapLayer","slice_id","toUpperCase","getPosition","d","position","getWeight","weight","commonLayerProps","createDeckGLComponent"],"sourceRoot":""}
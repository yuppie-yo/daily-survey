{"version":3,"file":"b76e6f570536fabf460a.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/react-ultimate-pagination/lib/react-ultimate-pagination.js","webpack://superset/./src/components/AuditInfo/index.tsx","webpack://superset/./src/components/ImportModal/index.tsx","webpack://superset/./src/features/dashboards/types.ts","webpack://superset/./src/pages/DashboardList/index.tsx","webpack://superset/./node_modules/ultimate-pagination/lib/ultimate-pagination-constants.js","webpack://superset/./node_modules/ultimate-pagination/lib/ultimate-pagination-item-factories.js","webpack://superset/./node_modules/ultimate-pagination/lib/ultimate-pagination-utils.js","webpack://superset/./node_modules/ultimate-pagination/lib/ultimate-pagination.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ITEM_TYPES = exports.createUltimatePagination = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _ultimatePagination = require('ultimate-pagination');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nvar renderItemComponentFunctionFactory = function renderItemComponentFunctionFactory(itemTypeToComponent, currentPage, onChange) {\n  var onItemClickFunctionFactory = function onItemClickFunctionFactory(_ref) {\n    var value = _ref.value,\n        isDisabled = _ref.isDisabled;\n\n    return function () {\n      if (!isDisabled && onChange && currentPage !== value) {\n        onChange(value);\n      }\n    };\n  };\n\n  return function (props) {\n    var ItemComponent = itemTypeToComponent[props.type];\n    var onItemClick = onItemClickFunctionFactory(props);\n    return _react2.default.createElement(ItemComponent, _extends({ onClick: onItemClick }, props));\n  };\n};\n\nvar createUltimatePagination = function createUltimatePagination(_ref2) {\n  var itemTypeToComponent = _ref2.itemTypeToComponent,\n      _ref2$WrapperComponen = _ref2.WrapperComponent,\n      WrapperComponent = _ref2$WrapperComponen === undefined ? 'div' : _ref2$WrapperComponen;\n\n  var UltimatePaginationComponent = function UltimatePaginationComponent(props) {\n    var currentPage = props.currentPage,\n        totalPages = props.totalPages,\n        boundaryPagesRange = props.boundaryPagesRange,\n        siblingPagesRange = props.siblingPagesRange,\n        hideEllipsis = props.hideEllipsis,\n        hidePreviousAndNextPageLinks = props.hidePreviousAndNextPageLinks,\n        hideFirstAndLastPageLinks = props.hideFirstAndLastPageLinks,\n        onChange = props.onChange,\n        disabled = props.disabled,\n        restProps = _objectWithoutProperties(props, ['currentPage', 'totalPages', 'boundaryPagesRange', 'siblingPagesRange', 'hideEllipsis', 'hidePreviousAndNextPageLinks', 'hideFirstAndLastPageLinks', 'onChange', 'disabled']);\n\n    var paginationModel = (0, _ultimatePagination.getPaginationModel)({\n      currentPage: currentPage,\n      totalPages: totalPages,\n      boundaryPagesRange: boundaryPagesRange,\n      siblingPagesRange: siblingPagesRange,\n      hideEllipsis: hideEllipsis,\n      hidePreviousAndNextPageLinks: hidePreviousAndNextPageLinks,\n      hideFirstAndLastPageLinks: hideFirstAndLastPageLinks\n    });\n    var renderItemComponent = renderItemComponentFunctionFactory(itemTypeToComponent, currentPage, onChange);\n    return _react2.default.createElement(\n      WrapperComponent,\n      restProps,\n      paginationModel.map(function (itemModel) {\n        return renderItemComponent(_extends({}, itemModel, {\n          isDisabled: !!disabled\n        }));\n      })\n    );\n  };\n\n  UltimatePaginationComponent.propTypes = {\n    currentPage: _propTypes2.default.number.isRequired,\n    totalPages: _propTypes2.default.number.isRequired,\n    boundaryPagesRange: _propTypes2.default.number,\n    siblingPagesRange: _propTypes2.default.number,\n    hideEllipsis: _propTypes2.default.bool,\n    hidePreviousAndNextPageLinks: _propTypes2.default.bool,\n    hideFirstAndLastPageLinks: _propTypes2.default.bool,\n    onChange: _propTypes2.default.func,\n    disabled: _propTypes2.default.bool\n  };\n\n  return UltimatePaginationComponent;\n};\n\nexports.createUltimatePagination = createUltimatePagination;\nexports.ITEM_TYPES = _ultimatePagination.ITEM_TYPES;","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Owner from 'src/types/Owner';\nimport { Tooltip } from 'src/components/Tooltip';\nimport getOwnerName from 'src/utils/getOwnerName';\nimport { t } from '@superset-ui/core';\n\nexport type ModifiedInfoProps = {\n  user?: Owner;\n  date: string;\n};\n\nexport const ModifiedInfo = ({ user, date }: ModifiedInfoProps) => {\n  const dateSpan = (\n    <span className=\"no-wrap\" data-test=\"audit-info-date\">\n      {date}\n    </span>\n  );\n\n  if (user) {\n    const userName = getOwnerName(user);\n    const title = t('Modified by: %s', userName);\n    return (\n      <Tooltip title={title} placement=\"bottom\">\n        {dateSpan}\n      </Tooltip>\n    );\n  }\n  return dateSpan;\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { FunctionComponent, useEffect, useState, ChangeEvent } from 'react';\n\nimport { UploadChangeParam, UploadFile } from 'antd/lib/upload/interface';\nimport { styled, t } from '@superset-ui/core';\n\nimport Button from 'src/components/Button';\nimport Modal from 'src/components/Modal';\nimport { Upload } from 'src/components';\nimport { useImportResource } from 'src/views/CRUD/hooks';\nimport { ImportResourceName } from 'src/views/CRUD/types';\nimport ErrorAlert from './ErrorAlert';\n\nconst HelperMessage = styled.div`\n  display: block;\n  color: ${({ theme }) => theme.colors.grayscale.base};\n  font-size: ${({ theme }) => theme.typography.sizes.s}px;\n`;\n\nconst StyledInputContainer = styled.div`\n  padding-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  padding-top: ${({ theme }) => theme.gridUnit * 2}px;\n\n  & > div {\n    margin: ${({ theme }) => theme.gridUnit}px 0;\n  }\n\n  &.extra-container {\n    padding-top: 8px;\n  }\n\n  .confirm-overwrite {\n    margin-bottom: ${({ theme }) => theme.gridUnit * 2}px;\n  }\n\n  .input-container {\n    display: flex;\n    align-items: center;\n\n    label {\n      display: flex;\n      margin-right: ${({ theme }) => theme.gridUnit * 2}px;\n    }\n\n    i {\n      margin: 0 ${({ theme }) => theme.gridUnit}px;\n    }\n  }\n\n  input,\n  textarea {\n    flex: 1 1 auto;\n  }\n\n  textarea {\n    height: 160px;\n    resize: none;\n  }\n\n  input::placeholder,\n  textarea::placeholder {\n    color: ${({ theme }) => theme.colors.grayscale.light1};\n  }\n\n  textarea,\n  input[type='text'],\n  input[type='number'] {\n    padding: ${({ theme }) => theme.gridUnit * 1.5}px\n      ${({ theme }) => theme.gridUnit * 2}px;\n    border-style: none;\n    border: 1px solid ${({ theme }) => theme.colors.grayscale.light2};\n    border-radius: ${({ theme }) => theme.gridUnit}px;\n\n    &[name='name'] {\n      flex: 0 1 auto;\n      width: 40%;\n    }\n\n    &[name='sqlalchemy_uri'] {\n      margin-right: ${({ theme }) => theme.gridUnit * 3}px;\n    }\n  }\n`;\n\nexport interface ImportModelsModalProps {\n  resourceName: ImportResourceName;\n  resourceLabel: string;\n  passwordsNeededMessage: string;\n  confirmOverwriteMessage: string;\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  onModelImport: () => void;\n  show: boolean;\n  onHide: () => void;\n  passwordFields?: string[];\n  setPasswordFields?: (passwordFields: string[]) => void;\n  sshTunnelPasswordFields?: string[];\n  setSSHTunnelPasswordFields?: (sshTunnelPasswordFields: string[]) => void;\n  sshTunnelPrivateKeyFields?: string[];\n  setSSHTunnelPrivateKeyFields?: (sshTunnelPrivateKeyFields: string[]) => void;\n  sshTunnelPrivateKeyPasswordFields?: string[];\n  setSSHTunnelPrivateKeyPasswordFields?: (\n    sshTunnelPrivateKeyPasswordFields: string[],\n  ) => void;\n}\n\nconst ImportModelsModal: FunctionComponent<ImportModelsModalProps> = ({\n  resourceName,\n  resourceLabel,\n  passwordsNeededMessage,\n  confirmOverwriteMessage,\n  onModelImport,\n  show,\n  onHide,\n  passwordFields = [],\n  setPasswordFields = () => {},\n  sshTunnelPasswordFields = [],\n  setSSHTunnelPasswordFields = () => {},\n  sshTunnelPrivateKeyFields = [],\n  setSSHTunnelPrivateKeyFields = () => {},\n  sshTunnelPrivateKeyPasswordFields = [],\n  setSSHTunnelPrivateKeyPasswordFields = () => {},\n}) => {\n  const [isHidden, setIsHidden] = useState<boolean>(true);\n  const [passwords, setPasswords] = useState<Record<string, string>>({});\n  const [needsOverwriteConfirm, setNeedsOverwriteConfirm] =\n    useState<boolean>(false);\n  const [confirmedOverwrite, setConfirmedOverwrite] = useState<boolean>(false);\n  const [fileList, setFileList] = useState<UploadFile[]>([]);\n  const [importingModel, setImportingModel] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [sshTunnelPasswords, setSSHTunnelPasswords] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeys, setSSHTunnelPrivateKeys] = useState<\n    Record<string, string>\n  >({});\n  const [sshTunnelPrivateKeyPasswords, setSSHTunnelPrivateKeyPasswords] =\n    useState<Record<string, string>>({});\n\n  const clearModal = () => {\n    setFileList([]);\n    setPasswordFields([]);\n    setPasswords({});\n    setNeedsOverwriteConfirm(false);\n    setConfirmedOverwrite(false);\n    setImportingModel(false);\n    setErrorMessage('');\n    setSSHTunnelPasswordFields([]);\n    setSSHTunnelPrivateKeyFields([]);\n    setSSHTunnelPrivateKeyPasswordFields([]);\n    setSSHTunnelPasswords({});\n    setSSHTunnelPrivateKeys({});\n    setSSHTunnelPrivateKeyPasswords({});\n  };\n\n  const handleErrorMsg = (msg: string) => {\n    setErrorMessage(msg);\n  };\n\n  const {\n    state: {\n      alreadyExists,\n      passwordsNeeded,\n      sshPasswordNeeded,\n      sshPrivateKeyNeeded,\n      sshPrivateKeyPasswordNeeded,\n    },\n    importResource,\n  } = useImportResource(resourceName, resourceLabel, handleErrorMsg);\n\n  useEffect(() => {\n    setPasswordFields(passwordsNeeded);\n    if (passwordsNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [passwordsNeeded, setPasswordFields]);\n\n  useEffect(() => {\n    setNeedsOverwriteConfirm(alreadyExists.length > 0);\n    if (alreadyExists.length > 0) {\n      setImportingModel(false);\n    }\n  }, [alreadyExists, setNeedsOverwriteConfirm]);\n\n  useEffect(() => {\n    setSSHTunnelPasswordFields(sshPasswordNeeded);\n    if (sshPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPasswordNeeded, setSSHTunnelPasswordFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyFields(sshPrivateKeyNeeded);\n    if (sshPrivateKeyNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyNeeded, setSSHTunnelPrivateKeyFields]);\n\n  useEffect(() => {\n    setSSHTunnelPrivateKeyPasswordFields(sshPrivateKeyPasswordNeeded);\n    if (sshPrivateKeyPasswordNeeded.length > 0) {\n      setImportingModel(false);\n    }\n  }, [sshPrivateKeyPasswordNeeded, setSSHTunnelPrivateKeyPasswordFields]);\n\n  // Functions\n  const hide = () => {\n    setIsHidden(true);\n    onHide();\n    clearModal();\n  };\n\n  const onUpload = () => {\n    if (!(fileList[0]?.originFileObj instanceof File)) {\n      return;\n    }\n\n    setImportingModel(true);\n    importResource(\n      fileList[0].originFileObj,\n      passwords,\n      sshTunnelPasswords,\n      sshTunnelPrivateKeys,\n      sshTunnelPrivateKeyPasswords,\n      confirmedOverwrite,\n    ).then(result => {\n      if (result) {\n        clearModal();\n        onModelImport();\n      }\n    });\n  };\n\n  const changeFile = (info: UploadChangeParam) => {\n    setFileList([\n      {\n        ...info.file,\n        status: 'done',\n      },\n    ]);\n  };\n\n  const removeFile = (removedFile: UploadFile) => {\n    setFileList(fileList.filter(file => file.uid !== removedFile.uid));\n    return false;\n  };\n\n  const confirmOverwrite = (event: ChangeEvent<HTMLInputElement>) => {\n    const targetValue = (event.currentTarget?.value as string) ?? '';\n    setConfirmedOverwrite(targetValue.toUpperCase() === t('OVERWRITE'));\n  };\n\n  const renderPasswordFields = () => {\n    if (\n      passwordFields.length === 0 &&\n      sshTunnelPasswordFields.length === 0 &&\n      sshTunnelPrivateKeyFields.length === 0 &&\n      sshTunnelPrivateKeyPasswordFields.length === 0\n    ) {\n      return null;\n    }\n\n    const files = [\n      ...new Set([\n        ...passwordFields,\n        ...sshTunnelPasswordFields,\n        ...sshTunnelPrivateKeyFields,\n        ...sshTunnelPrivateKeyPasswordFields,\n      ]),\n    ];\n\n    return (\n      <>\n        <h5>{t('Database passwords')}</h5>\n        <HelperMessage>{passwordsNeededMessage}</HelperMessage>\n        {files.map(fileName => (\n          <>\n            {passwordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`password-${fileName}`}\n                  autoComplete={`password-${fileName}`}\n                  type=\"password\"\n                  value={passwords[fileName]}\n                  onChange={event =>\n                    setPasswords({\n                      ...passwords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer key={`ssh_tunnel_password-for-${fileName}`}>\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPasswords({\n                      ...sshTunnelPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_password\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <textarea\n                  name={`ssh_tunnel_private_key-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key-${fileName}`}\n                  value={sshTunnelPrivateKeys[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeys({\n                      ...sshTunnelPrivateKeys,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key\"\n                />\n              </StyledInputContainer>\n            )}\n            {sshTunnelPrivateKeyPasswordFields?.indexOf(fileName) >= 0 && (\n              <StyledInputContainer\n                key={`ssh_tunnel_private_key_password-for-${fileName}`}\n              >\n                <div className=\"control-label\">\n                  {t('%s SSH TUNNEL PRIVATE KEY PASSWORD', fileName.slice(10))}\n                  <span className=\"required\">*</span>\n                </div>\n                <input\n                  name={`ssh_tunnel_private_key_password-${fileName}`}\n                  autoComplete={`ssh_tunnel_private_key_password-${fileName}`}\n                  type=\"password\"\n                  value={sshTunnelPrivateKeyPasswords[fileName]}\n                  onChange={event =>\n                    setSSHTunnelPrivateKeyPasswords({\n                      ...sshTunnelPrivateKeyPasswords,\n                      [fileName]: event.target.value,\n                    })\n                  }\n                  data-test=\"ssh_tunnel_private_key_password\"\n                />\n              </StyledInputContainer>\n            )}\n          </>\n        ))}\n      </>\n    );\n  };\n\n  const renderOverwriteConfirmation = () => {\n    if (!needsOverwriteConfirm) {\n      return null;\n    }\n\n    return (\n      <>\n        <StyledInputContainer>\n          <div className=\"confirm-overwrite\">{confirmOverwriteMessage}</div>\n          <div className=\"control-label\">\n            {t('Type \"%s\" to confirm', t('OVERWRITE'))}\n          </div>\n          <input\n            data-test=\"overwrite-modal-input\"\n            id=\"overwrite\"\n            type=\"text\"\n            onChange={confirmOverwrite}\n          />\n        </StyledInputContainer>\n      </>\n    );\n  };\n\n  // Show/hide\n  if (isHidden && show) {\n    setIsHidden(false);\n  }\n\n  return (\n    <Modal\n      name=\"model\"\n      className=\"import-model-modal\"\n      disablePrimaryButton={\n        fileList.length === 0 ||\n        (needsOverwriteConfirm && !confirmedOverwrite) ||\n        importingModel\n      }\n      onHandledPrimaryAction={onUpload}\n      onHide={hide}\n      primaryButtonName={needsOverwriteConfirm ? t('Overwrite') : t('Import')}\n      primaryButtonType={needsOverwriteConfirm ? 'danger' : 'primary'}\n      width=\"750px\"\n      show={show}\n      title={<h4>{t('Import %s', resourceLabel)}</h4>}\n    >\n      <StyledInputContainer>\n        <Upload\n          name=\"modelFile\"\n          id=\"modelFile\"\n          data-test=\"model-file-input\"\n          accept=\".yaml,.json,.yml,.zip\"\n          fileList={fileList}\n          onChange={changeFile}\n          onRemove={removeFile}\n          // upload is handled by hook\n          customRequest={() => {}}\n          disabled={importingModel}\n        >\n          <Button loading={importingModel}>{t('Select file')}</Button>\n        </Upload>\n      </StyledInputContainer>\n      {errorMessage && (\n        <ErrorAlert\n          errorMessage={errorMessage}\n          showDbInstallInstructions={\n            passwordFields.length > 0 ||\n            sshTunnelPasswordFields.length > 0 ||\n            sshTunnelPrivateKeyFields.length > 0 ||\n            sshTunnelPrivateKeyPasswordFields.length > 0\n          }\n        />\n      )}\n      {renderPasswordFields()}\n      {renderOverwriteConfirmation()}\n    </Modal>\n  );\n};\n\nexport default ImportModelsModal;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nexport type DashboardObject = {\n  dashboard_title: string;\n  description?: string;\n  css?: string;\n  slug?: string;\n  position?: string;\n  metadata?: string;\n};\n\nexport enum DashboardStatus {\n  PUBLISHED = 'published',\n  DRAFT = 'draft',\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  isFeatureEnabled,\n  FeatureFlag,\n  styled,\n  SupersetClient,\n  t,\n} from '@superset-ui/core';\nimport { useSelector } from 'react-redux';\nimport { useState, useMemo, useCallback } from 'react';\nimport { Link } from 'react-router-dom';\nimport rison from 'rison';\nimport {\n  createFetchRelated,\n  createErrorHandler,\n  handleDashboardDelete,\n} from 'src/views/CRUD/utils';\nimport { useListViewResource, useFavoriteStatus } from 'src/views/CRUD/hooks';\nimport ConfirmStatusChange from 'src/components/ConfirmStatusChange';\nimport { TagsList } from 'src/components/Tags';\nimport handleResourceExport from 'src/utils/export';\nimport Loading from 'src/components/Loading';\nimport SubMenu, { SubMenuProps } from 'src/features/home/SubMenu';\nimport ListView, {\n  ListViewProps,\n  Filter,\n  Filters,\n  FilterOperator,\n} from 'src/components/ListView';\nimport { dangerouslyGetItemDoNotUse } from 'src/utils/localStorageHelpers';\nimport Owner from 'src/types/Owner';\nimport Tag from 'src/types/TagType';\nimport withToasts from 'src/components/MessageToasts/withToasts';\nimport FacePile from 'src/components/FacePile';\nimport Icons from 'src/components/Icons';\nimport DeleteModal from 'src/components/DeleteModal';\nimport FaveStar from 'src/components/FaveStar';\nimport PropertiesModal from 'src/dashboard/components/PropertiesModal';\nimport { Tooltip } from 'src/components/Tooltip';\nimport ImportModelsModal from 'src/components/ImportModal/index';\n\nimport Dashboard from 'src/dashboard/containers/Dashboard';\nimport {\n  Dashboard as CRUDDashboard,\n  QueryObjectColumns,\n} from 'src/views/CRUD/types';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport { loadTags } from 'src/components/Tags/utils';\nimport DashboardCard from 'src/features/dashboards/DashboardCard';\nimport { DashboardStatus } from 'src/features/dashboards/types';\nimport { UserWithPermissionsAndRoles } from 'src/types/bootstrapTypes';\nimport { findPermission } from 'src/utils/findPermission';\nimport { ModifiedInfo } from 'src/components/AuditInfo';\n\nconst PAGE_SIZE = 25;\nconst PASSWORDS_NEEDED_MESSAGE = t(\n  'The passwords for the databases below are needed in order to ' +\n    'import them together with the dashboards. Please note that the ' +\n    '\"Secure Extra\" and \"Certificate\" sections of ' +\n    'the database configuration are not present in export files, and ' +\n    'should be added manually after the import if they are needed.',\n);\nconst CONFIRM_OVERWRITE_MESSAGE = t(\n  'You are importing one or more dashboards that already exist. ' +\n    'Overwriting might cause you to lose some of your work. Are you ' +\n    'sure you want to overwrite?',\n);\n\ninterface DashboardListProps {\n  addDangerToast: (msg: string) => void;\n  addSuccessToast: (msg: string) => void;\n  user: {\n    userId: string | number;\n    firstName: string;\n    lastName: string;\n  };\n}\n\nexport interface Dashboard {\n  changed_by_name: string;\n  changed_on_delta_humanized: string;\n  changed_by: string;\n  dashboard_title: string;\n  id: number;\n  published: boolean;\n  url: string;\n  thumbnail_url: string;\n  owners: Owner[];\n  tags: Tag[];\n  created_by: object;\n}\n\nconst Actions = styled.div`\n  color: ${({ theme }) => theme.colors.grayscale.base};\n`;\n\nconst DASHBOARD_COLUMNS_TO_FETCH = [\n  'id',\n  'dashboard_title',\n  'published',\n  'url',\n  'slug',\n  'changed_by',\n  'changed_on_delta_humanized',\n  'owners.id',\n  'owners.first_name',\n  'owners.last_name',\n  'owners',\n  'tags.id',\n  'tags.name',\n  'tags.type',\n  'status',\n  'certified_by',\n  'certification_details',\n  'changed_on',\n];\n\nfunction DashboardList(props: DashboardListProps) {\n  const { addDangerToast, addSuccessToast, user } = props;\n\n  const { roles } = useSelector<any, UserWithPermissionsAndRoles>(\n    state => state.user,\n  );\n  const canReadTag = findPermission('can_read', 'Tag', roles);\n\n  const {\n    state: {\n      loading,\n      resourceCount: dashboardCount,\n      resourceCollection: dashboards,\n      bulkSelectEnabled,\n    },\n    setResourceCollection: setDashboards,\n    hasPerm,\n    fetchData,\n    toggleBulkSelect,\n    refreshData,\n  } = useListViewResource<Dashboard>(\n    'dashboard',\n    t('dashboard'),\n    addDangerToast,\n    undefined,\n    undefined,\n    undefined,\n    undefined,\n    DASHBOARD_COLUMNS_TO_FETCH,\n  );\n  const dashboardIds = useMemo(() => dashboards.map(d => d.id), [dashboards]);\n  const [saveFavoriteStatus, favoriteStatus] = useFavoriteStatus(\n    'dashboard',\n    dashboardIds,\n    addDangerToast,\n  );\n\n  const [dashboardToEdit, setDashboardToEdit] = useState<Dashboard | null>(\n    null,\n  );\n  const [dashboardToDelete, setDashboardToDelete] =\n    useState<CRUDDashboard | null>(null);\n\n  const [importingDashboard, showImportModal] = useState<boolean>(false);\n  const [passwordFields, setPasswordFields] = useState<string[]>([]);\n  const [preparingExport, setPreparingExport] = useState<boolean>(false);\n  const [sshTunnelPasswordFields, setSSHTunnelPasswordFields] = useState<\n    string[]\n  >([]);\n  const [sshTunnelPrivateKeyFields, setSSHTunnelPrivateKeyFields] = useState<\n    string[]\n  >([]);\n  const [\n    sshTunnelPrivateKeyPasswordFields,\n    setSSHTunnelPrivateKeyPasswordFields,\n  ] = useState<string[]>([]);\n\n  const openDashboardImportModal = () => {\n    showImportModal(true);\n  };\n\n  const closeDashboardImportModal = () => {\n    showImportModal(false);\n  };\n\n  const handleDashboardImport = () => {\n    showImportModal(false);\n    refreshData();\n    addSuccessToast(t('Dashboard imported'));\n  };\n\n  // TODO: Fix usage of localStorage keying on the user id\n  const userKey = dangerouslyGetItemDoNotUse(user?.userId?.toString(), null);\n\n  const canCreate = hasPerm('can_write');\n  const canEdit = hasPerm('can_write');\n  const canDelete = hasPerm('can_write');\n  const canExport = hasPerm('can_export');\n\n  const initialSort = [{ id: 'changed_on_delta_humanized', desc: true }];\n\n  function openDashboardEditModal(dashboard: Dashboard) {\n    setDashboardToEdit(dashboard);\n  }\n\n  function handleDashboardEdit(edits: Dashboard) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/dashboard/${edits.id}`,\n    }).then(\n      ({ json = {} }) => {\n        setDashboards(\n          dashboards.map(dashboard => {\n            if (dashboard.id === json?.result?.id) {\n              const {\n                changed_by_name,\n                changed_by,\n                dashboard_title = '',\n                slug = '',\n                json_metadata = '',\n                changed_on_delta_humanized,\n                url = '',\n                certified_by = '',\n                certification_details = '',\n                owners,\n                tags,\n              } = json.result;\n              return {\n                ...dashboard,\n                changed_by_name,\n                changed_by,\n                dashboard_title,\n                slug,\n                json_metadata,\n                changed_on_delta_humanized,\n                url,\n                certified_by,\n                certification_details,\n                owners,\n                tags,\n              };\n            }\n            return dashboard;\n          }),\n        );\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('An error occurred while fetching dashboards: %s', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const handleBulkDashboardExport = (dashboardsToExport: Dashboard[]) => {\n    const ids = dashboardsToExport.map(({ id }) => id);\n    handleResourceExport('dashboard', ids, () => {\n      setPreparingExport(false);\n    });\n    setPreparingExport(true);\n  };\n\n  function handleBulkDashboardDelete(dashboardsToDelete: Dashboard[]) {\n    return SupersetClient.delete({\n      endpoint: `/api/v1/dashboard/?q=${rison.encode(\n        dashboardsToDelete.map(({ id }) => id),\n      )}`,\n    }).then(\n      ({ json = {} }) => {\n        refreshData();\n        addSuccessToast(json.message);\n      },\n      createErrorHandler(errMsg =>\n        addDangerToast(\n          t('There was an issue deleting the selected dashboards: ', errMsg),\n        ),\n      ),\n    );\n  }\n\n  const columns = useMemo(\n    () => [\n      {\n        Cell: ({\n          row: {\n            original: { id },\n          },\n        }: any) =>\n          user?.userId && (\n            <FaveStar\n              itemId={id}\n              saveFaveStar={saveFavoriteStatus}\n              isStarred={favoriteStatus[id]}\n            />\n          ),\n        Header: '',\n        id: 'id',\n        disableSortBy: true,\n        size: 'xs',\n        hidden: !user?.userId,\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              url,\n              dashboard_title: dashboardTitle,\n              certified_by: certifiedBy,\n              certification_details: certificationDetails,\n            },\n          },\n        }: any) => (\n          <Link to={url}>\n            {certifiedBy && (\n              <>\n                <CertifiedBadge\n                  certifiedBy={certifiedBy}\n                  details={certificationDetails}\n                />{' '}\n              </>\n            )}\n            {dashboardTitle}\n          </Link>\n        ),\n        Header: t('Name'),\n        accessor: 'dashboard_title',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { status },\n          },\n        }: any) =>\n          status === DashboardStatus.PUBLISHED ? t('Published') : t('Draft'),\n        Header: t('Status'),\n        accessor: 'published',\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: { tags = [] },\n          },\n        }: {\n          row: {\n            original: {\n              tags: Tag[];\n            };\n          };\n        }) => (\n          // Only show custom type tags\n          <TagsList\n            tags={tags.filter(\n              (tag: Tag) => tag.type === 'TagTypes.custom' || tag.type === 1,\n            )}\n            maxTags={3}\n          />\n        ),\n        Header: t('Tags'),\n        accessor: 'tags',\n        disableSortBy: true,\n        hidden: !isFeatureEnabled(FeatureFlag.TaggingSystem),\n      },\n      {\n        Cell: ({\n          row: {\n            original: { owners = [] },\n          },\n        }: any) => <FacePile users={owners} />,\n        Header: t('Owners'),\n        accessor: 'owners',\n        disableSortBy: true,\n        size: 'xl',\n      },\n      {\n        Cell: ({\n          row: {\n            original: {\n              changed_on_delta_humanized: changedOn,\n              changed_by: changedBy,\n            },\n          },\n        }: any) => <ModifiedInfo date={changedOn} user={changedBy} />,\n        Header: t('Last modified'),\n        accessor: 'changed_on_delta_humanized',\n        size: 'xl',\n      },\n      {\n        Cell: ({ row: { original } }: any) => {\n          const handleDelete = () =>\n            handleDashboardDelete(\n              original,\n              refreshData,\n              addSuccessToast,\n              addDangerToast,\n            );\n          const handleEdit = () => openDashboardEditModal(original);\n          const handleExport = () => handleBulkDashboardExport([original]);\n\n          return (\n            <Actions className=\"actions\">\n              {canDelete && (\n                <ConfirmStatusChange\n                  title={t('Please confirm')}\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{original.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={handleDelete}\n                >\n                  {confirmDelete => (\n                    <Tooltip\n                      id=\"delete-action-tooltip\"\n                      title={t('Delete')}\n                      placement=\"bottom\"\n                    >\n                      <span\n                        role=\"button\"\n                        tabIndex={0}\n                        className=\"action-button\"\n                        onClick={confirmDelete}\n                      >\n                        <Icons.Trash data-test=\"dashboard-list-trash-icon\" />\n                      </span>\n                    </Tooltip>\n                  )}\n                </ConfirmStatusChange>\n              )}\n              {canExport && (\n                <Tooltip\n                  id=\"export-action-tooltip\"\n                  title={t('Export')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleExport}\n                  >\n                    <Icons.Share />\n                  </span>\n                </Tooltip>\n              )}\n              {canEdit && (\n                <Tooltip\n                  id=\"edit-action-tooltip\"\n                  title={t('Edit')}\n                  placement=\"bottom\"\n                >\n                  <span\n                    role=\"button\"\n                    tabIndex={0}\n                    className=\"action-button\"\n                    onClick={handleEdit}\n                  >\n                    <Icons.EditAlt data-test=\"edit-alt\" />\n                  </span>\n                </Tooltip>\n              )}\n            </Actions>\n          );\n        },\n        Header: t('Actions'),\n        id: 'actions',\n        hidden: !canEdit && !canDelete && !canExport,\n        disableSortBy: true,\n      },\n      {\n        accessor: QueryObjectColumns.ChangedBy,\n        hidden: true,\n      },\n    ],\n    [\n      user?.userId,\n      canEdit,\n      canDelete,\n      canExport,\n      saveFavoriteStatus,\n      favoriteStatus,\n      refreshData,\n      addSuccessToast,\n      addDangerToast,\n    ],\n  );\n\n  const favoritesFilter: Filter = useMemo(\n    () => ({\n      Header: t('Favorite'),\n      key: 'favorite',\n      id: 'id',\n      urlDisplay: 'favorite',\n      input: 'select',\n      operator: FilterOperator.DashboardIsFav,\n      unfilteredLabel: t('Any'),\n      selects: [\n        { label: t('Yes'), value: true },\n        { label: t('No'), value: false },\n      ],\n    }),\n    [],\n  );\n\n  const filters: Filters = useMemo(() => {\n    const filters_list = [\n      {\n        Header: t('Name'),\n        key: 'search',\n        id: 'dashboard_title',\n        input: 'search',\n        operator: FilterOperator.TitleOrSlug,\n      },\n      {\n        Header: t('Status'),\n        key: 'published',\n        id: 'published',\n        input: 'select',\n        operator: FilterOperator.Equals,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Published'), value: true },\n          { label: t('Draft'), value: false },\n        ],\n      },\n      ...(isFeatureEnabled(FeatureFlag.TaggingSystem) && canReadTag\n        ? [\n            {\n              Header: t('Tag'),\n              key: 'tags',\n              id: 'tags',\n              input: 'select',\n              operator: FilterOperator.DashboardTagById,\n              unfilteredLabel: t('All'),\n              fetchSelects: loadTags,\n            },\n          ]\n        : []),\n      {\n        Header: t('Owner'),\n        key: 'owner',\n        id: 'owners',\n        input: 'select',\n        operator: FilterOperator.RelationManyMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'owners',\n          createErrorHandler(errMsg =>\n            addDangerToast(\n              t(\n                'An error occurred while fetching dashboard owner values: %s',\n                errMsg,\n              ),\n            ),\n          ),\n          props.user,\n        ),\n        paginate: true,\n      },\n      ...(user?.userId ? [favoritesFilter] : []),\n      {\n        Header: t('Certified'),\n        key: 'certified',\n        id: 'id',\n        urlDisplay: 'certified',\n        input: 'select',\n        operator: FilterOperator.DashboardIsCertified,\n        unfilteredLabel: t('Any'),\n        selects: [\n          { label: t('Yes'), value: true },\n          { label: t('No'), value: false },\n        ],\n      },\n      {\n        Header: t('Modified by'),\n        key: 'changed_by',\n        id: 'changed_by',\n        input: 'select',\n        operator: FilterOperator.RelationOneMany,\n        unfilteredLabel: t('All'),\n        fetchSelects: createFetchRelated(\n          'dashboard',\n          'changed_by',\n          createErrorHandler(errMsg =>\n            t(\n              'An error occurred while fetching dataset datasource values: %s',\n              errMsg,\n            ),\n          ),\n          user,\n        ),\n        paginate: true,\n      },\n    ] as Filters;\n    return filters_list;\n  }, [addDangerToast, favoritesFilter, props.user]);\n\n  const sortTypes = [\n    {\n      desc: false,\n      id: 'dashboard_title',\n      label: t('Alphabetical'),\n      value: 'alphabetical',\n    },\n    {\n      desc: true,\n      id: 'changed_on_delta_humanized',\n      label: t('Recently modified'),\n      value: 'recently_modified',\n    },\n    {\n      desc: false,\n      id: 'changed_on_delta_humanized',\n      label: t('Least recently modified'),\n      value: 'least_recently_modified',\n    },\n  ];\n\n  const renderCard = useCallback(\n    (dashboard: Dashboard) => (\n      <DashboardCard\n        dashboard={dashboard}\n        hasPerm={hasPerm}\n        bulkSelectEnabled={bulkSelectEnabled}\n        showThumbnails={\n          userKey\n            ? userKey.thumbnails\n            : isFeatureEnabled(FeatureFlag.Thumbnails)\n        }\n        userId={user?.userId}\n        loading={loading}\n        openDashboardEditModal={openDashboardEditModal}\n        saveFavoriteStatus={saveFavoriteStatus}\n        favoriteStatus={favoriteStatus[dashboard.id]}\n        handleBulkDashboardExport={handleBulkDashboardExport}\n        onDelete={dashboard => setDashboardToDelete(dashboard)}\n      />\n    ),\n    [\n      bulkSelectEnabled,\n      favoriteStatus,\n      hasPerm,\n      loading,\n      user?.userId,\n      saveFavoriteStatus,\n      userKey,\n    ],\n  );\n\n  const subMenuButtons: SubMenuProps['buttons'] = [];\n  if (canDelete || canExport) {\n    subMenuButtons.push({\n      name: t('Bulk select'),\n      buttonStyle: 'secondary',\n      'data-test': 'bulk-select',\n      onClick: toggleBulkSelect,\n    });\n  }\n  if (canCreate) {\n    subMenuButtons.push({\n      name: (\n        <>\n          <i className=\"fa fa-plus\" /> {t('Dashboard')}\n        </>\n      ),\n      buttonStyle: 'primary',\n      onClick: () => {\n        window.location.assign('/dashboard/new');\n      },\n    });\n\n    subMenuButtons.push({\n      name: (\n        <Tooltip\n          id=\"import-tooltip\"\n          title={t('Import dashboards')}\n          placement=\"bottomRight\"\n        >\n          <Icons.Import data-test=\"import-button\" />\n        </Tooltip>\n      ),\n      buttonStyle: 'link',\n      onClick: openDashboardImportModal,\n    });\n  }\n  return (\n    <>\n      <SubMenu name={t('Dashboards')} buttons={subMenuButtons} />\n      <ConfirmStatusChange\n        title={t('Please confirm')}\n        description={t(\n          'Are you sure you want to delete the selected dashboards?',\n        )}\n        onConfirm={handleBulkDashboardDelete}\n      >\n        {confirmDelete => {\n          const bulkActions: ListViewProps['bulkActions'] = [];\n          if (canDelete) {\n            bulkActions.push({\n              key: 'delete',\n              name: t('Delete'),\n              type: 'danger',\n              onSelect: confirmDelete,\n            });\n          }\n          if (canExport) {\n            bulkActions.push({\n              key: 'export',\n              name: t('Export'),\n              type: 'primary',\n              onSelect: handleBulkDashboardExport,\n            });\n          }\n          return (\n            <>\n              {dashboardToEdit && (\n                <PropertiesModal\n                  dashboardId={dashboardToEdit.id}\n                  show\n                  onHide={() => setDashboardToEdit(null)}\n                  onSubmit={handleDashboardEdit}\n                />\n              )}\n              {dashboardToDelete && (\n                <DeleteModal\n                  description={\n                    <>\n                      {t('Are you sure you want to delete')}{' '}\n                      <b>{dashboardToDelete.dashboard_title}</b>?\n                    </>\n                  }\n                  onConfirm={() => {\n                    handleDashboardDelete(\n                      dashboardToDelete,\n                      refreshData,\n                      addSuccessToast,\n                      addDangerToast,\n                      undefined,\n                      user?.userId,\n                    );\n                    setDashboardToDelete(null);\n                  }}\n                  onHide={() => setDashboardToDelete(null)}\n                  open={!!dashboardToDelete}\n                  title={t('Please confirm')}\n                />\n              )}\n              <ListView<Dashboard>\n                bulkActions={bulkActions}\n                bulkSelectEnabled={bulkSelectEnabled}\n                cardSortSelectOptions={sortTypes}\n                className=\"dashboard-list-view\"\n                columns={columns}\n                count={dashboardCount}\n                data={dashboards}\n                disableBulkSelect={toggleBulkSelect}\n                fetchData={fetchData}\n                refreshData={refreshData}\n                filters={filters}\n                initialSort={initialSort}\n                loading={loading}\n                pageSize={PAGE_SIZE}\n                addSuccessToast={addSuccessToast}\n                addDangerToast={addDangerToast}\n                showThumbnails={\n                  userKey\n                    ? userKey.thumbnails\n                    : isFeatureEnabled(FeatureFlag.Thumbnails)\n                }\n                renderCard={renderCard}\n                defaultViewMode={\n                  isFeatureEnabled(FeatureFlag.ListviewsDefaultCardView)\n                    ? 'card'\n                    : 'table'\n                }\n                enableBulkTag\n                bulkTagResourceName=\"dashboard\"\n              />\n            </>\n          );\n        }}\n      </ConfirmStatusChange>\n\n      <ImportModelsModal\n        resourceName=\"dashboard\"\n        resourceLabel={t('dashboard')}\n        passwordsNeededMessage={PASSWORDS_NEEDED_MESSAGE}\n        confirmOverwriteMessage={CONFIRM_OVERWRITE_MESSAGE}\n        addDangerToast={addDangerToast}\n        addSuccessToast={addSuccessToast}\n        onModelImport={handleDashboardImport}\n        show={importingDashboard}\n        onHide={closeDashboardImportModal}\n        passwordFields={passwordFields}\n        setPasswordFields={setPasswordFields}\n        sshTunnelPasswordFields={sshTunnelPasswordFields}\n        setSSHTunnelPasswordFields={setSSHTunnelPasswordFields}\n        sshTunnelPrivateKeyFields={sshTunnelPrivateKeyFields}\n        setSSHTunnelPrivateKeyFields={setSSHTunnelPrivateKeyFields}\n        sshTunnelPrivateKeyPasswordFields={sshTunnelPrivateKeyPasswordFields}\n        setSSHTunnelPrivateKeyPasswordFields={\n          setSSHTunnelPrivateKeyPasswordFields\n        }\n      />\n\n      {preparingExport && <Loading />}\n    </>\n  );\n}\n\nexport default withToasts(DashboardList);\n","\"use strict\";\nexports.ITEM_TYPES = {\n    PAGE: 'PAGE',\n    ELLIPSIS: 'ELLIPSIS',\n    FIRST_PAGE_LINK: 'FIRST_PAGE_LINK',\n    PREVIOUS_PAGE_LINK: 'PREVIOUS_PAGE_LINK',\n    NEXT_PAGE_LINK: 'NEXT_PAGE_LINK',\n    LAST_PAGE_LINK: 'LAST_PAGE_LINK'\n};\nexports.ITEM_KEYS = {\n    FIRST_ELLIPSIS: -1,\n    SECOND_ELLIPSIS: -2,\n    FIRST_PAGE_LINK: -3,\n    PREVIOUS_PAGE_LINK: -4,\n    NEXT_PAGE_LINK: -5,\n    LAST_PAGE_LINK: -6\n};\n//# sourceMappingURL=ultimate-pagination-constants.js.map","\"use strict\";\nvar ultimate_pagination_constants_1 = require(\"./ultimate-pagination-constants\");\nexports.createFirstEllipsis = function (pageNumber) {\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.ELLIPSIS,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.FIRST_ELLIPSIS,\n        value: pageNumber,\n        isActive: false\n    };\n};\nexports.createSecondEllipsis = function (pageNumber) {\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.ELLIPSIS,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.SECOND_ELLIPSIS,\n        value: pageNumber,\n        isActive: false\n    };\n};\nexports.createFirstPageLink = function (options) {\n    var currentPage = options.currentPage;\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.FIRST_PAGE_LINK,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.FIRST_PAGE_LINK,\n        value: 1,\n        isActive: currentPage === 1\n    };\n};\nexports.createPreviousPageLink = function (options) {\n    var currentPage = options.currentPage;\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.PREVIOUS_PAGE_LINK,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.PREVIOUS_PAGE_LINK,\n        value: Math.max(1, currentPage - 1),\n        isActive: currentPage === 1\n    };\n};\nexports.createNextPageLink = function (options) {\n    var currentPage = options.currentPage, totalPages = options.totalPages;\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.NEXT_PAGE_LINK,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.NEXT_PAGE_LINK,\n        value: Math.min(totalPages, currentPage + 1),\n        isActive: currentPage === totalPages\n    };\n};\nexports.createLastPageLink = function (options) {\n    var currentPage = options.currentPage, totalPages = options.totalPages;\n    return {\n        type: ultimate_pagination_constants_1.ITEM_TYPES.LAST_PAGE_LINK,\n        key: ultimate_pagination_constants_1.ITEM_KEYS.LAST_PAGE_LINK,\n        value: totalPages,\n        isActive: currentPage === totalPages\n    };\n};\nexports.createPageFunctionFactory = function (options) {\n    var currentPage = options.currentPage;\n    return function (pageNumber) {\n        return {\n            type: ultimate_pagination_constants_1.ITEM_TYPES.PAGE,\n            key: pageNumber,\n            value: pageNumber,\n            isActive: pageNumber === currentPage\n        };\n    };\n};\n//# sourceMappingURL=ultimate-pagination-item-factories.js.map","\"use strict\";\nfunction createRange(start, end) {\n    var range = [];\n    for (var i = start; i <= end; i++) {\n        range.push(i);\n    }\n    return range;\n}\nexports.createRange = createRange;\n//# sourceMappingURL=ultimate-pagination-utils.js.map","\"use strict\";\nvar ultimate_pagination_utils_1 = require(\"./ultimate-pagination-utils\");\nvar ultimate_pagination_item_factories_1 = require(\"./ultimate-pagination-item-factories\");\nfunction getPaginationModel(options) {\n    if (options == null) {\n        throw new Error('getPaginationModel(): options object should be a passed');\n    }\n    var totalPages = Number(options.totalPages);\n    if (isNaN(totalPages)) {\n        throw new Error('getPaginationModel(): totalPages should be a number');\n    }\n    if (totalPages < 0) {\n        throw new Error('getPaginationModel(): totalPages shouldn\\'t be a negative number');\n    }\n    var currentPage = Number(options.currentPage);\n    if (isNaN(currentPage)) {\n        throw new Error('getPaginationModel(): currentPage should be a number');\n    }\n    if (currentPage < 0) {\n        throw new Error('getPaginationModel(): currentPage shouldn\\'t be a negative number');\n    }\n    if (currentPage > totalPages) {\n        throw new Error('getPaginationModel(): currentPage shouldn\\'t be greater than totalPages');\n    }\n    var boundaryPagesRange = (options.boundaryPagesRange == null ? 1 : Number(options.boundaryPagesRange));\n    if (isNaN(boundaryPagesRange)) {\n        throw new Error('getPaginationModel(): boundaryPagesRange should be a number');\n    }\n    if (boundaryPagesRange < 0) {\n        throw new Error('getPaginationModel(): boundaryPagesRange shouldn\\'t be a negative number');\n    }\n    var siblingPagesRange = (options.siblingPagesRange == null ? 1 : Number(options.siblingPagesRange));\n    if (isNaN(siblingPagesRange)) {\n        throw new Error('getPaginationModel(): siblingPagesRange should be a number');\n    }\n    if (siblingPagesRange < 0) {\n        throw new Error('getPaginationModel(): siblingPagesRange shouldn\\'t be a negative number');\n    }\n    var hidePreviousAndNextPageLinks = Boolean(options.hidePreviousAndNextPageLinks);\n    var hideFirstAndLastPageLinks = Boolean(options.hideFirstAndLastPageLinks);\n    var hideEllipsis = Boolean(options.hideEllipsis);\n    var ellipsisSize = (hideEllipsis ? 0 : 1);\n    var paginationModel = [];\n    var createPage = ultimate_pagination_item_factories_1.createPageFunctionFactory(options);\n    if (!hideFirstAndLastPageLinks) {\n        paginationModel.push(ultimate_pagination_item_factories_1.createFirstPageLink(options));\n    }\n    if (!hidePreviousAndNextPageLinks) {\n        paginationModel.push(ultimate_pagination_item_factories_1.createPreviousPageLink(options));\n    }\n    // Simplify generation of pages if number of available items is equal or greater than total pages to show\n    if (1 + 2 * ellipsisSize + 2 * siblingPagesRange + 2 * boundaryPagesRange >= totalPages) {\n        var allPages = ultimate_pagination_utils_1.createRange(1, totalPages).map(createPage);\n        paginationModel.push.apply(paginationModel, allPages);\n    }\n    else {\n        // Calculate group of first pages\n        var firstPagesStart = 1;\n        var firstPagesEnd = boundaryPagesRange;\n        var firstPages = ultimate_pagination_utils_1.createRange(firstPagesStart, firstPagesEnd).map(createPage);\n        // Calculate group of last pages\n        var lastPagesStart = totalPages + 1 - boundaryPagesRange;\n        var lastPagesEnd = totalPages;\n        var lastPages = ultimate_pagination_utils_1.createRange(lastPagesStart, lastPagesEnd).map(createPage);\n        // Calculate group of main pages\n        var mainPagesStart = Math.min(Math.max(currentPage - siblingPagesRange, firstPagesEnd + ellipsisSize + 1), lastPagesStart - ellipsisSize - 2 * siblingPagesRange - 1);\n        var mainPagesEnd = mainPagesStart + 2 * siblingPagesRange;\n        var mainPages = ultimate_pagination_utils_1.createRange(mainPagesStart, mainPagesEnd).map(createPage);\n        // Add group of first pages\n        paginationModel.push.apply(paginationModel, firstPages);\n        if (!hideEllipsis) {\n            // Calculate and add ellipsis before group of main pages\n            var firstEllipsisPageNumber = mainPagesStart - 1;\n            var showPageInsteadOfFirstEllipsis = (firstEllipsisPageNumber === firstPagesEnd + 1);\n            var createFirstEllipsisOrPage = showPageInsteadOfFirstEllipsis ? createPage : ultimate_pagination_item_factories_1.createFirstEllipsis;\n            var firstEllipsis = createFirstEllipsisOrPage(firstEllipsisPageNumber);\n            paginationModel.push(firstEllipsis);\n        }\n        // Add group of main pages\n        paginationModel.push.apply(paginationModel, mainPages);\n        if (!hideEllipsis) {\n            // Calculate and add ellipsis after group of main pages\n            var secondEllipsisPageNumber = mainPagesEnd + 1;\n            var showPageInsteadOfSecondEllipsis = (secondEllipsisPageNumber === lastPagesStart - 1);\n            var createSecondEllipsisOrPage = showPageInsteadOfSecondEllipsis ? createPage : ultimate_pagination_item_factories_1.createSecondEllipsis;\n            var secondEllipsis = createSecondEllipsisOrPage(secondEllipsisPageNumber);\n            paginationModel.push(secondEllipsis);\n        }\n        // Add group of last pages\n        paginationModel.push.apply(paginationModel, lastPages);\n    }\n    if (!hidePreviousAndNextPageLinks) {\n        paginationModel.push(ultimate_pagination_item_factories_1.createNextPageLink(options));\n    }\n    if (!hideFirstAndLastPageLinks) {\n        paginationModel.push(ultimate_pagination_item_factories_1.createLastPageLink(options));\n    }\n    return paginationModel;\n}\nexports.getPaginationModel = getPaginationModel;\nvar ultimate_pagination_constants_1 = require(\"./ultimate-pagination-constants\");\nexports.ITEM_TYPES = ultimate_pagination_constants_1.ITEM_TYPES;\nexports.ITEM_KEYS = ultimate_pagination_constants_1.ITEM_KEYS;\n//# sourceMappingURL=ultimate-pagination.js.map"],"names":["exports","undefined","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_react2","_interopRequireDefault","_propTypes2","_ultimatePagination","obj","__esModule","default","_ref2","itemTypeToComponent","_ref2$WrapperComponen","WrapperComponent","UltimatePaginationComponent","props","currentPage","totalPages","boundaryPagesRange","siblingPagesRange","hideEllipsis","hidePreviousAndNextPageLinks","hideFirstAndLastPageLinks","onChange","disabled","restProps","keys","indexOf","_objectWithoutProperties","paginationModel","getPaginationModel","renderItemComponent","_ref","value","isDisabled","ItemComponent","type","onItemClick","createElement","onClick","renderItemComponentFunctionFactory","map","itemModel","propTypes","number","isRequired","bool","func","ITEM_TYPES","ModifiedInfo","user","date","dateSpan","_jsx","className","children","userName","getOwnerName","title","t","Tooltip","placement","HelperMessage","styled","div","theme","colors","grayscale","base","typography","sizes","s","StyledInputContainer","gridUnit","light1","light2","ImportModelsModal","resourceName","resourceLabel","passwordsNeededMessage","confirmOverwriteMessage","onModelImport","show","onHide","passwordFields","setPasswordFields","sshTunnelPasswordFields","setSSHTunnelPasswordFields","sshTunnelPrivateKeyFields","setSSHTunnelPrivateKeyFields","sshTunnelPrivateKeyPasswordFields","setSSHTunnelPrivateKeyPasswordFields","isHidden","setIsHidden","useState","passwords","setPasswords","needsOverwriteConfirm","setNeedsOverwriteConfirm","confirmedOverwrite","setConfirmedOverwrite","fileList","setFileList","importingModel","setImportingModel","errorMessage","setErrorMessage","sshTunnelPasswords","setSSHTunnelPasswords","sshTunnelPrivateKeys","setSSHTunnelPrivateKeys","sshTunnelPrivateKeyPasswords","setSSHTunnelPrivateKeyPasswords","clearModal","state","alreadyExists","passwordsNeeded","sshPasswordNeeded","sshPrivateKeyNeeded","sshPrivateKeyPasswordNeeded","importResource","useImportResource","msg","useEffect","_jsxs","Modal","name","disablePrimaryButton","onHandledPrimaryAction","onUpload","_fileList$","originFileObj","File","then","result","hide","primaryButtonName","primaryButtonType","width","Upload","id","accept","info","file","status","onRemove","removedFile","filter","uid","customRequest","Button","loading","ErrorAlert","showDbInstallInstructions","renderPasswordFields","files","Set","_Fragment","fileName","slice","autoComplete","event","_event$currentTarget$","_event$currentTarget","targetValue","currentTarget","toUpperCase","DashboardStatus","PASSWORDS_NEEDED_MESSAGE","CONFIRM_OVERWRITE_MESSAGE","Actions","DASHBOARD_COLUMNS_TO_FETCH","withToasts","_user$userId","addDangerToast","addSuccessToast","roles","useSelector","canReadTag","findPermission","resourceCount","dashboardCount","resourceCollection","dashboards","bulkSelectEnabled","setResourceCollection","setDashboards","hasPerm","fetchData","toggleBulkSelect","refreshData","useListViewResource","dashboardIds","useMemo","d","saveFavoriteStatus","favoriteStatus","useFavoriteStatus","dashboardToEdit","setDashboardToEdit","dashboardToDelete","setDashboardToDelete","importingDashboard","showImportModal","preparingExport","setPreparingExport","userKey","dangerouslyGetItemDoNotUse","userId","toString","canCreate","canEdit","canDelete","canExport","initialSort","desc","openDashboardEditModal","dashboard","handleDashboardEdit","edits","SupersetClient","get","endpoint","json","_json$result","changed_by_name","changed_by","dashboard_title","slug","json_metadata","changed_on_delta_humanized","url","certified_by","certification_details","owners","tags","createErrorHandler","errMsg","handleBulkDashboardExport","dashboardsToExport","ids","handleResourceExport","columns","Cell","row","original","FaveStar","itemId","saveFaveStar","isStarred","Header","disableSortBy","size","hidden","dashboardTitle","certifiedBy","certificationDetails","Link","to","CertifiedBadge","details","accessor","PUBLISHED","TagsList","tag","maxTags","isFeatureEnabled","FeatureFlag","TaggingSystem","FacePile","users","changedOn","changedBy","ConfirmStatusChange","description","onConfirm","handleDelete","handleDashboardDelete","confirmDelete","role","tabIndex","Icons","Trash","handleExport","Share","handleEdit","EditAlt","QueryObjectColumns","ChangedBy","favoritesFilter","urlDisplay","input","operator","FilterOperator","DashboardIsFav","unfilteredLabel","selects","label","filters","TitleOrSlug","Equals","DashboardTagById","fetchSelects","loadTags","RelationManyMany","createFetchRelated","paginate","DashboardIsCertified","RelationOneMany","sortTypes","renderCard","useCallback","DashboardCard","showThumbnails","thumbnails","Thumbnails","onDelete","subMenuButtons","push","buttonStyle","window","location","Import","openDashboardImportModal","SubMenu","buttons","dashboardsToDelete","delete","rison","message","bulkActions","onSelect","PropertiesModal","dashboardId","onSubmit","DeleteModal","open","ListView","cardSortSelectOptions","count","data","disableBulkSelect","pageSize","defaultViewMode","ListviewsDefaultCardView","enableBulkTag","bulkTagResourceName","handleDashboardImport","closeDashboardImportModal","Loading","PAGE","ELLIPSIS","FIRST_PAGE_LINK","PREVIOUS_PAGE_LINK","NEXT_PAGE_LINK","LAST_PAGE_LINK","ITEM_KEYS","FIRST_ELLIPSIS","SECOND_ELLIPSIS","ultimate_pagination_constants_1","createFirstEllipsis","pageNumber","isActive","createSecondEllipsis","createFirstPageLink","options","createPreviousPageLink","Math","max","createNextPageLink","min","createLastPageLink","createPageFunctionFactory","createRange","start","end","range","ultimate_pagination_utils_1","ultimate_pagination_item_factories_1","Error","Number","isNaN","Boolean","ellipsisSize","createPage","allPages","apply","firstPagesEnd","firstPages","lastPagesStart","lastPagesEnd","lastPages","mainPagesStart","mainPagesEnd","mainPages","firstEllipsisPageNumber","firstEllipsis","secondEllipsisPageNumber","secondEllipsis"],"sourceRoot":""}
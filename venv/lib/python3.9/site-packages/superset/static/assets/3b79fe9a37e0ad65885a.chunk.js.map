{"version":3,"file":"3b79fe9a37e0ad65885a.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/@mapbox/extent/index.js","webpack://superset/./node_modules/@mapbox/geojson-coords/flatten.js","webpack://superset/./node_modules/@mapbox/geojson-coords/index.js","webpack://superset/./node_modules/@mapbox/geojson-extent/index.js","webpack://superset/./node_modules/@mapbox/geojson-normalize/index.js","webpack://superset/../../../src/icon-layer/icon-manager.ts","webpack://superset/../../../src/icon-layer/icon-layer.ts","webpack://superset/../../../src/icon-layer/icon-layer-vertex.glsl.ts","webpack://superset/../../../src/icon-layer/icon-layer-fragment.glsl.ts","webpack://superset/../../../../src/text-layer/multi-icon-layer/multi-icon-layer-fragment.glsl.ts","webpack://superset/../../../../src/text-layer/multi-icon-layer/multi-icon-layer.ts","webpack://superset/./node_modules/@mapbox/tiny-sdf/index.js","webpack://superset/../../../src/text-layer/utils.ts","webpack://superset/../../../src/text-layer/lru-cache.ts","webpack://superset/../../../src/text-layer/font-atlas-manager.ts","webpack://superset/../../../../src/text-layer/text-background-layer/text-background-layer-vertex.glsl.ts","webpack://superset/../../../../src/text-layer/text-background-layer/text-background-layer.ts","webpack://superset/../../../../src/text-layer/text-background-layer/text-background-layer-fragment.glsl.ts","webpack://superset/../../../src/text-layer/text-layer.ts","webpack://superset/../../../src/geojson-layer/sub-layer-map.ts","webpack://superset/../../../src/geojson-layer/geojson.ts","webpack://superset/../../../src/geojson-layer/geojson-layer-props.ts","webpack://superset/../../../src/geojson-layer/geojson-layer.ts","webpack://superset/../../../src/geojson-layer/geojson-binary.ts","webpack://superset/../../../src/path-layer/path-tesselator.ts","webpack://superset/../../../src/path-layer/path.ts","webpack://superset/../../../src/path-layer/path-layer-vertex.glsl.ts","webpack://superset/../../../src/path-layer/path-layer.ts","webpack://superset/../../../src/path-layer/path-layer-fragment.glsl.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","webpack://superset/../../src/utils.ts","webpack://superset/./node_modules/geojson-flatten/dist/index.es.js","webpack://superset/./node_modules/traverse/index.js"],"sourcesContent":["module.exports = Extent;\n\nfunction Extent(bbox) {\n    if (!(this instanceof Extent)) {\n        return new Extent(bbox);\n    }\n    this._bbox = bbox || [Infinity, Infinity, -Infinity, -Infinity];\n    this._valid = !!bbox;\n}\n\nExtent.prototype.include = function(ll) {\n    this._valid = true;\n    this._bbox[0] = Math.min(this._bbox[0], ll[0]);\n    this._bbox[1] = Math.min(this._bbox[1], ll[1]);\n    this._bbox[2] = Math.max(this._bbox[2], ll[0]);\n    this._bbox[3] = Math.max(this._bbox[3], ll[1]);\n    return this;\n};\n\nExtent.prototype.equals = function(_) {\n    var other;\n    if (_ instanceof Extent) { other = _.bbox(); } else { other = _; }\n    return this._bbox[0] == other[0] &&\n        this._bbox[1] == other[1] &&\n        this._bbox[2] == other[2] &&\n        this._bbox[3] == other[3];\n};\n\nExtent.prototype.center = function(_) {\n    if (!this._valid) return null;\n    return [\n        (this._bbox[0] + this._bbox[2]) / 2,\n        (this._bbox[1] + this._bbox[3]) / 2]\n};\n\nExtent.prototype.union = function(_) {\n    this._valid = true;\n    var other;\n    if (_ instanceof Extent) { other = _.bbox(); } else { other = _; }\n    this._bbox[0] = Math.min(this._bbox[0], other[0]);\n    this._bbox[1] = Math.min(this._bbox[1], other[1]);\n    this._bbox[2] = Math.max(this._bbox[2], other[2]);\n    this._bbox[3] = Math.max(this._bbox[3], other[3]);\n    return this;\n};\n\nExtent.prototype.bbox = function() {\n    if (!this._valid) return null;\n    return this._bbox;\n};\n\nExtent.prototype.contains = function(ll) {\n    if (!ll) return this._fastContains();\n    if (!this._valid) return null;\n    var lon = ll[0], lat = ll[1];\n    return this._bbox[0] <= lon &&\n        this._bbox[1] <= lat &&\n        this._bbox[2] >= lon &&\n        this._bbox[3] >= lat;\n};\n\nExtent.prototype.intersect = function(_) {\n    if (!this._valid) return null;\n\n    var other;\n    if (_ instanceof Extent) { other = _.bbox(); } else { other = _; }\n\n    return !(\n      this._bbox[0] > other[2] ||\n      this._bbox[2] < other[0] ||\n      this._bbox[3] < other[1] ||\n      this._bbox[1] > other[3]\n    );\n};\n\nExtent.prototype._fastContains = function() {\n    if (!this._valid) return new Function('return null;');\n    var body = 'return ' +\n        this._bbox[0] + '<= ll[0] &&' +\n        this._bbox[1] + '<= ll[1] &&' +\n        this._bbox[2] + '>= ll[0] &&' +\n        this._bbox[3] + '>= ll[1]';\n    return new Function('ll', body);\n};\n\nExtent.prototype.polygon = function() {\n    if (!this._valid) return null;\n    return {\n        type: 'Polygon',\n        coordinates: [\n            [\n                // W, S\n                [this._bbox[0], this._bbox[1]],\n                // E, S\n                [this._bbox[2], this._bbox[1]],\n                // E, N\n                [this._bbox[2], this._bbox[3]],\n                // W, N\n                [this._bbox[0], this._bbox[3]],\n                // W, S\n                [this._bbox[0], this._bbox[1]]\n            ]\n        ]\n    };\n};\n","module.exports = function flatten(list) {\n    return _flatten(list);\n\n    function _flatten(list) {\n        if (Array.isArray(list) && list.length &&\n            typeof list[0] === 'number') {\n            return [list];\n        }\n        return list.reduce(function (acc, item) {\n            if (Array.isArray(item) && Array.isArray(item[0])) {\n                return acc.concat(_flatten(item));\n            } else {\n                acc.push(item);\n                return acc;\n            }\n        }, []);\n    }\n};\n","var geojsonNormalize = require('@mapbox/geojson-normalize'),\n    geojsonFlatten = require('geojson-flatten'),\n    flatten = require('./flatten');\n\nif (!(geojsonFlatten instanceof Function)) geojsonFlatten = geojsonFlatten.default;\n\nmodule.exports = function(_) {\n    if (!_) return [];\n    var normalized = geojsonFlatten(geojsonNormalize(_)),\n        coordinates = [];\n    normalized.features.forEach(function(feature) {\n        if (!feature.geometry) return;\n        coordinates = coordinates.concat(flatten(feature.geometry.coordinates));\n    });\n    return coordinates;\n};\n","var geojsonCoords = require('@mapbox/geojson-coords'),\n    traverse = require('traverse'),\n    extent = require('@mapbox/extent');\n\nvar geojsonTypesByDataAttributes = {\n    features: ['FeatureCollection'],\n    coordinates: ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon'],\n    geometry: ['Feature'],\n    geometries: ['GeometryCollection']\n}\n\nvar dataAttributes = Object.keys(geojsonTypesByDataAttributes);\n\nmodule.exports = function(_) {\n    return getExtent(_).bbox();\n};\n\nmodule.exports.polygon = function(_) {\n    return getExtent(_).polygon();\n};\n\nmodule.exports.bboxify = function(_) {\n    return traverse(_).map(function(value) {\n        if (!value) return ;\n\n        var isValid = dataAttributes.some(function(attribute){\n            if(value[attribute]) {\n                return geojsonTypesByDataAttributes[attribute].indexOf(value.type) !== -1;\n            }\n            return false;\n        });\n\n        if(isValid){\n            value.bbox = getExtent(value).bbox();\n            this.update(value);\n        }\n\n    });\n};\n\nfunction getExtent(_) {\n    var ext = extent(),\n        coords = geojsonCoords(_);\n    for (var i = 0; i < coords.length; i++) ext.include(coords[i]);\n    return ext;\n}\n","module.exports = normalize;\n\nvar types = {\n    Point: 'geometry',\n    MultiPoint: 'geometry',\n    LineString: 'geometry',\n    MultiLineString: 'geometry',\n    Polygon: 'geometry',\n    MultiPolygon: 'geometry',\n    GeometryCollection: 'geometry',\n    Feature: 'feature',\n    FeatureCollection: 'featurecollection'\n};\n\n/**\n * Normalize a GeoJSON feature into a FeatureCollection.\n *\n * @param {object} gj geojson data\n * @returns {object} normalized geojson data\n */\nfunction normalize(gj) {\n    if (!gj || !gj.type) return null;\n    var type = types[gj.type];\n    if (!type) return null;\n\n    if (type === 'geometry') {\n        return {\n            type: 'FeatureCollection',\n            features: [{\n                type: 'Feature',\n                properties: {},\n                geometry: gj\n            }]\n        };\n    } else if (type === 'feature') {\n        return {\n            type: 'FeatureCollection',\n            features: [gj]\n        };\n    } else if (type === 'featurecollection') {\n        return gj;\n    }\n}\n","/* global document */\nimport GL from '@luma.gl/constants';\nimport {Texture2D, copyToTexture} from '@luma.gl/core';\nimport {load} from '@loaders.gl/core';\nimport {createIterable} from '@deck.gl/core';\n\nimport type {AccessorFunction} from '@deck.gl/core';\n\nconst DEFAULT_CANVAS_WIDTH = 1024;\nconst DEFAULT_BUFFER = 4;\n\nconst noop = () => {};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR_MIPMAP_LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\ntype IconDef = {\n  /** Width of the icon */\n  width: number;\n  /** Height of the icon */\n  height: number;\n  /** Horizontal position of icon anchor. Default: half width. */\n  anchorX?: number;\n  /** Vertical position of icon anchor. Default: half height. */\n  anchorY?: number;\n  /**\n   * Whether the icon is treated as a transparency mask.\n   * If `true`, color defined by `getColor` is applied.\n   * If `false`, pixel color from the icon image is applied.\n   * @default false\n   */\n  mask?: boolean;\n};\n\nexport type UnpackedIcon = {\n  /** Url to fetch the icon */\n  url: string;\n  /** Unique identifier of the icon. Icons of the same id are only fetched once. Fallback to `url` if not specified. */\n  id?: string;\n} & IconDef;\n\ntype PrepackedIcon = {\n  /** Left position of the icon on the atlas */\n  x: number;\n  /** Top position of the icon on the atlas */\n  y: number;\n} & IconDef;\n\nexport type IconMapping = Record<string, PrepackedIcon>;\n\nexport type LoadIconErrorContext = {\n  error: Error;\n  /** The URL that was trying to fetch */\n  url: string;\n  /** The original data object that requested this icon */\n  source: any;\n  /** The index of the original data object that requested this icon */\n  sourceIndex: number;\n  /** The load options used for the fetch */\n  loadOptions: any;\n};\n\nfunction nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n// update comment to create a new texture and copy original data.\nfunction resizeImage(\n  ctx: CanvasRenderingContext2D,\n  imageData: HTMLImageElement | ImageBitmap,\n  maxWidth: number,\n  maxHeight: number\n): {\n  data: HTMLImageElement | HTMLCanvasElement | ImageBitmap;\n  width: number;\n  height: number;\n} {\n  const resizeRatio = Math.min(maxWidth / imageData.width, maxHeight / imageData.height);\n  const width = Math.floor(imageData.width * resizeRatio);\n  const height = Math.floor(imageData.height * resizeRatio);\n\n  if (resizeRatio === 1) {\n    // No resizing required\n    return {data: imageData, width, height};\n  }\n\n  ctx.canvas.height = height;\n  ctx.canvas.width = width;\n\n  ctx.clearRect(0, 0, width, height);\n\n  // image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight\n  ctx.drawImage(imageData, 0, 0, imageData.width, imageData.height, 0, 0, width, height);\n  return {data: ctx.canvas, width, height};\n}\n\nfunction getIconId(icon: UnpackedIcon): string {\n  return icon && (icon.id || icon.url);\n}\n\n// resize texture without losing original data\nfunction resizeTexture(\n  texture: Texture2D,\n  width: number,\n  height: number,\n  parameters: any\n): Texture2D {\n  const oldWidth = texture.width;\n  const oldHeight = texture.height;\n\n  const newTexture = new Texture2D(texture.gl, {width, height, parameters});\n  copyToTexture(texture, newTexture, {\n    targetY: 0,\n    width: oldWidth,\n    height: oldHeight\n  });\n\n  texture.delete();\n  return newTexture;\n}\n\n// traverse icons in a row of icon atlas\n// extend each icon with left-top coordinates\nfunction buildRowMapping(\n  mapping: IconMapping,\n  columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[],\n  yOffset: number\n): void {\n  for (let i = 0; i < columns.length; i++) {\n    const {icon, xOffset} = columns[i];\n    const id = getIconId(icon);\n    mapping[id] = {\n      ...icon,\n      x: xOffset,\n      y: yOffset\n    };\n  }\n}\n\n/**\n * Generate coordinate mapping to retrieve icon left-top position from an icon atlas\n */\nexport function buildMapping({\n  icons,\n  buffer,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0,\n  rowHeight = 0,\n  canvasWidth\n}: {\n  /** list of icon definitions */\n  icons: UnpackedIcon[];\n  /** add bleeding buffer to the right and bottom side of the image */\n  buffer: number;\n  /** right position of last icon in old mapping */\n  xOffset: number;\n  /** top position in last icon in old mapping */\n  yOffset: number;\n  /** height of the last icon's row */\n  rowHeight: number;\n  /** max width of canvas */\n  canvasWidth: number;\n  mapping: IconMapping;\n}): {\n  mapping: IconMapping;\n  rowHeight: number;\n  xOffset: number;\n  yOffset: number;\n  canvasWidth: number;\n  canvasHeight: number;\n} {\n  let columns: {\n    icon: UnpackedIcon;\n    xOffset: number;\n  }[] = [];\n  // Strategy to layout all the icons into a texture:\n  // traverse the icons sequentially, layout the icons from left to right, top to bottom\n  // when the sum of the icons width is equal or larger than canvasWidth,\n  // move to next row starting from total height so far plus max height of the icons in previous row\n  // row width is equal to canvasWidth\n  // row height is decided by the max height of the icons in that row\n  // mapping coordinates of each icon is its left-top position in the texture\n  for (let i = 0; i < icons.length; i++) {\n    const icon = icons[i];\n    const id = getIconId(icon);\n\n    if (!mapping[id]) {\n      const {height, width} = icon;\n\n      // fill one row\n      if (xOffset + width + buffer > canvasWidth) {\n        buildRowMapping(mapping, columns, yOffset);\n\n        xOffset = 0;\n        yOffset = rowHeight + yOffset + buffer;\n        rowHeight = 0;\n        columns = [];\n      }\n\n      columns.push({\n        icon,\n        xOffset\n      });\n\n      xOffset = xOffset + width + buffer;\n      rowHeight = Math.max(rowHeight, height);\n    }\n  }\n\n  if (columns.length > 0) {\n    buildRowMapping(mapping, columns, yOffset);\n  }\n\n  return {\n    mapping,\n    rowHeight,\n    xOffset,\n    yOffset,\n    canvasWidth,\n    canvasHeight: nextPowOfTwo(rowHeight + yOffset + buffer)\n  };\n}\n\n// extract icons from data\n// return icons should be unique, and not cached or cached but url changed\nexport function getDiffIcons(\n  data: any,\n  getIcon: AccessorFunction<any, UnpackedIcon> | null,\n  cachedIcons: Record<string, PrepackedIcon & {url?: string}>\n): Record<\n  string,\n  UnpackedIcon & {\n    source: any;\n    sourceIndex: number;\n  }\n> | null {\n  if (!data || !getIcon) {\n    return null;\n  }\n\n  cachedIcons = cachedIcons || {};\n  const icons = {};\n  const {iterable, objectInfo} = createIterable(data);\n  for (const object of iterable) {\n    objectInfo.index++;\n    const icon = getIcon(object, objectInfo);\n    const id = getIconId(icon);\n\n    if (!icon) {\n      throw new Error('Icon is missing.');\n    }\n\n    if (!icon.url) {\n      throw new Error('Icon url is missing.');\n    }\n\n    if (!icons[id] && (!cachedIcons[id] || icon.url !== cachedIcons[id].url)) {\n      icons[id] = {...icon, source: object, sourceIndex: objectInfo.index};\n    }\n  }\n  return icons;\n}\n\nexport default class IconManager {\n  gl: WebGLRenderingContext;\n\n  private onUpdate: () => void;\n  private onError: (context: LoadIconErrorContext) => void;\n  private _loadOptions: any = null;\n  private _texture: Texture2D | null = null;\n  private _externalTexture: Texture2D | null = null;\n  private _mapping: IconMapping = {};\n  private _textureParameters: Record<number, number> | null = null;\n\n  /** count of pending requests to fetch icons */\n  private _pendingCount: number = 0;\n\n  private _autoPacking: boolean = false;\n\n  // / internal state used for autoPacking\n\n  private _xOffset: number = 0;\n  private _yOffset: number = 0;\n  private _rowHeight: number = 0;\n  private _buffer: number = DEFAULT_BUFFER;\n  private _canvasWidth: number = DEFAULT_CANVAS_WIDTH;\n  private _canvasHeight: number = 0;\n  private _canvas: HTMLCanvasElement | null = null;\n\n  constructor(\n    gl: WebGLRenderingContext,\n    {\n      onUpdate = noop,\n      onError = noop\n    }: {\n      /** Callback when the texture updates */\n      onUpdate: () => void;\n      /** Callback when an error is encountered */\n      onError: (context: LoadIconErrorContext) => void;\n    }\n  ) {\n    this.gl = gl;\n    this.onUpdate = onUpdate;\n    this.onError = onError;\n  }\n\n  finalize(): void {\n    this._texture?.delete();\n  }\n\n  getTexture(): Texture2D | null {\n    return this._texture || this._externalTexture;\n  }\n\n  getIconMapping(icon: string | UnpackedIcon): PrepackedIcon {\n    const id = this._autoPacking ? getIconId(icon as UnpackedIcon) : (icon as string);\n    return this._mapping[id] || {};\n  }\n\n  setProps({\n    loadOptions,\n    autoPacking,\n    iconAtlas,\n    iconMapping,\n    textureParameters\n  }: {\n    loadOptions?: any;\n    autoPacking?: boolean;\n    iconAtlas?: Texture2D | null;\n    iconMapping?: IconMapping | null;\n    textureParameters?: Record<number, number> | null;\n  }) {\n    if (loadOptions) {\n      this._loadOptions = loadOptions;\n    }\n\n    if (autoPacking !== undefined) {\n      this._autoPacking = autoPacking;\n    }\n\n    if (iconMapping) {\n      this._mapping = iconMapping;\n    }\n\n    if (iconAtlas) {\n      this._texture?.delete();\n      this._texture = null;\n      this._externalTexture = iconAtlas;\n    }\n\n    if (textureParameters) {\n      this._textureParameters = textureParameters;\n    }\n  }\n\n  get isLoaded(): boolean {\n    return this._pendingCount === 0;\n  }\n\n  packIcons(data: any, getIcon: AccessorFunction<any, UnpackedIcon>): void {\n    if (!this._autoPacking || typeof document === 'undefined') {\n      return;\n    }\n\n    const icons = Object.values(getDiffIcons(data, getIcon, this._mapping) || {});\n\n    if (icons.length > 0) {\n      // generate icon mapping\n      const {mapping, xOffset, yOffset, rowHeight, canvasHeight} = buildMapping({\n        icons,\n        buffer: this._buffer,\n        canvasWidth: this._canvasWidth,\n        mapping: this._mapping,\n        rowHeight: this._rowHeight,\n        xOffset: this._xOffset,\n        yOffset: this._yOffset\n      });\n\n      this._rowHeight = rowHeight;\n      this._mapping = mapping;\n      this._xOffset = xOffset;\n      this._yOffset = yOffset;\n      this._canvasHeight = canvasHeight;\n\n      // create new texture\n      if (!this._texture) {\n        this._texture = new Texture2D(this.gl, {\n          width: this._canvasWidth,\n          height: this._canvasHeight,\n          parameters: this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        });\n      }\n\n      if (this._texture.height !== this._canvasHeight) {\n        this._texture = resizeTexture(\n          this._texture,\n          this._canvasWidth,\n          this._canvasHeight,\n          this._textureParameters || DEFAULT_TEXTURE_PARAMETERS\n        );\n      }\n\n      this.onUpdate();\n\n      // load images\n      this._canvas = this._canvas || document.createElement('canvas');\n      this._loadIcons(icons);\n    }\n  }\n\n  private _loadIcons(\n    icons: (UnpackedIcon & {\n      source: any;\n      sourceIndex: number;\n    })[]\n  ): void {\n    // This method is only called in the auto packing case, where _canvas is defined\n    const ctx = this._canvas!.getContext('2d', {\n      willReadFrequently: true\n    }) as CanvasRenderingContext2D;\n\n    for (const icon of icons) {\n      this._pendingCount++;\n      load(icon.url, this._loadOptions)\n        .then(imageData => {\n          const id = getIconId(icon);\n\n          const iconDef = this._mapping[id];\n          const {x, y, width: maxWidth, height: maxHeight} = iconDef;\n\n          const {data, width, height} = resizeImage(ctx, imageData, maxWidth, maxHeight);\n\n          this._texture.setSubImageData({\n            data,\n            x: x + (maxWidth - width) / 2,\n            y: y + (maxHeight - height) / 2,\n            width,\n            height\n          });\n          iconDef.width = width;\n          iconDef.height = height;\n\n          // Call to regenerate mipmaps after modifying texture(s)\n          this._texture.generateMipmap();\n\n          this.onUpdate();\n        })\n        .catch(error => {\n          this.onError({\n            url: icon.url,\n            source: icon.source,\n            sourceIndex: icon.sourceIndex,\n            loadOptions: this._loadOptions,\n            error\n          });\n        })\n        .finally(() => {\n          this._pendingCount--;\n        });\n    }\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Layer, project32, picking, log, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './icon-layer-vertex.glsl';\nimport fs from './icon-layer-fragment.glsl';\nimport IconManager from './icon-manager';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  Position,\n  Color,\n  Texture,\n  Unit,\n  UpdateParameters,\n  LayerContext,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {UnpackedIcon, IconMapping, LoadIconErrorContext} from './icon-manager';\n\ntype _IconLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** A prepacked image that contains all icons. */\n  iconAtlas?: string | Texture;\n  /** Icon names mapped to icon definitions, or a URL to load such mapping from a JSON file. */\n  iconMapping?: string | IconMapping;\n\n  /** Icon size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the icon size, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   */\n  sizeMaxPixels?: number;\n  /** If `true`, the icon always faces camera. Otherwise the icon faces up (z)\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Discard pixels whose opacity is below this threshold.\n   * A discarded pixel would create a \"hole\" in the icon that is not considered part of the object.\n   * @default 0.05\n   */\n  alphaCutoff?: number;\n\n  /** Anchor position accessor. */\n  getPosition?: Accessor<DataT, Position>;\n  /** Icon definition accessor.\n   * Should return the icon id if using pre-packed icons (`iconAtlas` + `iconMapping`).\n   * Return an object that defines the icon if using auto-packing.\n   */\n  getIcon?: AccessorFunction<DataT, string> | AccessorFunction<DataT, UnpackedIcon>;\n  /** Icon color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /** Icon size accessor.\n   * @default 1\n   */\n  getSize?: Accessor<DataT, number>;\n  /** Icon rotation accessor, in degrees.\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Icon offsest accessor, in pixels.\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * Callback called if the attempt to fetch an icon returned by `getIcon` fails.\n   */\n  onIconError?: ((context: LoadIconErrorContext) => void) | null;\n\n  /** Customize the [texture parameters](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter). */\n  textureParameters?: Record<number, number> | null;\n};\n\nexport type IconLayerProps<DataT = any> = _IconLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<IconLayerProps> = {\n  iconAtlas: {type: 'image', value: null, async: true},\n  iconMapping: {type: 'object', value: {}, async: true},\n  sizeScale: {type: 'number', value: 1, min: 0},\n  billboard: true,\n  sizeUnits: 'pixels',\n  sizeMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  sizeMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n  alphaCutoff: {type: 'number', value: 0.05, min: 0, max: 1},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getIcon: {type: 'accessor', value: x => x.icon},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  onIconError: {type: 'function', value: null, optional: true},\n\n  textureParameters: {type: 'object', ignore: true}\n};\n\n/** Render raster icons at given coordinates. */\nexport default class IconLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_IconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'IconLayer';\n\n  state!: {\n    model?: Model;\n    iconManager: IconManager;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.state = {\n      iconManager: new IconManager(this.context.gl, {\n        onUpdate: this._onUpdate.bind(this),\n        onError: this._onError.bind(this)\n      })\n    };\n\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceOffset\n      },\n      instanceIconFrames: {\n        size: 4,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceIconFrame\n      },\n      instanceColorModes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getIcon',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        transform: this.getInstanceColorMode\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instancePixelOffset: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  /* eslint-disable max-statements, complexity */\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n    const {iconAtlas, iconMapping, data, getIcon, textureParameters} = props;\n    const {iconManager} = this.state;\n\n    // internalState is always defined during updateState\n    const prePacked = iconAtlas || this.internalState!.isAsyncPropLoading('iconAtlas');\n    iconManager.setProps({\n      loadOptions: props.loadOptions,\n      autoPacking: !prePacked,\n      iconAtlas,\n      iconMapping: prePacked ? (iconMapping as IconMapping) : null,\n      textureParameters\n    });\n\n    // prepacked iconAtlas from user\n    if (prePacked) {\n      if (oldProps.iconMapping !== props.iconMapping) {\n        attributeManager!.invalidate('getIcon');\n      }\n    } else if (\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getIcon))\n    ) {\n      // Auto packing - getIcon is expected to return an object\n      iconManager.packIcons(data, getIcon as AccessorFunction<any, UnpackedIcon>);\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n  /* eslint-enable max-statements, complexity */\n\n  get isLoaded(): boolean {\n    return super.isLoaded && this.state.iconManager.isLoaded;\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n    // Release resources held by the icon manager\n    this.state.iconManager.finalize();\n  }\n\n  draw({uniforms}): void {\n    const {sizeScale, sizeMinPixels, sizeMaxPixels, sizeUnits, billboard, alphaCutoff} = this.props;\n    const {iconManager} = this.state;\n\n    const iconsTexture = iconManager.getTexture();\n    if (iconsTexture) {\n      this.state.model\n        .setUniforms(uniforms)\n        .setUniforms({\n          iconsTexture,\n          iconsTextureDim: [iconsTexture.width, iconsTexture.height],\n          sizeUnits: UNIT[sizeUnits],\n          sizeScale,\n          sizeMinPixels,\n          sizeMaxPixels,\n          billboard,\n          alphaCutoff\n        })\n        .draw();\n    }\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // The icon-layer vertex shader uses 2d positions\n    // specifed via: attribute vec2 positions;\n    const positions = [-1, -1, -1, 1, 1, 1, 1, -1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          // The size must be explicitly passed here otherwise luma.gl\n          // will default to assuming that positions are 3D (x,y,z)\n          positions: {\n            size: 2,\n            value: new Float32Array(positions)\n          }\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  private _onUpdate(): void {\n    this.setNeedsRedraw();\n  }\n\n  private _onError(evt: LoadIconErrorContext): void {\n    const onIconError = this.getCurrentLayer()?.props.onIconError;\n    if (onIconError) {\n      onIconError(evt);\n    } else {\n      log.error(evt.error.message)();\n    }\n  }\n\n  protected getInstanceOffset(icon: string): number[] {\n    const {\n      width,\n      height,\n      anchorX = width / 2,\n      anchorY = height / 2\n    } = this.state.iconManager.getIconMapping(icon);\n    return [width / 2 - anchorX, height / 2 - anchorY];\n  }\n\n  protected getInstanceColorMode(icon: string): number {\n    const mapping = this.state.iconManager.getIconMapping(icon);\n    return mapping.mask ? 1 : 0;\n  }\n\n  protected getInstanceIconFrame(icon: string): number[] {\n    const {x, y, width, height} = this.state.iconManager.getIconMapping(icon);\n    return [x, y, width, height];\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\nuniform int sizeUnits;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  // convert size in meters to pixels, then scaled and clamp\n \n  // project meters to pixels and clamp to limits \n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits), \n    sizeMinPixels, sizeMaxPixels\n  );\n\n  // scale icon height to match instanceSize\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n\n  // scale and rotate vertex in \"pixel\" value and convert back to fraction in clipspace\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n\n  // if colorMode == 0, use pixel color from the texture\n  // if colorMode == 1 or rendering picking buffer, use texture as transparency mask\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  // Take the global opacity and the alpha from vColor into account for the alpha component\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float gamma;\nuniform bool sdf;\nuniform float alphaCutoff;\nuniform float sdfBuffer;\nuniform float outlineBuffer;\nuniform vec4 outlineColor;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!picking_uActive) {\n    float alpha = texture2D(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n\n    // if enable sdf (signed distance fields)\n    if (sdf) {\n      float distance = alpha;\n      alpha = smoothstep(sdfBuffer - gamma, sdfBuffer + gamma, distance);\n\n      if (outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);\n        color = mix(outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n\n    // Take the global opacity and the alpha from color into account for the alpha component\n    float a = alpha * color.a;\n    \n    if (a < alphaCutoff) {\n      discard;\n    }\n\n    gl_FragColor = vec4(color.rgb, a * opacity);\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {log} from '@deck.gl/core';\nimport IconLayer from '../../icon-layer/icon-layer';\n\nimport fs from './multi-icon-layer-fragment.glsl';\n\nimport type {IconLayerProps} from '../../icon-layer/icon-layer';\nimport type {Accessor, Color, UpdateParameters, DefaultProps} from '@deck.gl/core';\n\n// TODO expose as layer properties\nconst DEFAULT_BUFFER = 192.0 / 256;\nconst EMPTY_ARRAY = [];\n\ntype _MultiIconLayerProps<DataT> = {\n  getIconOffsets?: Accessor<DataT, number[]>;\n  sdf?: boolean;\n  smoothing?: number;\n  outlineWidth?: number;\n  outlineColor?: Color;\n};\n\nexport type MultiIconLayerProps<DataT = any> = _MultiIconLayerProps<DataT> & IconLayerProps<DataT>;\n\nconst defaultProps: DefaultProps<MultiIconLayerProps> = {\n  getIconOffsets: {type: 'accessor', value: x => x.offsets},\n  alphaCutoff: 0.001,\n  smoothing: 0.1,\n  outlineWidth: 0,\n  outlineColor: {type: 'color', value: [0, 0, 0, 255]}\n};\n\nexport default class MultiIconLayer<DataT, ExtraPropsT extends {} = {}> extends IconLayer<\n  DataT,\n  ExtraPropsT & Required<_MultiIconLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'MultiIconLayer';\n\n  state!: IconLayer['state'] & {\n    outlineColor: Color;\n  };\n\n  getShaders() {\n    return {...super.getShaders(), fs};\n  }\n\n  initializeState() {\n    super.initializeState();\n\n    const attributeManager = this.getAttributeManager();\n    attributeManager!.addInstanced({\n      instanceOffsets: {\n        size: 2,\n        accessor: 'getIconOffsets'\n      },\n      instancePickingColors: {\n        type: GL.UNSIGNED_BYTE,\n        size: 3,\n        accessor: (object, {index, target: value}) => this.encodePickingColor(index, value)\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, oldProps} = params;\n    let {outlineColor} = props;\n\n    if (outlineColor !== oldProps.outlineColor) {\n      outlineColor = outlineColor.map(x => x / 255) as Color;\n      outlineColor[3] = Number.isFinite(outlineColor[3]) ? outlineColor[3] : 1;\n\n      this.setState({\n        outlineColor\n      });\n    }\n    if (!props.sdf && props.outlineWidth) {\n      log.warn(`${this.id}: fontSettings.sdf is required to render outline`)();\n    }\n  }\n\n  draw(params) {\n    const {sdf, smoothing, outlineWidth} = this.props;\n    const {outlineColor} = this.state;\n    const outlineBuffer = outlineWidth\n      ? Math.max(smoothing, DEFAULT_BUFFER * (1 - outlineWidth))\n      : -1;\n\n    params.uniforms = {\n      ...params.uniforms,\n      // Refer the following doc about gamma and buffer\n      // https://blog.mapbox.com/drawing-text-with-signed-distance-fields-in-mapbox-gl-b0933af6f817\n      sdfBuffer: DEFAULT_BUFFER,\n      outlineBuffer,\n      gamma: smoothing,\n      sdf: Boolean(sdf),\n      outlineColor\n    };\n\n    super.draw(params);\n\n    // draw text without outline on top to ensure a thick outline won't occlude other characters\n    if (sdf && outlineWidth) {\n      const {iconManager} = this.state;\n      const iconsTexture = iconManager.getTexture();\n\n      if (iconsTexture) {\n        this.state.model.draw({uniforms: {outlineBuffer: DEFAULT_BUFFER}});\n      }\n    }\n  }\n\n  protected getInstanceOffset(icons: string): number[] {\n    return icons ? Array.from(icons).flatMap(icon => super.getInstanceOffset(icon)) : EMPTY_ARRAY;\n  }\n\n  getInstanceColorMode(icons: string): number {\n    return 1; // mask\n  }\n\n  getInstanceIconFrame(icons: string): number[] {\n    return icons\n      ? Array.from(icons).flatMap(icon => super.getInstanceIconFrame(icon))\n      : EMPTY_ARRAY;\n  }\n}\n","const INF = 1e20;\n\nexport default class TinySDF {\n    constructor({\n        fontSize = 24,\n        buffer = 3,\n        radius = 8,\n        cutoff = 0.25,\n        fontFamily = 'sans-serif',\n        fontWeight = 'normal',\n        fontStyle = 'normal'\n    } = {}) {\n        this.buffer = buffer;\n        this.cutoff = cutoff;\n        this.radius = radius;\n\n        // make the canvas size big enough to both have the specified buffer around the glyph\n        // for \"halo\", and account for some glyphs possibly being larger than their font size\n        const size = this.size = fontSize + buffer * 4;\n\n        const canvas = this._createCanvas(size);\n        const ctx = this.ctx = canvas.getContext('2d', {willReadFrequently: true});\n        ctx.font = `${fontStyle} ${fontWeight} ${fontSize}px ${fontFamily}`;\n\n        ctx.textBaseline = 'alphabetic';\n        ctx.textAlign = 'left'; // Necessary so that RTL text doesn't have different alignment\n        ctx.fillStyle = 'black';\n\n        // temporary arrays for the distance transform\n        this.gridOuter = new Float64Array(size * size);\n        this.gridInner = new Float64Array(size * size);\n        this.f = new Float64Array(size);\n        this.z = new Float64Array(size + 1);\n        this.v = new Uint16Array(size);\n    }\n\n    _createCanvas(size) {\n        const canvas = document.createElement('canvas');\n        canvas.width = canvas.height = size;\n        return canvas;\n    }\n\n    draw(char) {\n        const {\n            width: glyphAdvance,\n            actualBoundingBoxAscent,\n            actualBoundingBoxDescent,\n            actualBoundingBoxLeft,\n            actualBoundingBoxRight\n        } = this.ctx.measureText(char);\n\n        // The integer/pixel part of the top alignment is encoded in metrics.glyphTop\n        // The remainder is implicitly encoded in the rasterization\n        const glyphTop = Math.ceil(actualBoundingBoxAscent);\n        const glyphLeft = 0;\n\n        // If the glyph overflows the canvas size, it will be clipped at the bottom/right\n        const glyphWidth = Math.max(0, Math.min(this.size - this.buffer, Math.ceil(actualBoundingBoxRight - actualBoundingBoxLeft)));\n        const glyphHeight = Math.min(this.size - this.buffer, glyphTop + Math.ceil(actualBoundingBoxDescent));\n\n        const width = glyphWidth + 2 * this.buffer;\n        const height = glyphHeight + 2 * this.buffer;\n\n        const len = Math.max(width * height, 0);\n        const data = new Uint8ClampedArray(len);\n        const glyph = {data, width, height, glyphWidth, glyphHeight, glyphTop, glyphLeft, glyphAdvance};\n        if (glyphWidth === 0 || glyphHeight === 0) return glyph;\n\n        const {ctx, buffer, gridInner, gridOuter} = this;\n        ctx.clearRect(buffer, buffer, glyphWidth, glyphHeight);\n        ctx.fillText(char, buffer, buffer + glyphTop);\n        const imgData = ctx.getImageData(buffer, buffer, glyphWidth, glyphHeight);\n\n        // Initialize grids outside the glyph range to alpha 0\n        gridOuter.fill(INF, 0, len);\n        gridInner.fill(0, 0, len);\n\n        for (let y = 0; y < glyphHeight; y++) {\n            for (let x = 0; x < glyphWidth; x++) {\n                const a = imgData.data[4 * (y * glyphWidth + x) + 3] / 255; // alpha value\n                if (a === 0) continue; // empty pixels\n\n                const j = (y + buffer) * width + x + buffer;\n\n                if (a === 1) { // fully drawn pixels\n                    gridOuter[j] = 0;\n                    gridInner[j] = INF;\n\n                } else { // aliased pixels\n                    const d = 0.5 - a;\n                    gridOuter[j] = d > 0 ? d * d : 0;\n                    gridInner[j] = d < 0 ? d * d : 0;\n                }\n            }\n        }\n\n        edt(gridOuter, 0, 0, width, height, width, this.f, this.v, this.z);\n        edt(gridInner, buffer, buffer, glyphWidth, glyphHeight, width, this.f, this.v, this.z);\n\n        for (let i = 0; i < len; i++) {\n            const d = Math.sqrt(gridOuter[i]) - Math.sqrt(gridInner[i]);\n            data[i] = Math.round(255 - 255 * (d / this.radius + this.cutoff));\n        }\n\n        return glyph;\n    }\n}\n\n// 2D Euclidean squared distance transform by Felzenszwalb & Huttenlocher https://cs.brown.edu/~pff/papers/dt-final.pdf\nfunction edt(data, x0, y0, width, height, gridSize, f, v, z) {\n    for (let x = x0; x < x0 + width; x++) edt1d(data, y0 * gridSize + x, gridSize, height, f, v, z);\n    for (let y = y0; y < y0 + height; y++) edt1d(data, y * gridSize + x0, 1, width, f, v, z);\n}\n\n// 1D squared distance transform\nfunction edt1d(grid, offset, stride, length, f, v, z) {\n    v[0] = 0;\n    z[0] = -INF;\n    z[1] = INF;\n    f[0] = grid[offset];\n\n    for (let q = 1, k = 0, s = 0; q < length; q++) {\n        f[q] = grid[offset + q * stride];\n        const q2 = q * q;\n        do {\n            const r = v[k];\n            s = (f[q] - f[r] + q2 - r * r) / (q - r) / 2;\n        } while (s <= z[k] && --k > -1);\n\n        k++;\n        v[k] = q;\n        z[k] = s;\n        z[k + 1] = INF;\n    }\n\n    for (let q = 0, k = 0; q < length; q++) {\n        while (z[k + 1] < q) k++;\n        const r = v[k];\n        const qr = q - r;\n        grid[offset + q * stride] = f[r] + qr * qr;\n    }\n}\n","/* eslint-disable max-statements, max-params, complexity, max-depth */\n// TODO merge with icon-layer/icon-manager\nimport {log} from '@deck.gl/core';\nimport type {NumericArray} from '@math.gl/core';\n\nconst MISSING_CHAR_WIDTH = 32;\nconst SINGLE_LINE = [];\n\nexport type Character = {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  layoutWidth: number;\n  layoutHeight: number;\n  layoutOffsetY?: number;\n};\n\nexport type CharacterMapping = Record<string, Character>;\n\nexport function nextPowOfTwo(number: number): number {\n  return Math.pow(2, Math.ceil(Math.log2(number)));\n}\n\n/**\n * Generate character mapping table or update from an existing mapping table\n */\nexport function buildMapping({\n  characterSet,\n  getFontWidth,\n  fontHeight,\n  buffer,\n  maxCanvasWidth,\n  mapping = {},\n  xOffset = 0,\n  yOffset = 0\n}: {\n  /** list of characters */\n  characterSet: Set<string>;\n  /** function to get width of each character */\n  getFontWidth: (char: string) => number;\n  /** height of font */\n  fontHeight: number;\n  /** bleeding buffer surround each character */\n  buffer: number;\n  /** max width of font atlas */\n  maxCanvasWidth: number;\n  /** cached mapping table */\n  mapping?: CharacterMapping;\n  /** x position of last character in the existing mapping table */\n  xOffset?: number;\n  /** y position of last character in the existing mapping table */\n  yOffset?: number;\n}): {\n  /** new mapping table */\n  mapping: CharacterMapping;\n  /** x position of last character in the new mapping table */\n  xOffset: number;\n  /** y position of last character in the new mapping table */\n  yOffset: number;\n  /** height of the font atlas canvas, power of 2 */\n  canvasHeight: number;\n} {\n  let row = 0;\n  // continue from x position of last character in the old mapping\n  let x = xOffset;\n  const rowHeight = fontHeight + buffer * 2;\n\n  for (const char of characterSet) {\n    if (!mapping[char]) {\n      // measure texts\n      // TODO - use Advanced text metrics when they are adopted:\n      // https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics\n      const width = getFontWidth(char);\n\n      if (x + width + buffer * 2 > maxCanvasWidth) {\n        x = 0;\n        row++;\n      }\n      mapping[char] = {\n        x: x + buffer,\n        y: yOffset + row * rowHeight + buffer,\n        width,\n        height: rowHeight,\n        layoutWidth: width,\n        layoutHeight: fontHeight\n      };\n      x += width + buffer * 2;\n    }\n  }\n\n  return {\n    mapping,\n    xOffset: x,\n    yOffset: yOffset + row * rowHeight,\n    canvasHeight: nextPowOfTwo(yOffset + (row + 1) * rowHeight)\n  };\n}\n\nfunction getTextWidth(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  mapping: CharacterMapping\n): number {\n  let width = 0;\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = text[i];\n    width += mapping[character]?.layoutWidth || 0;\n  }\n\n  return width;\n}\n\nfunction breakAll(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 2. figure out where to break lines\n    const textWidth = getTextWidth(text, i, i + 1, iconMapping);\n    if (rowOffsetLeft + textWidth > maxWidth) {\n      if (rowStartCharIndex < i) {\n        target.push(i);\n      }\n      rowStartCharIndex = i;\n      rowOffsetLeft = 0;\n    }\n    rowOffsetLeft += textWidth;\n  }\n\n  return rowOffsetLeft;\n}\n\nfunction breakWord(\n  text: string[],\n  startIndex: number,\n  endIndex: number,\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  target: number[]\n): number {\n  let rowStartCharIndex = startIndex;\n  let groupStartCharIndex = startIndex;\n  let groupEndCharIndex = startIndex;\n  let rowOffsetLeft = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    // 1. break text into word groups\n    //  - if current char is white space\n    //  - else if next char is white space\n    //  - else if reach last char\n    if (text[i] === ' ') {\n      groupEndCharIndex = i + 1;\n    } else if (text[i + 1] === ' ' || i + 1 === endIndex) {\n      groupEndCharIndex = i + 1;\n    }\n\n    if (groupEndCharIndex > groupStartCharIndex) {\n      // 2. break text into next row at maxWidth\n      let groupWidth = getTextWidth(text, groupStartCharIndex, groupEndCharIndex, iconMapping);\n      if (rowOffsetLeft + groupWidth > maxWidth) {\n        if (rowStartCharIndex < groupStartCharIndex) {\n          target.push(groupStartCharIndex);\n          rowStartCharIndex = groupStartCharIndex;\n          rowOffsetLeft = 0;\n        }\n\n        // if a single text group is bigger than maxWidth, then `break-all`\n        if (groupWidth > maxWidth) {\n          groupWidth = breakAll(\n            text,\n            groupStartCharIndex,\n            groupEndCharIndex,\n            maxWidth,\n            iconMapping,\n            target\n          );\n          // move reference to last row\n          rowStartCharIndex = target[target.length - 1];\n        }\n      }\n      groupStartCharIndex = groupEndCharIndex;\n      rowOffsetLeft += groupWidth;\n    }\n  }\n\n  return rowOffsetLeft;\n}\n\n/**\n * Wrap the given text so that each line does not exceed the given max width.\n * Returns a list of indices where line breaks should be inserted.\n */\nexport function autoWrapping(\n  text: string[],\n  wordBreak: 'break-all' | 'break-word',\n  maxWidth: number,\n  iconMapping: CharacterMapping,\n  startIndex: number = 0,\n  endIndex: number\n): number[] {\n  if (endIndex === undefined) {\n    endIndex = text.length;\n  }\n  const result = [];\n  if (wordBreak === 'break-all') {\n    breakAll(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  } else {\n    breakWord(text, startIndex, endIndex, maxWidth, iconMapping, result);\n  }\n  return result;\n}\n\nfunction transformRow(\n  line: string[],\n  startIndex: number,\n  endIndex: number,\n  iconMapping: CharacterMapping,\n  leftOffsets: number[],\n  rowSize: [number, number]\n) {\n  let x = 0;\n  let rowHeight = 0;\n\n  for (let i = startIndex; i < endIndex; i++) {\n    const character = line[i];\n    const frame = iconMapping[character];\n    if (frame) {\n      if (!rowHeight) {\n        // frame.height should be a constant\n        rowHeight = frame.layoutHeight;\n      }\n      leftOffsets[i] = x + frame.layoutWidth / 2;\n      x += frame.layoutWidth;\n    } else {\n      log.warn(`Missing character: ${character} (${character.codePointAt(0)})`)();\n      leftOffsets[i] = x;\n      x += MISSING_CHAR_WIDTH;\n    }\n  }\n\n  rowSize[0] = x;\n  rowSize[1] = rowHeight;\n}\n\n/**\n * Transform a text paragraph to an array of characters, each character contains\n */\nexport function transformParagraph(\n  paragraph: string,\n  /** CSS line-height */\n  lineHeight: number,\n  /** CSS word-break option */\n  wordBreak: 'break-word' | 'break-all',\n  /** CSS max-width */\n  maxWidth: number,\n  /** character mapping table for retrieving a character from font atlas */\n  iconMapping: CharacterMapping\n): {\n  /** x position of each character */\n  x: number[];\n  /** y position of each character */\n  y: number[];\n  /** the current row width of each character */\n  rowWidth: number[];\n  /** the width and height of the paragraph */\n  size: [number, number];\n} {\n  // Break into an array of characters\n  // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n  const characters = Array.from(paragraph);\n  const numCharacters = characters.length;\n  const x = new Array(numCharacters) as number[];\n  const y = new Array(numCharacters) as number[];\n  const rowWidth = new Array(numCharacters) as number[];\n  const autoWrappingEnabled =\n    (wordBreak === 'break-word' || wordBreak === 'break-all') && isFinite(maxWidth) && maxWidth > 0;\n\n  // maxWidth and height of the paragraph\n  const size: [number, number] = [0, 0];\n  const rowSize: [number, number] = [0, 0];\n  let rowOffsetTop = 0;\n  let lineStartIndex = 0;\n  let lineEndIndex = 0;\n\n  for (let i = 0; i <= numCharacters; i++) {\n    const char = characters[i];\n    if (char === '\\n' || i === numCharacters) {\n      lineEndIndex = i;\n    }\n\n    if (lineEndIndex > lineStartIndex) {\n      const rows = autoWrappingEnabled\n        ? autoWrapping(characters, wordBreak, maxWidth, iconMapping, lineStartIndex, lineEndIndex)\n        : SINGLE_LINE;\n\n      for (let rowIndex = 0; rowIndex <= rows.length; rowIndex++) {\n        const rowStart = rowIndex === 0 ? lineStartIndex : rows[rowIndex - 1];\n        const rowEnd = rowIndex < rows.length ? rows[rowIndex] : lineEndIndex;\n\n        transformRow(characters, rowStart, rowEnd, iconMapping, x, rowSize);\n        for (let j = rowStart; j < rowEnd; j++) {\n          const char = characters[j];\n          const layoutOffsetY = iconMapping[char]?.layoutOffsetY || 0;\n          y[j] = rowOffsetTop + rowSize[1] / 2 + layoutOffsetY;\n          rowWidth[j] = rowSize[0];\n        }\n\n        rowOffsetTop = rowOffsetTop + rowSize[1] * lineHeight;\n        size[0] = Math.max(size[0], rowSize[0]);\n      }\n      lineStartIndex = lineEndIndex;\n    }\n\n    if (char === '\\n') {\n      // Make sure result.length matches paragraph.length\n      x[lineStartIndex] = 0;\n      y[lineStartIndex] = 0;\n      rowWidth[lineStartIndex] = 0;\n      lineStartIndex++;\n    }\n  }\n\n  // last row\n  size[1] = rowOffsetTop;\n  return {x, y, rowWidth, size};\n}\n\nexport function getTextFromBuffer({\n  value,\n  length,\n  stride,\n  offset,\n  startIndices,\n  characterSet\n}: {\n  value: Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array;\n  length: number;\n  stride?: number;\n  offset?: number;\n  startIndices: NumericArray;\n  characterSet?: Set<string>;\n}): {\n  texts: string[];\n  characterCount: number;\n} {\n  const bytesPerElement = value.BYTES_PER_ELEMENT;\n  const elementStride = stride ? stride / bytesPerElement : 1;\n  const elementOffset = offset ? offset / bytesPerElement : 0;\n  const characterCount =\n    startIndices[length] || Math.ceil((value.length - elementOffset) / elementStride);\n  const autoCharacterSet = characterSet && new Set<number>();\n\n  const texts = new Array(length);\n\n  let codes = value;\n  if (elementStride > 1 || elementOffset > 0) {\n    const ArrayType = value.constructor as\n      | Uint8ArrayConstructor\n      | Uint8ClampedArrayConstructor\n      | Uint16ArrayConstructor\n      | Uint32ArrayConstructor;\n    codes = new ArrayType(characterCount);\n    for (let i = 0; i < characterCount; i++) {\n      codes[i] = value[i * elementStride + elementOffset];\n    }\n  }\n\n  for (let index = 0; index < length; index++) {\n    const startIndex = startIndices[index];\n    const endIndex = startIndices[index + 1] || characterCount;\n    const codesAtIndex = codes.subarray(startIndex, endIndex);\n    // @ts-ignore TS wants the argument to be number[] but typed array works too\n    texts[index] = String.fromCodePoint.apply(null, codesAtIndex);\n    if (autoCharacterSet) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      codesAtIndex.forEach(autoCharacterSet.add, autoCharacterSet);\n    }\n  }\n\n  if (autoCharacterSet) {\n    for (const charCode of autoCharacterSet) {\n      characterSet.add(String.fromCodePoint(charCode));\n    }\n  }\n\n  return {texts, characterCount};\n}\n","/**\n * LRU Cache class with limit\n *\n * Update order for each get/set operation\n * Delete oldest when reach given limit\n */\n\nexport default class LRUCache<ValueT> {\n  private limit: number;\n  private _cache: Record<string, ValueT> = {};\n  /** access/update order, first item is oldest, last item is newest */\n  private _order: string[] = [];\n\n  constructor(limit: number = 5) {\n    this.limit = limit;\n  }\n\n  get(key: string): ValueT {\n    const value = this._cache[key];\n    if (value) {\n      // update order\n      this._deleteOrder(key);\n      this._appendOrder(key);\n    }\n    return value;\n  }\n\n  set(key: string, value: ValueT): void {\n    if (!this._cache[key]) {\n      // if reach limit, delete the oldest\n      if (Object.keys(this._cache).length === this.limit) {\n        this.delete(this._order[0]);\n      }\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    } else {\n      // if found in cache, delete the old one, insert new one to the first of list\n      this.delete(key);\n\n      this._cache[key] = value;\n      this._appendOrder(key);\n    }\n  }\n\n  delete(key: string): void {\n    const value = this._cache[key];\n    if (value) {\n      delete this._cache[key];\n      this._deleteOrder(key);\n    }\n  }\n\n  private _deleteOrder(key: string): void {\n    const index = this._order.indexOf(key);\n    if (index >= 0) {\n      this._order.splice(index, 1);\n    }\n  }\n\n  private _appendOrder(key: string): void {\n    this._order.push(key);\n  }\n}\n","/* global document */\nimport TinySDF from '@mapbox/tiny-sdf';\n\nimport {log} from '@deck.gl/core';\n\nimport {buildMapping, CharacterMapping} from './utils';\nimport LRUCache from './lru-cache';\n\nimport type {Texture} from '@deck.gl/core';\n\nfunction getDefaultCharacterSet() {\n  const charSet: string[] = [];\n  for (let i = 32; i < 128; i++) {\n    charSet.push(String.fromCharCode(i));\n  }\n  return charSet;\n}\n\nexport type FontSettings = {\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: string;\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: string | number;\n  /** Specifies a list of characters to include in the font.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: Set<string> | string[] | string;\n  /** Font size in pixels. This option is only applied for generating `fontAtlas`, it does not impact the size of displayed text labels. Larger `fontSize` will give you a sharper look when rendering text labels with very large font sizes. But larger `fontSize` requires more time and space to generate the `fontAtlas`.\n   * @default 64\n   */\n  fontSize?: number;\n  /** Whitespace buffer around each side of the character. In general, bigger `fontSize` requires bigger `buffer`. Increase `buffer` will add more space between each character when layout `characterSet` in `fontAtlas`. This option could be tuned to provide sufficient space for drawing each character and avoiding overlapping of neighboring characters.\n   * @default 4\n   */\n  buffer?: number;\n  /** Flag to enable / disable `sdf`. [`sdf` (Signed Distance Fields)](http://cs.brown.edu/people/pfelzens/papers/dt-final.pdf) will provide a sharper look when rendering with very large or small font sizes. `TextLayer` integrates with [`TinySDF`](https://github.com/mapbox/tiny-sdf) which implements the `sdf` algorithm.\n   * @default false\n   */\n  sdf?: boolean;\n  /** How much of the radius (relative) is used for the inside part the glyph. Bigger `cutoff` makes character thinner. Smaller `cutoff` makes character look thicker. Only applies when `sdf: true`.\n   * @default 0.25\n   */\n  cutoff?: number;\n  /** How many pixels around the glyph shape to use for encoding distance. Bigger radius yields higher quality outcome. Only applies when `sdf: true`.\n   * @default 12\n   */\n  radius?: number;\n  /** How much smoothing to apply to the text edges. Only applies when `sdf: true`.\n   * @default 0.1\n   */\n  smoothing?: number;\n};\n\nexport const DEFAULT_FONT_SETTINGS: Required<FontSettings> = {\n  fontFamily: 'Monaco, monospace',\n  fontWeight: 'normal',\n  characterSet: getDefaultCharacterSet(),\n  fontSize: 64,\n  buffer: 4,\n  sdf: false,\n  cutoff: 0.25,\n  radius: 12,\n  smoothing: 0.1\n};\n\nconst MAX_CANVAS_WIDTH = 1024;\n\nconst BASELINE_SCALE = 0.9;\nconst HEIGHT_SCALE = 1.2;\n\n// only preserve latest three fontAtlas\nconst CACHE_LIMIT = 3;\n\ntype FontAtlas = {\n  /** x position of last character in mapping */\n  xOffset: number;\n  /** y position of last character in mapping */\n  yOffset: number;\n  /** bounding box of each character in the texture */\n  mapping: CharacterMapping;\n  /** packed texture */\n  data: HTMLCanvasElement;\n  /** texture width */\n  width: number;\n  /** texture height */\n  height: number;\n};\n\nlet cache = new LRUCache<FontAtlas>(CACHE_LIMIT);\n\n/**\n * get all the chars not in cache\n * @returns chars not in cache\n */\nfunction getNewChars(cacheKey: string, characterSet: Set<string> | string[] | string): Set<string> {\n  let newCharSet: Set<string>;\n  if (typeof characterSet === 'string') {\n    newCharSet = new Set(Array.from(characterSet));\n  } else {\n    newCharSet = new Set(characterSet);\n  }\n\n  const cachedFontAtlas = cache.get(cacheKey);\n  if (!cachedFontAtlas) {\n    return newCharSet;\n  }\n\n  for (const char in cachedFontAtlas.mapping) {\n    if (newCharSet.has(char)) {\n      newCharSet.delete(char);\n    }\n  }\n  return newCharSet;\n}\n\nfunction populateAlphaChannel(alphaChannel: Uint8ClampedArray, imageData: ImageData): void {\n  // populate distance value from tinySDF to image alpha channel\n  for (let i = 0; i < alphaChannel.length; i++) {\n    imageData.data[4 * i + 3] = alphaChannel[i];\n  }\n}\n\nfunction setTextStyle(\n  ctx: CanvasRenderingContext2D,\n  fontFamily: string,\n  fontSize: number,\n  fontWeight: string | number\n): void {\n  ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;\n  ctx.fillStyle = '#000';\n  ctx.textBaseline = 'alphabetic';\n  ctx.textAlign = 'left';\n}\n\n/**\n * Sets the Font Atlas LRU Cache Limit\n * @param {number} limit LRU Cache limit\n */\nexport function setFontAtlasCacheLimit(limit: number): void {\n  log.assert(Number.isFinite(limit) && limit >= CACHE_LIMIT, 'Invalid cache limit');\n\n  cache = new LRUCache(limit);\n}\n\nexport default class FontAtlasManager {\n  /** Font settings */\n  props: Required<FontSettings> = {...DEFAULT_FONT_SETTINGS};\n\n  /** Cache key of the current font atlas */\n  private _key?: string;\n  /** The current font atlas */\n  private _atlas?: FontAtlas;\n\n  get texture(): Texture | undefined {\n    return this._atlas;\n  }\n\n  get mapping(): CharacterMapping | undefined {\n    return this._atlas && this._atlas.mapping;\n  }\n\n  get scale(): number {\n    const {fontSize, buffer} = this.props;\n    return (fontSize * HEIGHT_SCALE + buffer * 2) / fontSize;\n  }\n\n  setProps(props: FontSettings = {}) {\n    Object.assign(this.props, props);\n\n    // update cache key\n    this._key = this._getKey();\n\n    const charSet = getNewChars(this._key, this.props.characterSet);\n    const cachedFontAtlas = cache.get(this._key);\n\n    // if a fontAtlas associated with the new settings is cached and\n    // there are no new chars\n    if (cachedFontAtlas && charSet.size === 0) {\n      // update texture with cached fontAtlas\n      if (this._atlas !== cachedFontAtlas) {\n        this._atlas = cachedFontAtlas;\n      }\n      return;\n    }\n\n    // update fontAtlas with new settings\n    const fontAtlas = this._generateFontAtlas(charSet, cachedFontAtlas);\n    this._atlas = fontAtlas;\n\n    // update cache\n    cache.set(this._key, fontAtlas);\n  }\n\n  // eslint-disable-next-line max-statements\n  private _generateFontAtlas(characterSet: Set<string>, cachedFontAtlas?: FontAtlas): FontAtlas {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    let canvas = cachedFontAtlas && cachedFontAtlas.data;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.width = MAX_CANVAS_WIDTH;\n    }\n    const ctx = canvas.getContext('2d', {willReadFrequently: true})!;\n\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 1. build mapping\n    const {mapping, canvasHeight, xOffset, yOffset} = buildMapping({\n      getFontWidth: char => ctx.measureText(char).width,\n      fontHeight: fontSize * HEIGHT_SCALE,\n      buffer,\n      characterSet,\n      maxCanvasWidth: MAX_CANVAS_WIDTH,\n      ...(cachedFontAtlas && {\n        mapping: cachedFontAtlas.mapping,\n        xOffset: cachedFontAtlas.xOffset,\n        yOffset: cachedFontAtlas.yOffset\n      })\n    });\n\n    // 2. update canvas\n    // copy old canvas data to new canvas only when height changed\n    if (canvas.height !== canvasHeight) {\n      const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      canvas.height = canvasHeight;\n      ctx.putImageData(imageData, 0, 0);\n    }\n    setTextStyle(ctx, fontFamily, fontSize, fontWeight);\n\n    // 3. layout characters\n    if (sdf) {\n      const tinySDF = new TinySDF({\n        fontSize,\n        buffer,\n        radius,\n        cutoff,\n        fontFamily,\n        fontWeight: `${fontWeight}`\n      });\n\n      for (const char of characterSet) {\n        const {data, width, height, glyphTop} = tinySDF.draw(char);\n        mapping[char].width = width;\n        mapping[char].layoutOffsetY = fontSize * BASELINE_SCALE - glyphTop;\n\n        const imageData = ctx.createImageData(width, height);\n        populateAlphaChannel(data, imageData);\n        ctx.putImageData(imageData, mapping[char].x, mapping[char].y);\n      }\n    } else {\n      for (const char of characterSet) {\n        ctx.fillText(char, mapping[char].x, mapping[char].y + buffer + fontSize * BASELINE_SCALE);\n      }\n    }\n\n    return {\n      xOffset,\n      yOffset,\n      mapping,\n      data: canvas,\n      width: canvas.width,\n      height: canvas.height\n    };\n  }\n\n  private _getKey(): string {\n    const {fontFamily, fontWeight, fontSize, buffer, sdf, radius, cutoff} = this.props;\n    if (sdf) {\n      return `${fontFamily} ${fontWeight} ${fontSize} ${buffer} ${radius} ${cutoff}`;\n    }\n    return `${fontFamily} ${fontWeight} ${fontSize} ${buffer}`;\n  }\n}\n","export default `\\\n#define SHADER_NAME text-background-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec4 instanceRects;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec2 instancePixelOffsets;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform bool billboard;\nuniform float opacity;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec4 padding;\nuniform int sizeUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n\n  // convert size in meters to pixels, then scaled and clamp\n\n  // project meters to pixels and clamp to limits\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n","import {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\n\ntype _TextBackgroundLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  billboard?: boolean;\n  sizeScale?: number;\n  sizeUnits?: Unit;\n  sizeMinPixels?: number;\n  sizeMaxPixels?: number;\n\n  padding?: [number, number] | [number, number, number, number];\n\n  getPosition?: Accessor<DataT, Position>;\n  getSize?: Accessor<DataT, number>;\n  getAngle?: Accessor<DataT, number>;\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  getBoundingRect?: Accessor<DataT, [number, number, number, number]>;\n  getFillColor?: Accessor<DataT, Color>;\n  getLineColor?: Accessor<DataT, Color>;\n  getLineWidth?: Accessor<DataT, number>;\n};\n\nexport type TextBackgroundLayerProps<DataT = any> = _TextBackgroundLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextBackgroundLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0, 0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_TextBackgroundLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextBackgroundLayer';\n\n  state!: {\n    model: Model;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {changeFlags} = params;\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {billboard, sizeScale, sizeUnits, sizeMinPixels, sizeMaxPixels, getLineWidth} =\n      this.props;\n    let {padding} = this.props;\n\n    if (padding.length < 4) {\n      padding = [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeUnits: UNIT[sizeUnits],\n        sizeScale,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n","export default `\\\n#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {CompositeLayer, createIterable, log} from '@deck.gl/core';\nimport MultiIconLayer from './multi-icon-layer/multi-icon-layer';\nimport FontAtlasManager, {\n  DEFAULT_FONT_SETTINGS,\n  setFontAtlasCacheLimit\n} from './font-atlas-manager';\nimport {transformParagraph, getTextFromBuffer} from './utils';\n\nimport TextBackgroundLayer from './text-background-layer/text-background-layer';\n\nimport type {FontSettings} from './font-atlas-manager';\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Accessor,\n  AccessorFunction,\n  AccessorContext,\n  Unit,\n  Position,\n  Color,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst TEXT_ANCHOR = {\n  start: 1,\n  middle: 0,\n  end: -1\n} as const;\n\nconst ALIGNMENT_BASELINE = {\n  top: 1,\n  center: 0,\n  bottom: -1\n} as const;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst DEFAULT_LINE_HEIGHT = 1.0;\n\ntype _TextLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** If `true`, the text always faces camera. Otherwise the text faces up (z).\n   * @default true\n   */\n  billboard?: boolean;\n  /**\n   * Text size multiplier.\n   * @default 1\n   */\n  sizeScale?: number;\n  /**\n   * The units of the size, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'pixels'\n   */\n  sizeUnits?: Unit;\n  /**\n   * The minimum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too small when zoomed out.\n   * @default 0\n   */\n  sizeMinPixels?: number;\n  /**\n   * The maximum size in pixels. When using non-pixel `sizeUnits`, this prop can be used to prevent the icon from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  sizeMaxPixels?: number;\n\n  /** Whether to render background for the text blocks.\n   * @default false\n   */\n  background?: boolean;\n  /** Background color accessor.\n   * @default [255, 255, 255, 255]\n   */\n  getBackgroundColor?: Accessor<DataT, Color>;\n  /** Border color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getBorderColor?: Accessor<DataT, Color>;\n  /** Border width accessor.\n   * @default 0\n   */\n  getBorderWidth?: Accessor<DataT, number>;\n  /**\n   * The padding of the background..\n   * If an array of 2 is supplied, it is interpreted as `[padding_x, padding_y]` in pixels.\n   * If an array of 4 is supplied, it is interpreted as `[padding_left, padding_top, padding_right, padding_bottom]` in pixels.\n   * @default [0, 0, 0, 0]\n   */\n  backgroundPadding?: [number, number] | [number, number, number, number];\n  /**\n   * Specifies a list of characters to include in the font. If set to 'auto', will be automatically generated from the data set.\n   * @default (ASCII characters 32-128)\n   */\n  characterSet?: FontSettings['characterSet'] | 'auto';\n  /** CSS font family\n   * @default 'Monaco, monospace'\n   */\n  fontFamily?: FontSettings['fontFamily'];\n  /** CSS font weight\n   * @default 'normal'\n   */\n  fontWeight?: FontSettings['fontWeight'];\n  /** A unitless number that will be multiplied with the current text size to set the line height.\n   * @default 'normal'\n   */\n  lineHeight?: number;\n  /**\n   * Width of outline around the text, relative to the text size. Only effective if `fontSettings.sdf` is `true`.\n   * @default 0\n   */\n  outlineWidth?: number;\n  /**\n   * Color of outline around the text, in `[r, g, b, [a]]`. Each channel is a number between 0-255 and `a` is 255 if not supplied.\n   * @default [0, 0, 0, 255]\n   */\n  outlineColor?: Color;\n  /**\n   * Advance options for fine tuning the appearance and performance of the generated shared `fontAtlas`.\n   */\n  fontSettings?: FontSettings;\n  /**\n   * Available options are `break-all` and `break-word`. A valid `maxWidth` has to be provided to use `wordBreak`.\n   * @default 'break-word'\n   */\n  wordBreak?: 'break-word' | 'break-all';\n  /**\n   * A unitless number that will be multiplied with the current text size to set the width limit of a string.\n   * If specified, when the text is longer than the width limit, it will be wrapped into multiple lines using\n   * the strategy of `wordBreak`.\n   * @default -1\n   */\n  maxWidth?: number;\n  /**\n   * Label text accessor\n   */\n  getText?: AccessorFunction<DataT, string>;\n  /**\n   * Anchor position accessor\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Label color accessor\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color>;\n  /**\n   * Label size accessor\n   * @default 32\n   */\n  getSize?: Accessor<DataT, number>;\n  /**\n   * Label rotation accessor, in degrees\n   * @default 0\n   */\n  getAngle?: Accessor<DataT, number>;\n  /**\n   * Horizontal alignment accessor\n   * @default 'middle'\n   */\n  getTextAnchor?: Accessor<DataT, 'start' | 'middle' | 'end'>;\n  /**\n   * Vertical alignment accessor\n   * @default 'center'\n   */\n  getAlignmentBaseline?: Accessor<DataT, 'top' | 'center' | 'bottom'>;\n  /**\n   * Label offset from the anchor position, [x, y] in pixels\n   * @default [0, 0]\n   */\n  getPixelOffset?: Accessor<DataT, [number, number]>;\n  /**\n   * @deprecated Use `background` and `getBackgroundColor` instead\n   */\n  backgroundColor?: Color;\n};\n\nexport type TextLayerProps<DataT = any> = _TextLayerProps<DataT> & LayerProps;\n\nconst defaultProps: DefaultProps<TextLayerProps> = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  background: false,\n  getBackgroundColor: {type: 'accessor', value: [255, 255, 255, 255]},\n  getBorderColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getBorderWidth: {type: 'accessor', value: 0},\n  backgroundPadding: {type: 'array', value: [0, 0, 0, 0]},\n\n  characterSet: {type: 'object', value: DEFAULT_FONT_SETTINGS.characterSet},\n  fontFamily: DEFAULT_FONT_SETTINGS.fontFamily,\n  fontWeight: DEFAULT_FONT_SETTINGS.fontWeight,\n  lineHeight: DEFAULT_LINE_HEIGHT,\n  outlineWidth: {type: 'number', value: 0, min: 0},\n  outlineColor: {type: 'color', value: DEFAULT_COLOR},\n  fontSettings: {type: 'object', value: {}, compare: 1},\n\n  // auto wrapping options\n  wordBreak: 'break-word',\n  maxWidth: {type: 'number', value: -1},\n\n  getText: {type: 'accessor', value: x => x.text},\n  getPosition: {type: 'accessor', value: x => x.position},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getSize: {type: 'accessor', value: 32},\n  getAngle: {type: 'accessor', value: 0},\n  getTextAnchor: {type: 'accessor', value: 'middle'},\n  getAlignmentBaseline: {type: 'accessor', value: 'center'},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n\n  // deprecated\n  backgroundColor: {deprecatedFor: ['background', 'getBackgroundColor']}\n};\n\n/** Render text labels at given coordinates. */\nexport default class TextLayer<DataT = any, ExtraPropsT extends {} = {}> extends CompositeLayer<\n  ExtraPropsT & Required<_TextLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'TextLayer';\n\n  state!: {\n    styleVersion: number;\n    fontAtlasManager: FontAtlasManager;\n    characterSet?: Set<string>;\n    startIndices?: number[];\n    numInstances?: number;\n    getText?: AccessorFunction<DataT, string>;\n  };\n\n  initializeState() {\n    this.state = {\n      styleVersion: 0,\n      fontAtlasManager: new FontAtlasManager()\n    };\n\n    // Breaking change in v8.9\n    if (this.props.maxWidth > 0) {\n      log.warn('v8.9 breaking change: TextLayer maxWidth is now relative to text size')();\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  updateState(params: UpdateParameters<this>) {\n    const {props, oldProps, changeFlags} = params;\n    const textChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getText));\n\n    if (textChanged) {\n      this._updateText();\n    }\n\n    const fontChanged = this._updateFontAtlas();\n\n    const styleChanged =\n      fontChanged ||\n      props.lineHeight !== oldProps.lineHeight ||\n      props.wordBreak !== oldProps.wordBreak ||\n      props.maxWidth !== oldProps.maxWidth;\n\n    if (styleChanged) {\n      this.setState({\n        styleVersion: this.state.styleVersion + 1\n      });\n    }\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    // because `TextLayer` assign the same pickingInfoIndex for one text label,\n    // here info.index refers the index of text label in props.data\n    info.object = info.index >= 0 ? this.props.data[info.index] : null;\n    return info;\n  }\n\n  /** Returns true if font has changed */\n  private _updateFontAtlas(): boolean {\n    const {fontSettings, fontFamily, fontWeight} = this.props;\n    const {fontAtlasManager, characterSet} = this.state;\n\n    const fontProps = {\n      ...fontSettings,\n      characterSet,\n      fontFamily,\n      fontWeight\n    };\n\n    if (!fontAtlasManager.mapping) {\n      // This is the first update\n      fontAtlasManager.setProps(fontProps);\n      return true;\n    }\n\n    for (const key in fontProps) {\n      if (fontProps[key] !== fontAtlasManager.props[key]) {\n        fontAtlasManager.setProps(fontProps);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  // Text strings are variable width objects\n  // Count characters and start offsets\n  private _updateText() {\n    const {data, characterSet} = this.props;\n    const textBuffer = (data as any).attributes?.getText;\n    let {getText} = this.props;\n    let startIndices: number[] = (data as any).startIndices;\n    let numInstances: number;\n\n    const autoCharacterSet = characterSet === 'auto' && new Set();\n\n    if (textBuffer && startIndices) {\n      const {texts, characterCount} = getTextFromBuffer({\n        ...(ArrayBuffer.isView(textBuffer) ? {value: textBuffer} : textBuffer),\n        // @ts-ignore if data.attribute is defined then length is expected\n        length: data.length,\n        startIndices,\n        characterSet: autoCharacterSet\n      });\n      numInstances = characterCount;\n      getText = (_, {index}) => texts[index];\n    } else {\n      const {iterable, objectInfo} = createIterable(data);\n      startIndices = [0];\n      numInstances = 0;\n\n      for (const object of iterable) {\n        objectInfo.index++;\n        // Break into an array of characters\n        // When dealing with double-length unicode characters, `str.length` or `str[i]` do not work\n        const text = Array.from(getText(object, objectInfo) || '');\n        if (autoCharacterSet) {\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          text.forEach(autoCharacterSet.add, autoCharacterSet);\n        }\n        numInstances += text.length;\n        startIndices.push(numInstances);\n      }\n    }\n\n    this.setState({\n      getText,\n      startIndices,\n      numInstances,\n      characterSet: autoCharacterSet || characterSet\n    });\n  }\n\n  /** There are two size systems in this layer:\n\n    + Pixel size: user-specified text size, via getSize, sizeScale, sizeUnits etc.\n      The layer roughly matches the output of the layer to CSS pixels, e.g. getSize: 12, sizeScale: 2\n      in layer props is roughly equivalent to font-size: 24px in CSS.\n    + Texture size: internally, character positions in a text blob are calculated using the sizes of iconMapping,\n      which depends on how large each character is drawn into the font atlas. This is controlled by\n      fontSettings.fontSize (default 64) and most users do not set it manually.\n      These numbers are intended to be used in the vertex shader and never to be exposed to the end user.\n\n    All surfaces exposed to the user should either use the pixel size or a multiplier relative to the pixel size. */\n\n  /** Calculate the size and position of each character in a text string.\n   * Values are in texture size */\n  private transformParagraph(\n    object: DataT,\n    objectInfo: AccessorContext<DataT>\n  ): ReturnType<typeof transformParagraph> {\n    const {fontAtlasManager} = this.state;\n    const iconMapping = fontAtlasManager.mapping!;\n    const getText = this.state.getText!;\n    const {wordBreak, lineHeight, maxWidth} = this.props;\n\n    const paragraph = getText(object, objectInfo) || '';\n    return transformParagraph(\n      paragraph,\n      lineHeight,\n      wordBreak,\n      maxWidth * fontAtlasManager.props.fontSize,\n      iconMapping\n    );\n  }\n\n  /** Returns the x, y, width, height of each text string, relative to pixel size.\n   * Used to render the background.\n   */\n  private getBoundingRect: AccessorFunction<DataT, [number, number, number, number]> = (\n    object,\n    objectInfo\n  ) => {\n    let {\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const {fontSize} = this.state.fontAtlasManager.props;\n    width /= fontSize;\n    height /= fontSize;\n\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    return [((anchorX - 1) * width) / 2, ((anchorY - 1) * height) / 2, width, height];\n  };\n\n  /** Returns the x, y offsets of each character in a text string, in texture size.\n   * Used to layout characters in the vertex shader.\n   */\n  private getIconOffsets: AccessorFunction<DataT, number[]> = (object, objectInfo) => {\n    const {getTextAnchor, getAlignmentBaseline} = this.props;\n\n    const {\n      x,\n      y,\n      rowWidth,\n      size: [width, height]\n    } = this.transformParagraph(object, objectInfo);\n    const anchorX =\n      TEXT_ANCHOR[\n        typeof getTextAnchor === 'function' ? getTextAnchor(object, objectInfo) : getTextAnchor\n      ];\n    const anchorY =\n      ALIGNMENT_BASELINE[\n        typeof getAlignmentBaseline === 'function'\n          ? getAlignmentBaseline(object, objectInfo)\n          : getAlignmentBaseline\n      ];\n\n    const numCharacters = x.length;\n    const offsets = new Array(numCharacters * 2);\n    let index = 0;\n\n    for (let i = 0; i < numCharacters; i++) {\n      // For a multi-line object, offset in x-direction needs consider\n      // the row offset in the paragraph and the object offset in the row\n      const rowOffset = ((1 - anchorX) * (width - rowWidth[i])) / 2;\n      offsets[index++] = ((anchorX - 1) * width) / 2 + rowOffset + x[i];\n      offsets[index++] = ((anchorY - 1) * height) / 2 + y[i];\n    }\n    return offsets;\n  };\n\n  renderLayers() {\n    const {\n      startIndices,\n      numInstances,\n      getText,\n      fontAtlasManager: {scale, texture, mapping},\n      styleVersion\n    } = this.state;\n\n    const {\n      data,\n      _dataDiff,\n      getPosition,\n      getColor,\n      getSize,\n      getAngle,\n      getPixelOffset,\n      getBackgroundColor,\n      getBorderColor,\n      getBorderWidth,\n      backgroundPadding,\n      background,\n      billboard,\n      fontSettings,\n      outlineWidth,\n      outlineColor,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      transitions,\n      updateTriggers\n    } = this.props;\n\n    const CharactersLayerClass = this.getSubLayerClass('characters', MultiIconLayer);\n    const BackgroundLayerClass = this.getSubLayerClass('background', TextBackgroundLayer);\n\n    return [\n      background &&\n        new BackgroundLayerClass(\n          {\n            // background props\n            getFillColor: getBackgroundColor,\n            getLineColor: getBorderColor,\n            getLineWidth: getBorderWidth,\n            padding: backgroundPadding,\n\n            // props shared with characters layer\n            getPosition,\n            getSize,\n            getAngle,\n            getPixelOffset,\n            billboard,\n            sizeScale,\n            sizeUnits,\n            sizeMinPixels,\n            sizeMaxPixels,\n\n            transitions: transitions && {\n              getPosition: transitions.getPosition,\n              getAngle: transitions.getAngle,\n              getSize: transitions.getSize,\n              getFillColor: transitions.getBackgroundColor,\n              getLineColor: transitions.getBorderColor,\n              getLineWidth: transitions.getBorderWidth,\n              getPixelOffset: transitions.getPixelOffset\n            }\n          },\n          this.getSubLayerProps({\n            id: 'background',\n            updateTriggers: {\n              getPosition: updateTriggers.getPosition,\n              getAngle: updateTriggers.getAngle,\n              getSize: updateTriggers.getSize,\n              getFillColor: updateTriggers.getBackgroundColor,\n              getLineColor: updateTriggers.getBorderColor,\n              getLineWidth: updateTriggers.getBorderWidth,\n              getPixelOffset: updateTriggers.getPixelOffset,\n              getBoundingRect: {\n                getText: updateTriggers.getText,\n                getTextAnchor: updateTriggers.getTextAnchor,\n                getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n                styleVersion\n              }\n            }\n          }),\n          {\n            data:\n              // @ts-ignore (2339) attribute is not defined on all data types\n              data.attributes && data.attributes.background\n                ? // @ts-ignore (2339) attribute is not defined on all data types\n                  {length: data.length, attributes: data.attributes.background}\n                : data,\n            _dataDiff,\n            // Maintain the same background behavior as <=8.3. Remove in v9?\n            autoHighlight: false,\n            getBoundingRect: this.getBoundingRect\n          }\n        ),\n      new CharactersLayerClass(\n        {\n          sdf: fontSettings.sdf,\n          smoothing: Number.isFinite(fontSettings.smoothing)\n            ? fontSettings.smoothing\n            : DEFAULT_FONT_SETTINGS.smoothing,\n          outlineWidth: outlineWidth / (fontSettings.radius || DEFAULT_FONT_SETTINGS.radius),\n          outlineColor,\n          iconAtlas: texture,\n          iconMapping: mapping,\n\n          getPosition,\n          getColor,\n          getSize,\n          getAngle,\n          getPixelOffset,\n\n          billboard,\n          sizeScale: sizeScale * scale,\n          sizeUnits,\n          sizeMinPixels: sizeMinPixels * scale,\n          sizeMaxPixels: sizeMaxPixels * scale,\n\n          transitions: transitions && {\n            getPosition: transitions.getPosition,\n            getAngle: transitions.getAngle,\n            getColor: transitions.getColor,\n            getSize: transitions.getSize,\n            getPixelOffset: transitions.getPixelOffset\n          }\n        },\n        this.getSubLayerProps({\n          id: 'characters',\n          updateTriggers: {\n            all: updateTriggers.getText,\n            getPosition: updateTriggers.getPosition,\n            getAngle: updateTriggers.getAngle,\n            getColor: updateTriggers.getColor,\n            getSize: updateTriggers.getSize,\n            getPixelOffset: updateTriggers.getPixelOffset,\n            getIconOffsets: {\n              getTextAnchor: updateTriggers.getTextAnchor,\n              getAlignmentBaseline: updateTriggers.getAlignmentBaseline,\n              styleVersion\n            }\n          }\n        }),\n        {\n          data,\n          _dataDiff,\n          startIndices,\n          numInstances,\n          getIconOffsets: this.getIconOffsets,\n          getIcon: getText\n        }\n      )\n    ];\n  }\n\n  static set fontAtlasCacheLimit(limit: number) {\n    setFontAtlasCacheLimit(limit);\n  }\n}\n","import {CompositeLayer, Layer} from '@deck.gl/core';\n\nimport IconLayer from '../icon-layer/icon-layer';\nimport ScatterplotLayer from '../scatterplot-layer/scatterplot-layer';\nimport TextLayer from '../text-layer/text-layer';\nimport PathLayer from '../path-layer/path-layer';\nimport SolidPolygonLayer from '../solid-polygon-layer/solid-polygon-layer';\n\nexport const POINT_LAYER = {\n  circle: {\n    type: ScatterplotLayer,\n    props: {\n      filled: 'filled',\n      stroked: 'stroked',\n\n      lineWidthMaxPixels: 'lineWidthMaxPixels',\n      lineWidthMinPixels: 'lineWidthMinPixels',\n      lineWidthScale: 'lineWidthScale',\n      lineWidthUnits: 'lineWidthUnits',\n      pointRadiusMaxPixels: 'radiusMaxPixels',\n      pointRadiusMinPixels: 'radiusMinPixels',\n      pointRadiusScale: 'radiusScale',\n      pointRadiusUnits: 'radiusUnits',\n      pointAntialiasing: 'antialiasing',\n      pointBillboard: 'billboard',\n\n      getFillColor: 'getFillColor',\n      getLineColor: 'getLineColor',\n      getLineWidth: 'getLineWidth',\n      getPointRadius: 'getRadius'\n    }\n  },\n  icon: {\n    type: IconLayer,\n    props: {\n      iconAtlas: 'iconAtlas',\n      iconMapping: 'iconMapping',\n\n      iconSizeMaxPixels: 'sizeMaxPixels',\n      iconSizeMinPixels: 'sizeMinPixels',\n      iconSizeScale: 'sizeScale',\n      iconSizeUnits: 'sizeUnits',\n      iconAlphaCutoff: 'alphaCutoff',\n      iconBillboard: 'billboard',\n\n      getIcon: 'getIcon',\n      getIconAngle: 'getAngle',\n      getIconColor: 'getColor',\n      getIconPixelOffset: 'getPixelOffset',\n      getIconSize: 'getSize'\n    }\n  },\n  text: {\n    type: TextLayer,\n    props: {\n      textSizeMaxPixels: 'sizeMaxPixels',\n      textSizeMinPixels: 'sizeMinPixels',\n      textSizeScale: 'sizeScale',\n      textSizeUnits: 'sizeUnits',\n\n      textBackground: 'background',\n      textBackgroundPadding: 'backgroundPadding',\n      textFontFamily: 'fontFamily',\n      textFontWeight: 'fontWeight',\n      textLineHeight: 'lineHeight',\n      textMaxWidth: 'maxWidth',\n      textOutlineColor: 'outlineColor',\n      textOutlineWidth: 'outlineWidth',\n      textWordBreak: 'wordBreak',\n      textCharacterSet: 'characterSet',\n      textBillboard: 'billboard',\n      textFontSettings: 'fontSettings',\n\n      getText: 'getText',\n      getTextAngle: 'getAngle',\n      getTextColor: 'getColor',\n      getTextPixelOffset: 'getPixelOffset',\n      getTextSize: 'getSize',\n      getTextAnchor: 'getTextAnchor',\n      getTextAlignmentBaseline: 'getAlignmentBaseline',\n      getTextBackgroundColor: 'getBackgroundColor',\n      getTextBorderColor: 'getBorderColor',\n      getTextBorderWidth: 'getBorderWidth'\n    }\n  }\n};\n\nexport const LINE_LAYER = {\n  type: PathLayer,\n  props: {\n    lineWidthUnits: 'widthUnits',\n    lineWidthScale: 'widthScale',\n    lineWidthMinPixels: 'widthMinPixels',\n    lineWidthMaxPixels: 'widthMaxPixels',\n    lineJointRounded: 'jointRounded',\n    lineCapRounded: 'capRounded',\n    lineMiterLimit: 'miterLimit',\n    lineBillboard: 'billboard',\n\n    getLineColor: 'getColor',\n    getLineWidth: 'getWidth'\n  }\n};\n\nexport const POLYGON_LAYER = {\n  type: SolidPolygonLayer,\n  props: {\n    extruded: 'extruded',\n    filled: 'filled',\n    wireframe: 'wireframe',\n    elevationScale: 'elevationScale',\n    material: 'material',\n    _full3d: '_full3d',\n\n    getElevation: 'getElevation',\n    getFillColor: 'getFillColor',\n    getLineColor: 'getLineColor'\n  }\n};\n\nexport function getDefaultProps({\n  type,\n  props\n}: {\n  type: typeof Layer;\n  props: Record<string, string>;\n}): Record<string, any> {\n  const result = {};\n  for (const key in props) {\n    result[key] = type.defaultProps[props[key]];\n  }\n  return result;\n}\n\nexport function forwardProps(\n  layer: CompositeLayer,\n  mapping: Record<string, string>\n): Record<string, any> {\n  const {transitions, updateTriggers} = layer.props;\n  const result: Record<string, any> = {\n    updateTriggers: {},\n    transitions: transitions && {\n      getPosition: transitions.geometry\n    }\n  };\n\n  for (const sourceKey in mapping) {\n    const targetKey = mapping[sourceKey];\n    let value = layer.props[sourceKey];\n    if (sourceKey.startsWith('get')) {\n      // isAccessor\n      value = (layer as any).getSubLayerAccessor(value);\n      result.updateTriggers[targetKey] = updateTriggers[sourceKey];\n      if (transitions) {\n        result.transitions[targetKey] = transitions[sourceKey];\n      }\n    }\n    result[targetKey] = value;\n  }\n  return result;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {log} from '@deck.gl/core';\nimport type {\n  Feature,\n  GeoJSON,\n  GeoJsonGeometryTypes,\n  LineString,\n  MultiLineString,\n  MultiPoint,\n  MultiPolygon,\n  Point,\n  Polygon\n} from 'geojson';\n\ntype SupportedGeometry = Point | MultiPoint | LineString | MultiLineString | Polygon | MultiPolygon;\n\nexport type SeparatedGeometries = {\n  pointFeatures: {geometry: Point}[];\n  lineFeatures: {geometry: LineString}[];\n  polygonFeatures: {geometry: Polygon}[];\n  polygonOutlineFeatures: {geometry: LineString}[];\n};\n\n/**\n * \"Normalizes\" complete or partial GeoJSON data into iterable list of features\n * Can accept GeoJSON geometry or \"Feature\", \"FeatureCollection\" in addition\n * to plain arrays and iterables.\n * Works by extracting the feature array or wrapping single objects in an array,\n * so that subsequent code can simply iterate over features.\n *\n * @param {object} geojson - geojson data\n * @param {Object|Array} data - geojson object (FeatureCollection, Feature or\n *  Geometry) or array of features\n * @return {Array|\"iteratable\"} - iterable list of features\n */\nexport function getGeojsonFeatures(geojson: GeoJSON): Feature[] {\n  // If array, assume this is a list of features\n  if (Array.isArray(geojson)) {\n    return geojson;\n  }\n\n  log.assert(geojson.type, 'GeoJSON does not have type');\n\n  switch (geojson.type) {\n    case 'Feature':\n      // Wrap the feature in a 'Features' array\n      return [geojson];\n    case 'FeatureCollection':\n      // Just return the 'Features' array from the collection\n      log.assert(Array.isArray(geojson.features), 'GeoJSON does not have features array');\n      return geojson.features;\n    default:\n      // Assume it's a geometry, we'll check type in separateGeojsonFeatures\n      // Wrap the geometry object in a 'Feature' object and wrap in an array\n      return [{geometry: geojson}] as Feature[];\n  }\n}\n\n// Linearize\nexport function separateGeojsonFeatures(\n  features: Feature[],\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  dataRange: {startRow?: number; endRow?: number} = {}\n): SeparatedGeometries {\n  const separated: SeparatedGeometries = {\n    pointFeatures: [],\n    lineFeatures: [],\n    polygonFeatures: [],\n    polygonOutlineFeatures: []\n  };\n  const {startRow = 0, endRow = features.length} = dataRange;\n\n  for (let featureIndex = startRow; featureIndex < endRow; featureIndex++) {\n    const feature = features[featureIndex];\n    const {geometry} = feature;\n\n    if (!geometry) {\n      // geometry can be null per specification\n      continue; // eslint-disable-line no-continue\n    }\n\n    if (geometry.type === 'GeometryCollection') {\n      log.assert(Array.isArray(geometry.geometries), 'GeoJSON does not have geometries array');\n      const {geometries} = geometry;\n      for (let i = 0; i < geometries.length; i++) {\n        const subGeometry = geometries[i];\n        separateGeometry(\n          subGeometry as SupportedGeometry,\n          separated,\n          wrapFeature,\n          feature,\n          featureIndex\n        );\n      }\n    } else {\n      separateGeometry(geometry, separated, wrapFeature, feature, featureIndex);\n    }\n  }\n\n  return separated;\n}\n\nfunction separateGeometry(\n  geometry: SupportedGeometry,\n  separated: SeparatedGeometries,\n  wrapFeature: <T>(row: T, sourceObject: any, sourceObjectIndex: number) => T,\n  sourceFeature: Feature,\n  sourceFeatureIndex: number\n) {\n  const {type, coordinates} = geometry;\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = separated;\n\n  if (!validateGeometry(type, coordinates)) {\n    // Avoid hard failure if some features are malformed\n    log.warn(`${type} coordinates are malformed`)();\n    return;\n  }\n\n  // Split each feature, but keep track of the source feature and index (for Multi* geometries)\n  switch (type) {\n    case 'Point':\n      pointFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiPoint':\n      coordinates.forEach(point => {\n        pointFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Point', coordinates: point}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'LineString':\n      lineFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      break;\n    case 'MultiLineString':\n      // Break multilinestrings into multiple lines\n      coordinates.forEach(path => {\n        lineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'Polygon':\n      polygonFeatures.push(\n        wrapFeature(\n          {\n            geometry\n          },\n          sourceFeature,\n          sourceFeatureIndex\n        )\n      );\n      // Break polygon into multiple lines\n      coordinates.forEach(path => {\n        polygonOutlineFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'LineString', coordinates: path}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n      });\n      break;\n    case 'MultiPolygon':\n      // Break multipolygons into multiple polygons\n      coordinates.forEach(polygon => {\n        polygonFeatures.push(\n          wrapFeature(\n            {\n              geometry: {type: 'Polygon', coordinates: polygon}\n            },\n            sourceFeature,\n            sourceFeatureIndex\n          )\n        );\n        // Break polygon into multiple lines\n        polygon.forEach(path => {\n          polygonOutlineFeatures.push(\n            wrapFeature(\n              {\n                geometry: {type: 'LineString', coordinates: path}\n              },\n              sourceFeature,\n              sourceFeatureIndex\n            )\n          );\n        });\n      });\n      break;\n    default:\n  }\n}\n\n/**\n * Simple GeoJSON validation util. For perf reasons we do not validate against the full spec,\n * only the following:\n   - geometry.type is supported\n   - geometry.coordinate has correct nesting level\n */\nconst COORDINATE_NEST_LEVEL: Record<SupportedGeometry['type'], number> = {\n  Point: 1,\n  MultiPoint: 2,\n  LineString: 2,\n  MultiLineString: 3,\n  Polygon: 3,\n  MultiPolygon: 4\n};\n\nexport function validateGeometry(type: GeoJsonGeometryTypes, coordinates: any): boolean {\n  let nestLevel = COORDINATE_NEST_LEVEL[type] as number;\n\n  log.assert(nestLevel, `Unknown GeoJSON type ${type}`);\n\n  while (coordinates && --nestLevel > 0) {\n    coordinates = coordinates[0];\n  }\n\n  return coordinates && Number.isFinite(coordinates[0]);\n}\n","import {BinaryAttribute, LayerData, LayerProps} from '@deck.gl/core';\nimport {PolygonLayerProps, ScatterplotLayerProps} from '..';\nimport {calculatePickingColors} from './geojson-binary';\nimport {BinaryFeatures} from '@loaders.gl/schema';\nimport {SeparatedGeometries} from './geojson';\n\n// TODO: PathLayer is not yet typed\ntype PathLayerProps = LayerProps & Record<string, any>;\n\ntype SubLayersProps = {\n  points: Partial<ScatterplotLayerProps>;\n  lines: Partial<PathLayerProps>;\n  polygons: Partial<PolygonLayerProps>;\n  polygonsOutline: Partial<PathLayerProps>;\n};\n\ntype ExtendedBinaryFeatures = {\n  [P in keyof BinaryFeatures]: BinaryFeatures[P] & {attributes?: Record<string, BinaryAttribute>};\n};\n\nfunction createEmptyLayerProps(): SubLayersProps {\n  return {\n    points: {},\n    lines: {},\n    polygons: {},\n    polygonsOutline: {}\n  };\n}\n\nfunction getCoordinates(f) {\n  return f.geometry.coordinates;\n}\n\nexport function createLayerPropsFromFeatures(\n  features: SeparatedGeometries,\n  featuresDiff\n): SubLayersProps {\n  const layerProps = createEmptyLayerProps();\n  const {pointFeatures, lineFeatures, polygonFeatures, polygonOutlineFeatures} = features;\n\n  layerProps.points.data = pointFeatures;\n  layerProps.points._dataDiff = featuresDiff.pointFeatures && (() => featuresDiff.pointFeatures);\n  layerProps.points.getPosition = getCoordinates;\n\n  layerProps.lines.data = lineFeatures;\n  layerProps.lines._dataDiff = featuresDiff.lineFeatures && (() => featuresDiff.lineFeatures);\n  layerProps.lines.getPath = getCoordinates;\n\n  layerProps.polygons.data = polygonFeatures;\n  layerProps.polygons._dataDiff =\n    featuresDiff.polygonFeatures && (() => featuresDiff.polygonFeatures);\n  layerProps.polygons.getPolygon = getCoordinates;\n\n  layerProps.polygonsOutline.data = polygonOutlineFeatures;\n  layerProps.polygonsOutline._dataDiff =\n    featuresDiff.polygonOutlineFeatures && (() => featuresDiff.polygonOutlineFeatures);\n  layerProps.polygonsOutline.getPath = getCoordinates;\n\n  return layerProps;\n}\n\nexport function createLayerPropsFromBinary(\n  geojsonBinary: Required<ExtendedBinaryFeatures>,\n  encodePickingColor\n): SubLayersProps {\n  // The binary data format is documented here\n  // https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n  // It is the default output from the `MVTLoader` and can also be obtained\n  // from GeoJSON by using the `geojsonToBinary` utility function.\n  const layerProps = createEmptyLayerProps();\n  const {points, lines, polygons} = geojsonBinary;\n\n  const customPickingColors = calculatePickingColors(geojsonBinary, encodePickingColor);\n\n  layerProps.points.data = {\n    length: points.positions.value.length / points.positions.size,\n    attributes: {\n      ...points.attributes,\n      getPosition: points.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.points!\n      }\n    },\n    properties: points.properties,\n    numericProps: points.numericProps,\n    featureIds: points.featureIds\n  } as LayerData<any>;\n\n  layerProps.lines.data = {\n    length: lines.pathIndices.value.length - 1,\n    startIndices: lines.pathIndices.value,\n    attributes: {\n      ...lines.attributes,\n      getPath: lines.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.lines!\n      }\n    },\n    properties: lines.properties,\n    numericProps: lines.numericProps,\n    featureIds: lines.featureIds\n  } as LayerData<any>;\n  layerProps.lines._pathType = 'open';\n\n  layerProps.polygons.data = {\n    length: polygons.polygonIndices.value.length - 1,\n    startIndices: polygons.polygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPolygon: polygons.positions,\n      pickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygons._normalize = false;\n  if (polygons.triangles) {\n    (layerProps.polygons.data as any).attributes.indices = polygons.triangles.value;\n  }\n\n  layerProps.polygonsOutline.data = {\n    length: polygons.primitivePolygonIndices.value.length - 1,\n    startIndices: polygons.primitivePolygonIndices.value,\n    attributes: {\n      ...polygons.attributes,\n      getPath: polygons.positions,\n      instancePickingColors: {\n        size: 3,\n        value: customPickingColors.polygons!\n      }\n    },\n    properties: polygons.properties,\n    numericProps: polygons.numericProps,\n    featureIds: polygons.featureIds\n  } as LayerData<any>;\n  layerProps.polygonsOutline._pathType = 'open';\n\n  return layerProps;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  CompositeLayer,\n  CompositeLayerProps,\n  Layer,\n  PickingInfo,\n  Unit,\n  Material,\n  UpdateParameters,\n  _ConstructorOf,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport type {BinaryFeatures} from '@loaders.gl/schema';\nimport type {Feature, GeoJSON} from 'geojson';\n\nimport {replaceInRange} from '../utils';\nimport {BinaryFeatureTypes, binaryToFeatureForAccesor} from './geojson-binary';\nimport {\n  POINT_LAYER,\n  LINE_LAYER,\n  POLYGON_LAYER,\n  getDefaultProps,\n  forwardProps\n} from './sub-layer-map';\n\nimport {getGeojsonFeatures, SeparatedGeometries, separateGeojsonFeatures} from './geojson';\nimport {createLayerPropsFromFeatures, createLayerPropsFromBinary} from './geojson-layer-props';\n\n/** All properties supported by GeoJsonLayer */\nexport type GeoJsonLayerProps = _GeoJsonLayerProps & CompositeLayerProps;\n\n/** Properties added by GeoJsonLayer */\nexport type _GeoJsonLayerProps = {\n  data: string | GeoJSON | BinaryFeatures | Promise<GeoJSON | BinaryFeatures>;\n  /**\n   * How to render Point and MultiPoint features in the data.\n   *\n   * Supported types are:\n   *  * `'circle'`\n   *  * `'icon'`\n   *  * `'text'`\n   *\n   * @default 'circle'\n   */\n  pointType?: string;\n} & _GeoJsonLayerFillProps &\n  _GeoJsonLayerStrokeProps &\n  _GeoJsonLayer3DProps &\n  _GeoJsonLayerPointCircleProps &\n  _GeojsonLayerIconPointProps &\n  _GeojsonLayerTextPointProps;\n\n/** GeoJsonLayer fill options. */\ntype _GeoJsonLayerFillProps = {\n  /**\n   * Whether to draw a filled polygon (solid fill).\n   *\n   * Note that only the area between the outer polygon and any holes will be filled.\n   *\n   * @default true\n   */\n  filled?: boolean;\n\n  /**\n   * Fill collor value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<Feature, Color>;\n};\n\n/** GeoJsonLayer stroke options. */\ntype _GeoJsonLayerStrokeProps = {\n  /**\n   * Whether to draw an outline around the polygon (solid fill).\n   *\n   * Note that both the outer polygon as well the outlines of any holes will be drawn.\n   *\n   * @default true\n   */\n  stroked?: boolean;\n\n  /**\n   * Line color value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<Feature, Color>;\n\n  /**\n   * Line width value or accessor.\n   *\n   * @default [0, 0, 0, 255]\n   */\n  getLineWidth?: Accessor<Feature, number>;\n\n  /**\n   * The units of the line width, one of `meters`, `common`, and `pixels`.\n   *\n   * @default 'meters'\n   * @see Unit.\n   */\n  lineWidthUnits?: Unit;\n\n  /**\n   * A multiplier that is applied to all line widths\n   *\n   * @default 1\n   */\n  lineWidthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   *\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels\n   *\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   *\n   * @default false\n   */\n  lineJointRounded?: boolean;\n\n  /**\n   * The maximum extent of a joint in ratio to the stroke width.\n   *\n   * Only works if `lineJointRounded` is false.\n   *\n   * @default 4\n   */\n  lineMiterLimit?: number;\n\n  /**\n   * Type of line caps.\n   *\n   * If `true`, draw round caps. Otherwise draw square caps.\n   *\n   * @default false\n   */\n  lineCapRounded?: boolean;\n\n  /**\n   * If `true`, extrude the line in screen space (width always faces the camera).\n   * If `false`, the width always faces up.\n   *\n   * @default false\n   */\n  lineBillboard?: boolean;\n};\n\n/** GeoJsonLayer 3D options. */\ntype _GeoJsonLayer3DProps = {\n  /**\n   * Extrude Polygon and MultiPolygon features along the z-axis if set to true\n   *\n   * Based on the elevations provided by the `getElevation` accessor.\n   *\n   * @default false\n   */\n  extruded?: boolean;\n\n  /**\n   * Whether to generate a line wireframe of the hexagon.\n   *\n   * @default false\n   */\n  wireframe?: boolean;\n\n  /**\n   * (Experimental) This prop is only effective with `XYZ` data.\n   * When true, polygon tesselation will be performed on the plane with the largest area, instead of the xy plane.\n   * @default false\n   */\n  _full3d?: boolean;\n\n  /**\n   * Elevation valur or accessor.\n   *\n   * Only used if `extruded: true`.\n   *\n   * @default 1000\n   */\n  getElevation?: Accessor<Feature, number>;\n\n  /**\n   * Elevation multiplier.\n   *\n   * The final elevation is calculated by `elevationScale * getElevation(d)`.\n   * `elevationScale` is a handy property to scale all elevation without updating the data.\n   *\n   * @default 1\n   */\n  elevationScale?: boolean;\n\n  /**\n   * Material settings for lighting effect. Applies to extruded polgons.\n   *\n   * @default true\n   * @see https://deck.gl/docs/developer-guide/using-lighting\n   */\n  material?: Material;\n};\n\n/** GeoJsonLayer Properties forwarded to `ScatterPlotLayer` if `pointType` is `'circle'` */\nexport type _GeoJsonLayerPointCircleProps = {\n  getPointRadius?: Accessor<Feature, number>;\n  pointRadiusUnits?: Unit;\n  pointRadiusScale?: number;\n  pointRadiusMinPixels?: number;\n  pointRadiusMaxPixels?: number;\n  pointAntialiasing?: boolean;\n  pointBillboard?: boolean;\n\n  /** @deprecated use getPointRadius */\n  getRadius?: Accessor<Feature, number>;\n};\n\n/** GeoJsonLayer properties forwarded to `IconLayer` if `pointType` is `'icon'` */\ntype _GeojsonLayerIconPointProps = {\n  iconAtlas?: any;\n  iconMapping?: any;\n  getIcon?: Accessor<Feature, any>;\n  getIconSize?: Accessor<Feature, number>;\n  getIconColor?: Accessor<Feature, Color>;\n  getIconAngle?: Accessor<Feature, number>;\n  getIconPixelOffset?: Accessor<Feature, number[]>;\n  iconSizeUnits?: Unit;\n  iconSizeScale?: number;\n  iconSizeMinPixels?: number;\n  iconSizeMaxPixels?: number;\n  iconBillboard?: boolean;\n  iconAlphaCutoff?: number;\n};\n\n/** GeoJsonLayer properties forwarded to `TextLayer` if `pointType` is `'text'` */\ntype _GeojsonLayerTextPointProps = {\n  getText?: Accessor<Feature, any>;\n  getTextColor?: Accessor<Feature, Color>;\n  getTextAngle?: Accessor<Feature, number>;\n  getTextSize?: Accessor<Feature, number>;\n  getTextAnchor?: Accessor<Feature, string>;\n  getTextAlignmentBaseline?: Accessor<Feature, string>;\n  getTextPixelOffset?: Accessor<Feature, number[]>;\n  getTextBackgroundColor?: Accessor<Feature, Color>;\n  getTextBorderColor?: Accessor<Feature, Color>;\n  getTextBorderWidth?: Accessor<Feature, number>;\n  textSizeUnits?: Unit;\n  textSizeScale?: number;\n  textSizeMinPixels?: number;\n  textSizeMaxPixels?: number;\n  textCharacterSet?: any;\n  textFontFamily?: string;\n  textFontWeight?: number;\n  textLineHeight?: number;\n  textMaxWidth?: number;\n  textWordBreak?: string; // TODO\n  textBackground?: boolean;\n  textBackgroundPadding?: number[];\n  textOutlineColor?: Color;\n  textOutlineWidth?: number;\n  textBillboard?: boolean;\n  textFontSettings?: any;\n};\n\nconst FEATURE_TYPES = ['points', 'linestrings', 'polygons'];\n\nconst defaultProps: DefaultProps<GeoJsonLayerProps> = {\n  ...getDefaultProps(POINT_LAYER.circle),\n  ...getDefaultProps(POINT_LAYER.icon),\n  ...getDefaultProps(POINT_LAYER.text),\n  ...getDefaultProps(LINE_LAYER),\n  ...getDefaultProps(POLYGON_LAYER),\n\n  // Overwrite sub layer defaults\n  stroked: true,\n  filled: true,\n  extruded: false,\n  wireframe: false,\n  _full3d: false,\n  iconAtlas: {type: 'object', value: null},\n  iconMapping: {type: 'object', value: {}},\n  getIcon: {type: 'accessor', value: f => f.properties.icon},\n  getText: {type: 'accessor', value: f => f.properties.text},\n\n  // Self props\n  pointType: 'circle',\n\n  // TODO: deprecated, remove in v9\n  getRadius: {deprecatedFor: 'getPointRadius'}\n};\n\ntype GeoJsonPickingInfo = PickingInfo & {\n  featureType?: string | null;\n  info?: any;\n};\n\n/** Render GeoJSON formatted data as polygons, lines and points (circles, icons and/or texts). */\nexport default class GeoJsonLayer<ExtraProps extends {} = {}> extends CompositeLayer<\n  Required<GeoJsonLayerProps> & ExtraProps\n> {\n  static layerName = 'GeoJsonLayer';\n  static defaultProps = defaultProps;\n\n  initializeState(): void {\n    this.state = {\n      layerProps: {},\n      features: {}\n    };\n  }\n\n  updateState({props, changeFlags}: UpdateParameters<this>): void {\n    if (!changeFlags.dataChanged) {\n      return;\n    }\n    const {data} = this.props;\n    const binary =\n      data && 'points' in (data as {}) && 'polygons' in (data as {}) && 'lines' in (data as {});\n\n    this.setState({binary});\n\n    if (binary) {\n      this._updateStateBinary({props, changeFlags});\n    } else {\n      this._updateStateJSON({props, changeFlags});\n    }\n  }\n\n  private _updateStateBinary({props, changeFlags}): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const layerProps = createLayerPropsFromBinary(props.data, this.encodePickingColor);\n    this.setState({layerProps});\n  }\n\n  private _updateStateJSON({props, changeFlags}): void {\n    const features: Feature[] = getGeojsonFeatures(props.data) as any;\n    const wrapFeature = this.getSubLayerRow.bind(this);\n    let newFeatures: SeparatedGeometries = {} as SeparatedGeometries;\n    const featuresDiff = {};\n\n    if (Array.isArray(changeFlags.dataChanged)) {\n      const oldFeatures = this.state.features;\n      for (const key in oldFeatures) {\n        newFeatures[key] = oldFeatures[key].slice();\n        featuresDiff[key] = [];\n      }\n\n      for (const dataRange of changeFlags.dataChanged) {\n        const partialFeatures = separateGeojsonFeatures(features, wrapFeature, dataRange);\n        for (const key in oldFeatures) {\n          featuresDiff[key].push(\n            replaceInRange({\n              data: newFeatures[key],\n              getIndex: f => f.__source.index,\n              dataRange,\n              replace: partialFeatures[key]\n            })\n          );\n        }\n      }\n    } else {\n      newFeatures = separateGeojsonFeatures(features, wrapFeature);\n    }\n\n    const layerProps = createLayerPropsFromFeatures(newFeatures, featuresDiff);\n\n    this.setState({\n      features: newFeatures,\n      featuresDiff,\n      layerProps\n    });\n  }\n\n  getPickingInfo(params): GeoJsonPickingInfo {\n    const info = super.getPickingInfo(params) as GeoJsonPickingInfo;\n    const {index, sourceLayer} = info;\n    info.featureType = FEATURE_TYPES.find(ft => sourceLayer!.id.startsWith(`${this.id}-${ft}-`));\n    if (index >= 0 && sourceLayer!.id.startsWith(`${this.id}-points-text`) && this.state.binary) {\n      info.index = (this.props.data as BinaryFeatures).points!.globalFeatureIds.value[index];\n    }\n    return info;\n  }\n\n  _updateAutoHighlight(info: GeoJsonPickingInfo): void {\n    // All sub layers except the points layer use source feature index to encode the picking color\n    // The points layer uses indices from the points data array.\n    const pointLayerIdPrefix = `${this.id}-points-`;\n    const sourceIsPoints = info.featureType === 'points';\n    for (const layer of this.getSubLayers()) {\n      if (layer.id.startsWith(pointLayerIdPrefix) === sourceIsPoints) {\n        layer.updateAutoHighlight(info);\n      }\n    }\n  }\n\n  private _renderPolygonLayer(): Layer | null {\n    const {extruded, wireframe} = this.props;\n    const {layerProps} = this.state;\n    const id = 'polygons-fill';\n\n    const PolygonFillLayer =\n      this.shouldRenderSubLayer(id, layerProps.polygons.data) &&\n      this.getSubLayerClass(id, POLYGON_LAYER.type);\n\n    if (PolygonFillLayer) {\n      const forwardedProps = forwardProps(this, POLYGON_LAYER.props);\n      // Avoid building the lineColors attribute if wireframe is off\n      const useLineColor = extruded && wireframe;\n      if (!useLineColor) {\n        delete forwardedProps.getLineColor;\n      }\n      // using a legacy API to invalid lineColor attributes\n      forwardedProps.updateTriggers.lineColors = useLineColor;\n\n      return new PolygonFillLayer(\n        forwardedProps,\n        this.getSubLayerProps({\n          id,\n          updateTriggers: forwardedProps.updateTriggers\n        }),\n        layerProps.polygons\n      );\n    }\n    return null;\n  }\n\n  private _renderLineLayers(): (Layer | false)[] | null {\n    const {extruded, stroked} = this.props;\n    const {layerProps} = this.state;\n    const polygonStrokeLayerId = 'polygons-stroke';\n    const lineStringsLayerId = 'linestrings';\n\n    const PolygonStrokeLayer =\n      !extruded &&\n      stroked &&\n      this.shouldRenderSubLayer(polygonStrokeLayerId, layerProps.polygonsOutline.data) &&\n      this.getSubLayerClass(polygonStrokeLayerId, LINE_LAYER.type);\n    const LineStringsLayer =\n      this.shouldRenderSubLayer(lineStringsLayerId, layerProps.lines.data) &&\n      this.getSubLayerClass(lineStringsLayerId, LINE_LAYER.type);\n\n    if (PolygonStrokeLayer || LineStringsLayer) {\n      const forwardedProps = forwardProps(this, LINE_LAYER.props);\n\n      return [\n        PolygonStrokeLayer &&\n          new PolygonStrokeLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: polygonStrokeLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.polygonsOutline\n          ),\n\n        LineStringsLayer &&\n          new LineStringsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id: lineStringsLayerId,\n              updateTriggers: forwardedProps.updateTriggers\n            }),\n            layerProps.lines\n          )\n      ];\n    }\n    return null;\n  }\n\n  private _renderPointLayers(): Layer[] | null {\n    const {pointType} = this.props;\n    const {layerProps, binary} = this.state;\n    let {highlightedObjectIndex} = this.props;\n\n    if (!binary && Number.isFinite(highlightedObjectIndex)) {\n      highlightedObjectIndex = layerProps.points.data.findIndex(\n        d => d.__source.index === highlightedObjectIndex\n      );\n    }\n\n    // Avoid duplicate sub layer ids\n    const types = new Set(pointType.split('+'));\n    const pointLayers: Layer[] = [];\n    for (const type of types) {\n      const id = `points-${type}`;\n      const PointLayerMapping = POINT_LAYER[type];\n      const PointsLayer: _ConstructorOf<Layer> =\n        PointLayerMapping &&\n        this.shouldRenderSubLayer(id, layerProps.points.data) &&\n        this.getSubLayerClass(id, PointLayerMapping.type);\n      if (PointsLayer) {\n        const forwardedProps = forwardProps(this, PointLayerMapping.props);\n        let pointsLayerProps = layerProps.points;\n\n        if (type === 'text' && binary) {\n          // Picking colors are per-point but for text per-character are required\n          // getPickingInfo() maps back to the correct index\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {instancePickingColors, ...rest} = pointsLayerProps.data.attributes;\n          pointsLayerProps = {\n            ...pointsLayerProps,\n            data: {...pointsLayerProps.data, attributes: rest}\n          };\n        }\n\n        pointLayers.push(\n          new PointsLayer(\n            forwardedProps,\n            this.getSubLayerProps({\n              id,\n              updateTriggers: forwardedProps.updateTriggers,\n              highlightedObjectIndex\n            }),\n            pointsLayerProps\n          )\n        );\n      }\n    }\n    return pointLayers;\n  }\n\n  renderLayers() {\n    const {extruded} = this.props;\n\n    const polygonFillLayer = this._renderPolygonLayer();\n    const lineLayers = this._renderLineLayers();\n    const pointLayers = this._renderPointLayers();\n\n    return [\n      // If not extruded: flat fill layer is drawn below outlines\n      !extruded && polygonFillLayer,\n      lineLayers,\n      pointLayers,\n      // If extruded: draw fill layer last for correct blending behavior\n      extruded && polygonFillLayer\n    ];\n  }\n\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    const {binary} = this.state;\n    if (!binary || typeof accessor !== 'function') {\n      return super.getSubLayerAccessor(accessor);\n    }\n\n    return (object, info) => {\n      const {data, index} = info;\n      const feature = binaryToFeatureForAccesor(data as unknown as BinaryFeatureTypes, index);\n      // @ts-ignore (TS2349) accessor is always function\n      return accessor(feature, info);\n    };\n  }\n}\n","// This module implement some utility functions to work with\n// the geojson-binary format defined at loaders.gl:\n// https://github.com/visgl/loaders.gl/blob/master/modules/gis/docs/api-reference/geojson-to-binary.md\n\nimport {\n  BinaryFeatures,\n  BinaryLineFeatures,\n  BinaryPointFeatures,\n  BinaryPolygonFeatures,\n  Feature\n} from '@loaders.gl/schema';\n\nexport type BinaryFeatureTypes = BinaryPointFeatures | BinaryLineFeatures | BinaryPolygonFeatures;\n\ntype FeaureOnlyProperties = Pick<Feature, 'properties'>;\n\n/**\n * Return the feature for an accesor\n */\nexport function binaryToFeatureForAccesor(\n  data: BinaryFeatureTypes,\n  index: number\n): FeaureOnlyProperties | null {\n  if (!data) {\n    return null;\n  }\n\n  const featureIndex = 'startIndices' in data ? (data as any).startIndices[index] : index;\n  const geometryIndex = data.featureIds.value[featureIndex];\n\n  if (featureIndex !== -1) {\n    return getPropertiesForIndex(data, geometryIndex, featureIndex);\n  }\n\n  return null;\n}\n\nfunction getPropertiesForIndex(\n  data: BinaryFeatureTypes,\n  propertiesIndex: number,\n  numericPropsIndex: number\n): FeaureOnlyProperties {\n  const feature = {\n    properties: {...data.properties[propertiesIndex]}\n  };\n\n  for (const prop in data.numericProps) {\n    feature.properties[prop] = data.numericProps[prop].value[numericPropsIndex];\n  }\n\n  return feature;\n}\n\n// Custom picking color to keep binary indexes\nexport function calculatePickingColors(\n  geojsonBinary: BinaryFeatures,\n  encodePickingColor: (id: number, result: number[]) => void\n): Record<string, Uint8ClampedArray | null> {\n  const pickingColors: Record<string, Uint8ClampedArray | null> = {\n    points: null,\n    lines: null,\n    polygons: null\n  };\n  for (const key in pickingColors) {\n    const featureIds = geojsonBinary[key].globalFeatureIds.value;\n    pickingColors[key] = new Uint8ClampedArray(featureIds.length * 3);\n    const pickingColor = [];\n    for (let i = 0; i < featureIds.length; i++) {\n      encodePickingColor(featureIds[i], pickingColor);\n      pickingColors[key]![i * 3 + 0] = pickingColor[0];\n      pickingColors[key]![i * 3 + 1] = pickingColor[1];\n      pickingColors[key]![i * 3 + 2] = pickingColor[2];\n    }\n  }\n\n  return pickingColors;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport {Tesselator} from '@deck.gl/core';\nimport {normalizePath} from './path';\n\nimport type {TypedArray} from '@math.gl/core';\nimport type {PathGeometry, FlatPathGeometry, NormalizedPathGeometry} from './path';\n\nconst START_CAP = 1;\nconst END_CAP = 2;\nconst INVALID = 4;\n\n// This class is set up to allow querying one attribute at a time\n// the way the AttributeManager expects it\nexport default class PathTesselator extends Tesselator<\n  PathGeometry,\n  NormalizedPathGeometry,\n  {\n    fp64?: boolean;\n    resolution?: number;\n    wrapLongitude?: boolean;\n    loop?: boolean;\n  }\n> {\n  constructor(opts) {\n    super({\n      ...opts,\n      attributes: {\n        // Padding covers shaderAttributes for last segment in largest case fp64\n        // additional vertex + hi & low parts, 3 * 6\n        positions: {\n          size: 3,\n          padding: 18,\n          initialize: true,\n          type: opts.fp64 ? Float64Array : Float32Array\n        },\n        segmentTypes: {size: 1, type: Uint8ClampedArray}\n      }\n    });\n  }\n\n  /** Get packed attribute by name */\n  get(attributeName: string): TypedArray | null {\n    return this.attributes[attributeName];\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometryFromBuffer(buffer) {\n    if (this.normalize) {\n      return super.getGeometryFromBuffer(buffer);\n    }\n    // we don't need to read the positions if no normalization\n    return null;\n  }\n\n  /* Implement base Tesselator interface */\n  protected normalizeGeometry(path: PathGeometry): number[][] | PathGeometry {\n    if (this.normalize) {\n      return normalizePath(path, this.positionSize, this.opts.resolution, this.opts.wrapLongitude);\n    }\n    return path;\n  }\n\n  /* Implement base Tesselator interface */\n  protected getGeometrySize(path: NormalizedPathGeometry): number {\n    if (isCut(path)) {\n      let size = 0;\n      for (const subPath of path) {\n        size += this.getGeometrySize(subPath);\n      }\n      return size;\n    }\n    const numPoints = this.getPathLength(path);\n    if (numPoints < 2) {\n      // invalid path\n      return 0;\n    }\n    if (this.isClosed(path)) {\n      // minimum 3 vertices\n      return numPoints < 3 ? 0 : numPoints + 2;\n    }\n    return numPoints;\n  }\n\n  /* Implement base Tesselator interface */\n  protected updateGeometryAttributes(\n    path: NormalizedPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ): void {\n    if (context.geometrySize === 0) {\n      return;\n    }\n    if (path && isCut(path)) {\n      for (const subPath of path) {\n        const geometrySize = this.getGeometrySize(subPath);\n        context.geometrySize = geometrySize;\n        this.updateGeometryAttributes(subPath, context);\n        context.vertexStart += geometrySize;\n      }\n    } else {\n      this._updateSegmentTypes(path, context);\n      this._updatePositions(path, context);\n    }\n  }\n\n  private _updateSegmentTypes(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const segmentTypes = this.attributes.segmentTypes as TypedArray;\n    const isPathClosed = path ? this.isClosed(path) : false;\n    const {vertexStart, geometrySize} = context;\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    segmentTypes.fill(0, vertexStart, vertexStart + geometrySize);\n    if (isPathClosed) {\n      segmentTypes[vertexStart] = INVALID;\n      segmentTypes[vertexStart + geometrySize - 2] = INVALID;\n    } else {\n      segmentTypes[vertexStart] += START_CAP;\n      segmentTypes[vertexStart + geometrySize - 2] += END_CAP;\n    }\n    segmentTypes[vertexStart + geometrySize - 1] = INVALID;\n  }\n\n  private _updatePositions(\n    path: FlatPathGeometry | null,\n    context: {\n      vertexStart: number;\n      geometrySize: number;\n    }\n  ) {\n    const {positions} = this.attributes;\n    if (!positions || !path) {\n      return;\n    }\n    const {vertexStart, geometrySize} = context;\n    const p = new Array(3);\n\n    // positions   --  A0 A1 B0 B1 B2 B3 B0 B1 B2 --\n    // segmentTypes     3  4  4  0  0  0  0  4  4\n    for (let i = vertexStart, ptIndex = 0; ptIndex < geometrySize; i++, ptIndex++) {\n      this.getPointOnPath(path, ptIndex, p);\n      positions[i * 3] = p[0];\n      positions[i * 3 + 1] = p[1];\n      positions[i * 3 + 2] = p[2];\n    }\n  }\n\n  // Utilities\n  /** Returns the number of points in the path */\n  private getPathLength(path: FlatPathGeometry): number {\n    return path.length / this.positionSize;\n  }\n\n  /** Returns a point on the path at the specified index */\n  private getPointOnPath(path: FlatPathGeometry, index: number, target: number[] = []): number[] {\n    const {positionSize} = this;\n    if (index * positionSize >= path.length) {\n      // loop\n      index += 1 - path.length / positionSize;\n    }\n    const i = index * positionSize;\n    target[0] = path[i];\n    target[1] = path[i + 1];\n    target[2] = (positionSize === 3 && path[i + 2]) || 0;\n    return target;\n  }\n\n  // Returns true if the first and last points are identical\n  private isClosed(path: FlatPathGeometry): boolean {\n    if (!this.normalize) {\n      return Boolean(this.opts.loop);\n    }\n    const {positionSize} = this;\n    const lastPointIndex = path.length - positionSize;\n    return (\n      path[0] === path[lastPointIndex] &&\n      path[1] === path[lastPointIndex + 1] &&\n      (positionSize === 2 || path[2] === path[lastPointIndex + 2])\n    );\n  }\n}\n\nfunction isCut(path: NormalizedPathGeometry): path is FlatPathGeometry[] {\n  return Array.isArray(path[0]);\n}\n","import {cutPolylineByGrid, cutPolylineByMercatorBounds} from '@math.gl/polygon';\n\nimport type {NumericArray} from '@math.gl/core';\nimport type {Position} from '@deck.gl/core';\n\nexport type NestedPathGeometry = Position[];\nexport type FlatPathGeometry = NumericArray;\nexport type PathGeometry = NestedPathGeometry | FlatPathGeometry;\nexport type NormalizedPathGeometry = FlatPathGeometry[] | FlatPathGeometry;\n\n/**\n * Flattens a nested path object\n * Cut the feature if needed (globe projection, wrap longitude, etc.)\n * Returns a flat array of path positions, or a list of flat arrays representing multiple paths\n */\nexport function normalizePath(\n  path: PathGeometry,\n  size: number,\n  gridResolution?: number,\n  wrapLongitude?: boolean\n): number[][] | NumericArray {\n  let flatPath: NumericArray;\n  if (Array.isArray(path[0])) {\n    const length = path.length * size;\n    flatPath = new Array(length);\n    for (let i = 0; i < path.length; i++) {\n      for (let j = 0; j < size; j++) {\n        flatPath[i * size + j] = path[i][j] || 0;\n      }\n    }\n  } else {\n    flatPath = path as NumericArray;\n  }\n  if (gridResolution) {\n    return cutPolylineByGrid(flatPath, {size, gridResolution});\n  }\n  if (wrapLongitude) {\n    return cutPolylineByMercatorBounds(flatPath, {size});\n  }\n  return flatPath;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\n\n// calculate line join positions\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  // side of the segment - -1: left, 0: center, 1: right\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n\n  // tangent of the corner\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  // direction of the corner\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  // direction of the segment\n  vec2 dir = isEnd ? dirA : dirB;\n  // direction of the extrusion\n  vec2 perp = isEnd ? perpA : perpB;\n  // length of the segment\n  float L = isEnd ? lenA : lenB;\n\n  // A = angle of the corner\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n\n  // -1: right, 1: left\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n\n  // relative position to the corner:\n  // -1: inside (smaller side of the angle)\n  // 0: center\n  // 1: outside (bigger side of the angle)\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  // trim if inside corner extends further than the line segment\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n\n  // special treatment for start cap and end cap\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n\n  // extend out a triangle to envelope the round cap\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n\n  // Generate variables for fragment shader\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\n\n// In clipspace extrusion, if a line extends behind the camera, clip it to avoid visual artifacts\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    // Extrude in clipspace\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    // Extrude in commonspace\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\nimport PathTesselator from './path-tesselator';\n\nimport vs from './path-layer-vertex.glsl';\nimport fs from './path-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  Color,\n  Accessor,\n  AccessorFunction,\n  Unit,\n  UpdateParameters,\n  GetPickingInfoParams,\n  PickingInfo,\n  DefaultProps\n} from '@deck.gl/core';\nimport type {PathGeometry} from './path';\n\ntype _PathLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /** The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'meters'\n   */\n  widthUnits?: Unit;\n  /**\n   * Path width multiplier.\n   * @default 1\n   */\n  widthScale?: number;\n  /**\n   * The minimum path width in pixels. This prop can be used to prevent the path from getting too thin when zoomed out.\n   * @default 0\n   */\n  widthMinPixels?: number;\n  /**\n   * The maximum path width in pixels. This prop can be used to prevent the path from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n  /**\n   * Type of joint. If `true`, draw round joints. Otherwise draw miter joints.\n   * @default false\n   */\n  jointRounded?: boolean;\n  /**\n   * Type of caps. If `true`, draw round caps. Otherwise draw square caps.\n   * @default false\n   */\n  capRounded?: boolean;\n  /**\n   * The maximum extent of a joint in ratio to the stroke width. Only works if `jointRounded` is `false`.\n   * @default 4\n   */\n  miterLimit?: number;\n  /**\n   * If `true`, extrude the path in screen space (width always faces the camera).\n   * If `false`, the width always faces up (z).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * (Experimental) If `'loop'` or `'open'`, will skip normalizing the coordinates returned by `getPath` and instead assume all paths are to be loops or open paths.\n   * When normalization is disabled, paths must be specified in the format of flat array. Open paths must contain at least 2 vertices and closed paths must contain at least 3 vertices.\n   * @default null\n   */\n  _pathType?: null | 'loop' | 'open';\n  /**\n   * Path geometry accessor.\n   */\n  getPath?: AccessorFunction<DataT, PathGeometry>;\n  /**\n   * Path color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getColor?: Accessor<DataT, Color | Color[]>;\n  /**\n   * Path width accessor.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number | number[]>;\n  /**\n   * @deprecated Use `jointRounded` and `capRounded` instead\n   */\n  rounded?: boolean;\n};\n\nexport type PathLayerProps<DataT = any> = _PathLayerProps<DataT> & LayerProps;\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<PathLayerProps> = {\n  widthUnits: 'meters',\n  widthScale: {type: 'number', min: 0, value: 1},\n  widthMinPixels: {type: 'number', min: 0, value: 0},\n  widthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n  jointRounded: false,\n  capRounded: false,\n  miterLimit: {type: 'number', min: 0, value: 4},\n  billboard: false,\n  _pathType: null,\n\n  getPath: {type: 'accessor', value: object => object.path},\n  getColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n\n  // deprecated props\n  rounded: {deprecatedFor: ['jointRounded', 'capRounded']}\n};\n\nconst ATTRIBUTE_TRANSITION = {\n  enter: (value, chunk) => {\n    return chunk.length ? chunk.subarray(chunk.length - value.length) : value;\n  }\n};\n\n/** Render lists of coordinate points as extruded polylines with mitering. */\nexport default class PathLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_PathLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName = 'PathLayer';\n\n  state!: {\n    model?: Model;\n    pathTesselator: PathTesselator;\n  };\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  get wrapLongitude(): boolean {\n    return false;\n  }\n\n  initializeState() {\n    const noAlloc = true;\n    const attributeManager = this.getAttributeManager();\n    /* eslint-disable max-len */\n    attributeManager!.addInstanced({\n      positions: {\n        size: 3,\n        // Start filling buffer from 1 vertex in\n        vertexOffset: 1,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: ATTRIBUTE_TRANSITION,\n        accessor: 'getPath',\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculatePositions,\n        noAlloc,\n        shaderAttributes: {\n          instanceLeftPositions: {\n            vertexOffset: 0\n          },\n          instanceStartPositions: {\n            vertexOffset: 1\n          },\n          instanceEndPositions: {\n            vertexOffset: 2\n          },\n          instanceRightPositions: {\n            vertexOffset: 3\n          }\n        }\n      },\n      instanceTypes: {\n        size: 1,\n        type: GL.UNSIGNED_BYTE,\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        update: this.calculateSegmentTypes,\n        noAlloc\n      },\n      instanceStrokeWidths: {\n        size: 1,\n        accessor: 'getWidth',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: 1\n      },\n      instanceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        accessor: 'getColor',\n        transition: ATTRIBUTE_TRANSITION,\n        defaultValue: DEFAULT_COLOR\n      },\n      instancePickingColors: {\n        size: 3,\n        type: GL.UNSIGNED_BYTE,\n        accessor: (object, {index, target: value}) =>\n          this.encodePickingColor(object && object.__source ? object.__source.index : index, value)\n      }\n    });\n    /* eslint-enable max-len */\n\n    this.setState({\n      pathTesselator: new PathTesselator({\n        fp64: this.use64bitPositions()\n      })\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n    const {props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager();\n\n    const geometryChanged =\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPath));\n\n    if (geometryChanged) {\n      const {pathTesselator} = this.state;\n      const buffers = (props.data as any).attributes || {};\n\n      pathTesselator.updateGeometry({\n        data: props.data,\n        geometryBuffer: buffers.getPath,\n        buffers,\n        normalize: !props._pathType,\n        loop: props._pathType === 'loop',\n        getGeometry: props.getPath,\n        positionFormat: props.positionFormat,\n        wrapLongitude: props.wrapLongitude,\n        // TODO - move the flag out of the viewport\n        resolution: this.context.viewport.resolution,\n        dataChanged: changeFlags.dataChanged\n      });\n      this.setState({\n        numInstances: pathTesselator.instanceCount,\n        startIndices: pathTesselator.vertexStarts\n      });\n      if (!changeFlags.dataChanged) {\n        // Base `layer.updateState` only invalidates all attributes on data change\n        // Cover the rest of the scenarios here\n        attributeManager!.invalidateAll();\n      }\n    }\n\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      attributeManager!.invalidateAll();\n    }\n  }\n\n  getPickingInfo(params: GetPickingInfoParams): PickingInfo {\n    const info = super.getPickingInfo(params);\n    const {index} = info;\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      info.object = (data as any[]).find(d => d.__source.index === index);\n    }\n    return info;\n  }\n\n  /** Override base Layer method */\n  disablePickingIndex(objectIndex: number) {\n    const {data} = this.props;\n\n    // Check if data comes from a composite layer, wrapped with getSubLayerRow\n    if (data[0] && data[0].__source) {\n      // index decoded from picking color refers to the source index\n      for (let i = 0; i < (data as any[]).length; i++) {\n        if (data[i].__source.index === objectIndex) {\n          this._disablePickingIndex(i);\n        }\n      }\n    } else {\n      super.disablePickingIndex(objectIndex);\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      jointRounded,\n      capRounded,\n      billboard,\n      miterLimit,\n      widthUnits,\n      widthScale,\n      widthMinPixels,\n      widthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        jointType: Number(jointRounded),\n        capType: Number(capRounded),\n        billboard,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        miterLimit,\n        widthMinPixels,\n        widthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    /*\n     *       _\n     *        \"-_ 1                   3                       5\n     *     _     \"o---------------------o-------------------_-o\n     *       -   / \"\"--..__              '.             _.-' /\n     *   _     \"@- - - - - \"\"--..__- - - - x - - - -_.@'    /\n     *    \"-_  /                   \"\"--..__ '.  _,-` :     /\n     *       \"o----------------------------\"\"-o'    :     /\n     *      0,2                            4 / '.  :     /\n     *                                      /   '.:     /\n     *                                     /     :'.   /\n     *                                    /     :  ', /\n     *                                   /     :     o\n     */\n\n    // prettier-ignore\n    const SEGMENT_INDICES = [\n      // start corner\n      0, 1, 2,\n      // body\n      1, 4, 2,\n      1, 3, 4,\n      // end corner\n      3, 5, 4\n    ];\n\n    // [0] position on segment - 0: start, 1: end\n    // [1] side of path - -1: left, 0: center (joint), 1: right\n    // prettier-ignore\n    const SEGMENT_POSITIONS = [\n      // bevel start corner\n      0, 0,\n      // start inner corner\n      0, -1,\n      // start outer corner\n      0, 1,\n      // end inner corner\n      1, -1,\n      // end outer corner\n      1, 1,\n      // bevel end corner\n      1, 0\n    ];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLES,\n        attributes: {\n          indices: new Uint16Array(SEGMENT_INDICES),\n          positions: {value: new Float32Array(SEGMENT_POSITIONS), size: 2}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  protected calculatePositions(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('positions');\n  }\n\n  protected calculateSegmentTypes(attribute) {\n    const {pathTesselator} = this.state;\n\n    attribute.startIndices = pathTesselator.vertexStarts;\n    attribute.value = pathTesselator.get('segmentTypes');\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\n/*\n * vPathPosition represents the relative coordinates of the current fragment on the path segment.\n * vPathPosition.x - position along the width of the path, between [-1, 1]. 0 is the center line.\n * vPathPosition.y - position along the length of the path, between [0, L / width].\n */\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    // if joint is rounded, test distance from the corner\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    // trim miter\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Assume data array is sorted by <accessor>\n// Replaces the specified range with a new subarray\n// Mutates the data array\n// Returns {startRow, endRow} of the inserted items\nexport function replaceInRange({\n  data,\n  getIndex,\n  dataRange,\n  replace\n}: {\n  data: any[];\n  getIndex: (d: any) => number;\n  dataRange: {startRow?: number; endRow?: number};\n  replace: any[];\n}): {startRow: Number; endRow: number} {\n  const {startRow = 0, endRow = Infinity} = dataRange;\n  const count = data.length;\n  let replaceStart = count;\n  let replaceEnd = count;\n  for (let i = 0; i < count; i++) {\n    const row = getIndex(data[i]);\n    if (replaceStart > i && row >= startRow) {\n      replaceStart = i;\n    }\n    if (row >= endRow) {\n      replaceEnd = i;\n      break;\n    }\n  }\n  let index = replaceStart;\n  const dataLengthChanged = replaceEnd - replaceStart !== replace.length;\n  // Save the items after replaceEnd before we overwrite data\n  const endChunk = dataLengthChanged ? data.slice(replaceEnd) : undefined;\n  // Insert new items\n  for (let i = 0; i < replace.length; i++) {\n    data[index++] = replace[i];\n  }\n  if (endChunk) {\n    // Append items after replaceEnd\n    for (let i = 0; i < endChunk.length; i++) {\n      data[index++] = endChunk[i];\n    }\n    // Trim additional items\n    data.length = index;\n  }\n\n  return {\n    startRow: replaceStart,\n    endRow: replaceStart + replace.length\n  };\n}\n","export default function e(t){switch(t&&t.type||null){case\"FeatureCollection\":return t.features=t.features.reduce(function(t,r){return t.concat(e(r))},[]),t;case\"Feature\":return t.geometry?e(t.geometry).map(function(e){var r={type:\"Feature\",properties:JSON.parse(JSON.stringify(t.properties)),geometry:e};return void 0!==t.id&&(r.id=t.id),r}):[t];case\"MultiPoint\":return t.coordinates.map(function(e){return{type:\"Point\",coordinates:e}});case\"MultiPolygon\":return t.coordinates.map(function(e){return{type:\"Polygon\",coordinates:e}});case\"MultiLineString\":return t.coordinates.map(function(e){return{type:\"LineString\",coordinates:e}});case\"GeometryCollection\":return t.geometries.map(e).reduce(function(e,t){return e.concat(t)},[]);case\"Point\":case\"Polygon\":case\"LineString\":return[t]}}\n//# sourceMappingURL=index.es.js.map\n","var traverse = module.exports = function (obj) {\n    return new Traverse(obj);\n};\n\nfunction Traverse (obj) {\n    this.value = obj;\n}\n\nTraverse.prototype.get = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            node = undefined;\n            break;\n        }\n        node = node[key];\n    }\n    return node;\n};\n\nTraverse.prototype.has = function (ps) {\n    var node = this.value;\n    for (var i = 0; i < ps.length; i ++) {\n        var key = ps[i];\n        if (!node || !hasOwnProperty.call(node, key)) {\n            return false;\n        }\n        node = node[key];\n    }\n    return true;\n};\n\nTraverse.prototype.set = function (ps, value) {\n    var node = this.value;\n    for (var i = 0; i < ps.length - 1; i ++) {\n        var key = ps[i];\n        if (!hasOwnProperty.call(node, key)) node[key] = {};\n        node = node[key];\n    }\n    node[ps[i]] = value;\n    return value;\n};\n\nTraverse.prototype.map = function (cb) {\n    return walk(this.value, cb, true);\n};\n\nTraverse.prototype.forEach = function (cb) {\n    this.value = walk(this.value, cb, false);\n    return this.value;\n};\n\nTraverse.prototype.reduce = function (cb, init) {\n    var skip = arguments.length === 1;\n    var acc = skip ? this.value : init;\n    this.forEach(function (x) {\n        if (!this.isRoot || !skip) {\n            acc = cb.call(this, acc, x);\n        }\n    });\n    return acc;\n};\n\nTraverse.prototype.paths = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.path); \n    });\n    return acc;\n};\n\nTraverse.prototype.nodes = function () {\n    var acc = [];\n    this.forEach(function (x) {\n        acc.push(this.node);\n    });\n    return acc;\n};\n\nTraverse.prototype.clone = function () {\n    var parents = [], nodes = [];\n    \n    return (function clone (src) {\n        for (var i = 0; i < parents.length; i++) {\n            if (parents[i] === src) {\n                return nodes[i];\n            }\n        }\n        \n        if (typeof src === 'object' && src !== null) {\n            var dst = copy(src);\n            \n            parents.push(src);\n            nodes.push(dst);\n            \n            forEach(objectKeys(src), function (key) {\n                dst[key] = clone(src[key]);\n            });\n            \n            parents.pop();\n            nodes.pop();\n            return dst;\n        }\n        else {\n            return src;\n        }\n    })(this.value);\n};\n\nfunction walk (root, cb, immutable) {\n    var path = [];\n    var parents = [];\n    var alive = true;\n    \n    return (function walker (node_) {\n        var node = immutable ? copy(node_) : node_;\n        var modifiers = {};\n        \n        var keepGoing = true;\n        \n        var state = {\n            node : node,\n            node_ : node_,\n            path : [].concat(path),\n            parent : parents[parents.length - 1],\n            parents : parents,\n            key : path.slice(-1)[0],\n            isRoot : path.length === 0,\n            level : path.length,\n            circular : null,\n            update : function (x, stopHere) {\n                if (!state.isRoot) {\n                    state.parent.node[state.key] = x;\n                }\n                state.node = x;\n                if (stopHere) keepGoing = false;\n            },\n            'delete' : function (stopHere) {\n                delete state.parent.node[state.key];\n                if (stopHere) keepGoing = false;\n            },\n            remove : function (stopHere) {\n                if (isArray(state.parent.node)) {\n                    state.parent.node.splice(state.key, 1);\n                }\n                else {\n                    delete state.parent.node[state.key];\n                }\n                if (stopHere) keepGoing = false;\n            },\n            keys : null,\n            before : function (f) { modifiers.before = f },\n            after : function (f) { modifiers.after = f },\n            pre : function (f) { modifiers.pre = f },\n            post : function (f) { modifiers.post = f },\n            stop : function () { alive = false },\n            block : function () { keepGoing = false }\n        };\n        \n        if (!alive) return state;\n        \n        function updateState() {\n            if (typeof state.node === 'object' && state.node !== null) {\n                if (!state.keys || state.node_ !== state.node) {\n                    state.keys = objectKeys(state.node)\n                }\n                \n                state.isLeaf = state.keys.length == 0;\n                \n                for (var i = 0; i < parents.length; i++) {\n                    if (parents[i].node_ === node_) {\n                        state.circular = parents[i];\n                        break;\n                    }\n                }\n            }\n            else {\n                state.isLeaf = true;\n                state.keys = null;\n            }\n            \n            state.notLeaf = !state.isLeaf;\n            state.notRoot = !state.isRoot;\n        }\n        \n        updateState();\n        \n        // use return values to update if defined\n        var ret = cb.call(state, state.node);\n        if (ret !== undefined && state.update) state.update(ret);\n        \n        if (modifiers.before) modifiers.before.call(state, state.node);\n        \n        if (!keepGoing) return state;\n        \n        if (typeof state.node == 'object'\n        && state.node !== null && !state.circular) {\n            parents.push(state);\n            \n            updateState();\n            \n            forEach(state.keys, function (key, i) {\n                path.push(key);\n                \n                if (modifiers.pre) modifiers.pre.call(state, state.node[key], key);\n                \n                var child = walker(state.node[key]);\n                if (immutable && hasOwnProperty.call(state.node, key)) {\n                    state.node[key] = child.node;\n                }\n                \n                child.isLast = i == state.keys.length - 1;\n                child.isFirst = i == 0;\n                \n                if (modifiers.post) modifiers.post.call(state, child);\n                \n                path.pop();\n            });\n            parents.pop();\n        }\n        \n        if (modifiers.after) modifiers.after.call(state, state.node);\n        \n        return state;\n    })(root).node;\n}\n\nfunction copy (src) {\n    if (typeof src === 'object' && src !== null) {\n        var dst;\n        \n        if (isArray(src)) {\n            dst = [];\n        }\n        else if (isDate(src)) {\n            dst = new Date(src.getTime ? src.getTime() : src);\n        }\n        else if (isRegExp(src)) {\n            dst = new RegExp(src);\n        }\n        else if (isError(src)) {\n            dst = { message: src.message };\n        }\n        else if (isBoolean(src)) {\n            dst = new Boolean(src);\n        }\n        else if (isNumber(src)) {\n            dst = new Number(src);\n        }\n        else if (isString(src)) {\n            dst = new String(src);\n        }\n        else if (Object.create && Object.getPrototypeOf) {\n            dst = Object.create(Object.getPrototypeOf(src));\n        }\n        else if (src.constructor === Object) {\n            dst = {};\n        }\n        else {\n            var proto =\n                (src.constructor && src.constructor.prototype)\n                || src.__proto__\n                || {}\n            ;\n            var T = function () {};\n            T.prototype = proto;\n            dst = new T;\n        }\n        \n        forEach(objectKeys(src), function (key) {\n            dst[key] = src[key];\n        });\n        return dst;\n    }\n    else return src;\n}\n\nvar objectKeys = Object.keys || function keys (obj) {\n    var res = [];\n    for (var key in obj) res.push(key)\n    return res;\n};\n\nfunction toS (obj) { return Object.prototype.toString.call(obj) }\nfunction isDate (obj) { return toS(obj) === '[object Date]' }\nfunction isRegExp (obj) { return toS(obj) === '[object RegExp]' }\nfunction isError (obj) { return toS(obj) === '[object Error]' }\nfunction isBoolean (obj) { return toS(obj) === '[object Boolean]' }\nfunction isNumber (obj) { return toS(obj) === '[object Number]' }\nfunction isString (obj) { return toS(obj) === '[object String]' }\n\nvar isArray = Array.isArray || function isArray (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nvar forEach = function (xs, fn) {\n    if (xs.forEach) return xs.forEach(fn)\n    else for (var i = 0; i < xs.length; i++) {\n        fn(xs[i], i, xs);\n    }\n};\n\nforEach(objectKeys(Traverse.prototype), function (key) {\n    traverse[key] = function (obj) {\n        var args = [].slice.call(arguments, 1);\n        var t = new Traverse(obj);\n        return t[key].apply(t, args);\n    };\n});\n\nvar hasOwnProperty = Object.hasOwnProperty || function (obj, key) {\n    return key in obj;\n};\n"],"names":["Extent","bbox","this","_bbox","Infinity","_valid","module","exports","prototype","include","ll","Math","min","max","equals","_","other","center","union","contains","_fastContains","lon","lat","intersect","Function","body","polygon","type","coordinates","list","_flatten","Array","isArray","length","reduce","acc","item","concat","push","geojsonNormalize","geojsonFlatten","flatten","default","normalized","features","forEach","feature","geometry","geojsonCoords","traverse","extent","geojsonTypesByDataAttributes","geometries","dataAttributes","Object","keys","getExtent","ext","coords","i","bboxify","map","value","some","attribute","indexOf","update","gj","types","properties","Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeometryCollection","Feature","FeatureCollection","noop","DEFAULT_TEXTURE_PARAMETERS","resizeImage","ctx","imageData","maxWidth","maxHeight","resizeRatio","width","height","floor","data","canvas","clearRect","drawImage","getIconId","icon","id","url","buildRowMapping","mapping","columns","yOffset","xOffset","x","y","IconManager","constructor","gl","onUpdate","onError","_defineProperty","finalize","_this$_texture","_texture","delete","getTexture","_externalTexture","getIconMapping","_autoPacking","_mapping","setProps","loadOptions","autoPacking","iconAtlas","iconMapping","textureParameters","_this$_texture2","_loadOptions","undefined","_textureParameters","isLoaded","_pendingCount","packIcons","getIcon","document","icons","values","cachedIcons","iterable","objectInfo","createIterable","object","index","Error","source","sourceIndex","getDiffIcons","rowHeight","canvasHeight","buffer","canvasWidth","number","pow","ceil","log2","buildMapping","_buffer","_canvasWidth","_rowHeight","_xOffset","_yOffset","_canvasHeight","Texture2D","parameters","texture","oldWidth","oldHeight","newTexture","copyToTexture","targetY","resizeTexture","_canvas","createElement","_loadIcons","getContext","willReadFrequently","load","then","iconDef","setSubImageData","generateMipmap","catch","error","finally","DEFAULT_COLOR","defaultProps","async","sizeScale","billboard","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","alphaCutoff","getPosition","position","getColor","getSize","getAngle","getPixelOffset","onIconError","optional","ignore","IconLayer","Layer","args","getShaders","super","vs","fs","modules","project32","picking","initializeState","state","iconManager","context","_onUpdate","bind","_onError","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceOffsets","transform","getInstanceOffset","instanceIconFrames","getInstanceIconFrame","instanceColorModes","getInstanceColorMode","instanceColors","props","colorFormat","instanceAngles","instancePixelOffset","updateState","params","oldProps","changeFlags","attributeManager","prePacked","internalState","isAsyncPropLoading","invalidate","dataChanged","updateTriggersChanged","all","extensionsChanged","_this$state$model","model","_getModel","invalidateAll","finalizeState","draw","uniforms","iconsTexture","setUniforms","iconsTextureDim","UNIT","Model","Geometry","drawMode","attributes","positions","Float32Array","isInstanced","setNeedsRedraw","evt","_this$getCurrentLayer","getCurrentLayer","log","message","anchorX","anchorY","mask","DEFAULT_BUFFER","EMPTY_ARRAY","MultiIconLayer","instancePickingColors","target","encodePickingColor","outlineColor","isFinite","setState","sdf","outlineWidth","warn","smoothing","outlineBuffer","sdfBuffer","gamma","Boolean","from","flatMap","getIconOffsets","offsets","INF","TinySDF","fontSize","radius","cutoff","fontFamily","fontWeight","fontStyle","_createCanvas","font","textBaseline","textAlign","fillStyle","gridOuter","Float64Array","gridInner","f","z","v","Uint16Array","char","glyphAdvance","actualBoundingBoxAscent","actualBoundingBoxDescent","actualBoundingBoxLeft","actualBoundingBoxRight","measureText","glyphTop","glyphWidth","glyphHeight","len","Uint8ClampedArray","glyph","glyphLeft","fillText","imgData","getImageData","fill","a","j","d","edt","sqrt","round","x0","y0","gridSize","edt1d","grid","offset","stride","q","k","s","q2","r","qr","SINGLE_LINE","getTextWidth","text","startIndex","endIndex","_mapping$character","layoutWidth","breakAll","rowStartCharIndex","rowOffsetLeft","textWidth","autoWrapping","wordBreak","result","groupStartCharIndex","groupEndCharIndex","groupWidth","breakWord","transformRow","line","leftOffsets","rowSize","character","frame","layoutHeight","codePointAt","LRUCache","limit","get","key","_cache","_deleteOrder","_appendOrder","set","_order","splice","DEFAULT_FONT_SETTINGS","characterSet","charSet","String","fromCharCode","getDefaultCharacterSet","cache","populateAlphaChannel","alphaChannel","setTextStyle","FontAtlasManager","_atlas","scale","assign","_key","_getKey","cacheKey","newCharSet","Set","cachedFontAtlas","has","getNewChars","fontAtlas","_generateFontAtlas","getFontWidth","fontHeight","maxCanvasWidth","row","putImageData","tinySDF","layoutOffsetY","createImageData","padding","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","instanceRects","instancePixelOffsets","instanceFillColors","instanceLineColors","instanceLineWidths","stroked","vertexCount","TEXT_ANCHOR","start","middle","end","ALIGNMENT_BASELINE","top","bottom","background","getBackgroundColor","getBorderColor","getBorderWidth","backgroundPadding","lineHeight","fontSettings","compare","getText","getTextAnchor","getAlignmentBaseline","backgroundColor","deprecatedFor","TextLayer","CompositeLayer","transformParagraph","fontAtlasManager","rowWidth","numCharacters","rowOffset","styleVersion","_updateText","_updateFontAtlas","getPickingInfo","info","fontProps","_attributes","textBuffer","numInstances","startIndices","autoCharacterSet","texts","characterCount","bytesPerElement","BYTES_PER_ELEMENT","elementStride","elementOffset","codes","ArrayType","codesAtIndex","subarray","fromCodePoint","apply","add","charCode","getTextFromBuffer","ArrayBuffer","isView","paragraph","characters","autoWrappingEnabled","rowOffsetTop","lineStartIndex","lineEndIndex","rows","rowIndex","rowStart","rowEnd","_iconMapping$char","renderLayers","_dataDiff","transitions","updateTriggers","CharactersLayerClass","getSubLayerClass","BackgroundLayerClass","getSubLayerProps","autoHighlight","fontAtlasCacheLimit","assert","setFontAtlasCacheLimit","POINT_LAYER","circle","ScatterplotLayer","filled","lineWidthMaxPixels","lineWidthMinPixels","lineWidthScale","lineWidthUnits","pointRadiusMaxPixels","pointRadiusMinPixels","pointRadiusScale","pointRadiusUnits","pointAntialiasing","pointBillboard","getPointRadius","iconSizeMaxPixels","iconSizeMinPixels","iconSizeScale","iconSizeUnits","iconAlphaCutoff","iconBillboard","getIconAngle","getIconColor","getIconPixelOffset","getIconSize","textSizeMaxPixels","textSizeMinPixels","textSizeScale","textSizeUnits","textBackground","textBackgroundPadding","textFontFamily","textFontWeight","textLineHeight","textMaxWidth","textOutlineColor","textOutlineWidth","textWordBreak","textCharacterSet","textBillboard","textFontSettings","getTextAngle","getTextColor","getTextPixelOffset","getTextSize","getTextAlignmentBaseline","getTextBackgroundColor","getTextBorderColor","getTextBorderWidth","LINE_LAYER","PathLayer","lineJointRounded","lineCapRounded","lineMiterLimit","lineBillboard","POLYGON_LAYER","SolidPolygonLayer","extruded","wireframe","elevationScale","material","_full3d","getElevation","getDefaultProps","forwardProps","layer","sourceKey","targetKey","startsWith","getSubLayerAccessor","separateGeojsonFeatures","wrapFeature","dataRange","separated","pointFeatures","lineFeatures","polygonFeatures","polygonOutlineFeatures","startRow","endRow","featureIndex","separateGeometry","sourceFeature","sourceFeatureIndex","nestLevel","COORDINATE_NEST_LEVEL","validateGeometry","point","path","getCoordinates","FEATURE_TYPES","pointType","getRadius","GeoJsonLayer","layerProps","binary","_updateStateBinary","_updateStateJSON","geojsonBinary","points","lines","polygons","polygonsOutline","customPickingColors","pickingColors","featureIds","globalFeatureIds","pickingColor","calculatePickingColors","numericProps","pathIndices","getPath","_pathType","polygonIndices","getPolygon","_normalize","triangles","indices","primitivePolygonIndices","createLayerPropsFromBinary","geojson","getGeojsonFeatures","getSubLayerRow","newFeatures","featuresDiff","oldFeatures","slice","partialFeatures","replaceInRange","getIndex","__source","replace","createLayerPropsFromFeatures","sourceLayer","featureType","find","ft","_updateAutoHighlight","pointLayerIdPrefix","sourceIsPoints","getSubLayers","updateAutoHighlight","_renderPolygonLayer","PolygonFillLayer","shouldRenderSubLayer","forwardedProps","useLineColor","lineColors","_renderLineLayers","polygonStrokeLayerId","lineStringsLayerId","PolygonStrokeLayer","LineStringsLayer","_renderPointLayers","highlightedObjectIndex","findIndex","split","pointLayers","PointLayerMapping","PointsLayer","pointsLayerProps","rest","polygonFillLayer","geometryIndex","propertiesIndex","numericPropsIndex","prop","getPropertiesForIndex","binaryToFeatureForAccesor","PathTesselator","Tesselator","opts","initialize","segmentTypes","attributeName","getGeometryFromBuffer","normalize","normalizeGeometry","gridResolution","wrapLongitude","flatPath","cutPolylineByGrid","cutPolylineByMercatorBounds","normalizePath","positionSize","resolution","getGeometrySize","isCut","subPath","numPoints","getPathLength","isClosed","updateGeometryAttributes","geometrySize","vertexStart","_updateSegmentTypes","_updatePositions","isPathClosed","p","ptIndex","getPointOnPath","loop","lastPointIndex","widthUnits","widthScale","widthMinPixels","widthMaxPixels","jointRounded","capRounded","miterLimit","getWidth","rounded","ATTRIBUTE_TRANSITION","enter","chunk","vertexOffset","calculatePositions","noAlloc","shaderAttributes","instanceLeftPositions","instanceStartPositions","instanceEndPositions","instanceRightPositions","instanceTypes","calculateSegmentTypes","instanceStrokeWidths","pathTesselator","buffers","updateGeometry","geometryBuffer","getGeometry","positionFormat","viewport","instanceCount","vertexStarts","disablePickingIndex","objectIndex","_disablePickingIndex","jointType","capType","radiusUnits","radiusScale","radiusMinPixels","radiusMaxPixels","antialiasing","strokeWidth","outline","instanceRadius","count","replaceStart","replaceEnd","endChunk","e","t","JSON","parse","stringify","obj","Traverse","walk","root","cb","immutable","parents","alive","walker","node_","node","copy","modifiers","keepGoing","parent","isRoot","level","circular","stopHere","remove","before","after","pre","post","stop","block","objectKeys","isLeaf","notLeaf","notRoot","ret","call","child","hasOwnProperty","isLast","isFirst","pop","src","dst","toS","Date","getTime","RegExp","isError","isBoolean","isNumber","isString","create","getPrototypeOf","proto","__proto__","T","ps","init","skip","arguments","paths","nodes","clone","res","toString","xs","fn"],"sourceRoot":""}
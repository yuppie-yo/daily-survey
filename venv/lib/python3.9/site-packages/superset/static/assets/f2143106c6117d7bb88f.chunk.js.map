{"version":3,"file":"f2143106c6117d7bb88f.chunk.js","mappings":"mMAoBO,SAASA,EAAYC,EAAOC,GACjC,MAAMC,EAAgB,CAAC,EACvB,IAAK,MAAMC,KAAOH,EACXC,EAAWG,SAASD,KACvBD,EAAcC,GAAOH,EAAMG,IAG/B,OAAOD,CACR,CCOc,MAAeG,UAGpBC,EAAAA,EAAgEC,WAAAA,IAAAC,GAAA,SAAAA,IAAAC,EAAAA,EAAAA,GAAA,qBAQxEC,0BAAAA,CAA2BC,GACzBC,MAAMC,gBAAgBC,KAAKC,SAE3BD,KAAKE,SAAS,CAEZC,YAAalB,EAAae,KAAKP,YAAoBW,WAAYP,EAAWQ,KAAKnB,OAC/EW,cAEH,CAEDS,WAAAA,CAAYC,GACVT,MAAMQ,YAAYC,GAClB,MAAM,YAACC,GAAeD,EACtB,GAAIC,EAAYC,kBAAmB,CACjC,MAAMC,EAAUV,KAAKW,WAAW,CAAC,GAC7BD,GAAWA,EAAQE,UACrBF,EAAQE,QAAQC,oBAAsB,GAExCb,KAAKc,cAAcJ,EACpB,CAGDV,KAAKe,mBACN,CAEDC,gBAAAA,CAAiBC,GAGfjB,KAAKE,SAAS,CAACe,qBAChB,CAEDC,aAAAA,GACE,OAAOlB,KAAKmB,sBAAuBC,qBACpC,CAEDC,iBAAAA,GAIE,MAAM,SAACC,EAAD,cAAWC,EAAX,GAA0BC,GAAMxB,KAAKC,QAO3C,OANuBwB,OAAOC,OAAOD,OAAOE,OAAO3B,KAAKd,OAAQ,CAC9DoC,WACAC,gBACAK,cAAe,EACfC,kBAAkBC,EAAAA,EAAAA,GAAiBN,IAGtC,CAEDV,aAAAA,CAAcJ,GAEb,CAUDqB,kBAAAA,CACEC,EACAC,EAAkD,CAAC,GAEnD,MAAM,MAAC/C,EAAD,SAAQgD,EAAR,YAAkB1B,GAAewB,GACjC,WAACG,GAAa,EAAd,UAAqBC,GAAaH,GAClC,YAAC9B,GAAeH,KAAKqC,OACpBnD,MAAOoD,EAAR,UAAmBC,EAAY,IAAMH,GACrC,sBAACI,GAAyBhC,EAChC,GAAIA,EAAYiC,YACd,OAAO,EAET,GAAID,EAAuB,CACzB,GAAIA,EAAsBE,IACxB,OAAO,EAET,IAAK,MAAMC,KAAYJ,EACrB,GAAIC,EAAsBG,GACxB,OAAO,CAGZ,CACD,GAAIR,EACF,QAAI3B,EAAYC,oBAKTmC,EAAAA,EAAAA,IAAa,CAClBV,WACAW,SAAU3D,EACViB,cACA2C,UAAY9C,KAAKP,YAAoBW,aAIzC,IAAK,MAAM2C,KAAQT,EACjB,GAAIpD,EAAM6D,KAAUb,EAASa,GAC3B,OAAO,EAGX,OAAO,CACR,CAQDC,kBAAAA,CAAmBD,GACjB,MAAM,kBAAC9B,GAAqBjB,KAAKqC,MACjC,OAAKU,EAIE9B,QAAiDgC,IAA5BhC,EAAkB8B,IAiBlD,SAAuBG,GACrB,IAAIC,GAAU,EAEd,IAAK,MAAM9D,KAAO6D,EAAK,CACrBC,GAAU,EACV,KACD,CACD,OAAOA,CACR,CA3BaC,CAAcnC,EAGzB,CAKDoC,oBAAAA,GACE,OAAO,IAAIC,EAAAA,EAAiBtD,KAAKC,QAAQuB,GAAI,CAC3C+B,GAAIvD,KAAKd,MAAMqE,GACfC,MAAOxD,KAAKC,QAAQuD,OAEvB,G,OA3I2BjE,EAAAA,YAIT,mB,uDCnBd,MAAMkE,EAAwB,CACnCC,IAAK,EACLC,KAAM,EACNC,IAAK,EACLC,IAAK,GAGP,SAASC,EAAWC,EAAMC,GACxB,OAAOD,EAAOC,CACf,CAED,SAASC,EAAWF,EAAMC,GACxB,OAAOA,EAAMD,EAAOC,EAAMD,CAC3B,CAED,SAASG,EAAWH,EAAMC,GACxB,OAAOA,EAAMD,EAAOC,EAAMD,CAC3B,CAuCM,SAASI,EAAaC,EAAazB,EAAU1C,GAClD,MAAMoE,EAAKZ,EAAsBW,IAAgBX,EAAsBC,IAEvE,OADAf,EAeF,SAAsBA,EAAU1C,EAAU,CAAC,GACzC,OAAIqE,OAAOC,SAAS5B,GACXA,EAEF6B,IACLvE,EAAQwE,MAAQD,EAAGC,MACZ9B,EAAS6B,EAAGE,OAAQzE,GAE9B,CAvBY0E,CAAahC,EAAU1C,GAC1BoE,GACN,KAAKZ,EAAsBG,IACzB,OAAOgB,GAfN,SAAgBA,EAAKjC,GAC1B,GAAI2B,OAAOC,SAAS5B,GAClB,OAAOiC,EAAIC,OAASlC,EAAW,KAEjC,MAAMmC,EAAWF,EAAIG,IAAIpC,GAAUqC,OAAOV,OAAOC,UAEjD,OAAOO,EAASD,OAASC,EAASG,OAAOf,EAAYgB,KAAY,IAClE,CAQmBC,CAAOP,EAAKjC,GAC5B,KAAKc,EAAsBC,IACzB,OAAOkB,GAnCN,SAAgBA,EAAKjC,GAC1B,GAAI2B,OAAOC,SAAS5B,GAClB,OAAOiC,EAAIC,OAASD,EAAIC,OAASlC,EAAW,KAE9C,MAAMmC,EAAWF,EAAIG,IAAIpC,GAAUqC,OAAOV,OAAOC,UAEjD,OAAOO,EAASD,OAASC,EAASG,OAAOnB,EAAY,GAAK,IAC3D,CA4BmBsB,CAAOR,EAAKjC,GAC5B,KAAKc,EAAsBE,KACzB,OAAOiB,GA9CN,SAAiBA,EAAKjC,GAC3B,GAAI2B,OAAOC,SAAS5B,GAClB,OAAOiC,EAAIC,OAASlC,EAAW,KAEjC,MAAMmC,EAAWF,EAAIG,IAAIpC,GAAUqC,OAAOV,OAAOC,UAEjD,OAAOO,EAASD,OAASC,EAASG,OAAOnB,EAAY,GAAKgB,EAASD,OAAS,IAC7E,CAuCmBQ,CAAQT,EAAKjC,GAC7B,KAAKc,EAAsBI,IACzB,OAAOe,GA9BN,SAAgBA,EAAKjC,GAC1B,GAAI2B,OAAOC,SAAS5B,GAClB,OAAOiC,EAAIC,OAASlC,EAAW,KAEjC,MAAMmC,EAAWF,EAAIG,IAAIpC,GAAUqC,OAAOV,OAAOC,UAEjD,OAAOO,EAASD,OAASC,EAASG,OAAOhB,GAAY,KAAa,IACnE,CAuBmBqB,CAAOV,EAAKjC,GAC5B,QACE,OAAO,KAEZ,CAYM,SAAS4C,EAAiBC,EAAUvF,EAAU,CAAC,GACpD,OAAO2E,IACL3E,EAAQwF,QAAUb,EAAIG,KAAIP,GAAMA,EAAGC,QAC5Be,EACLZ,EAAIG,KAAIP,GAAMA,EAAGE,SACjBzE,GAGL,C,gECvFD,MAAMyF,EAAkBC,GAAUA,EAAOd,OAOnCe,EAAmBC,GAAOA,EAAIF,OAE9BG,EAAkBD,GAAOA,EAAIpB,MAG7BsB,EAAYA,CAACC,EAAGC,IAAOD,EAAIC,GAAK,EAAID,EAAIC,EAAI,EAAID,GAAKC,EAAI,EAAIC,IAE7DC,EAAe,CACnBX,SAAUE,EACVU,UAAWR,EACXS,SAAUP,EACVQ,WAAY,MASC,MAAMC,EAUnB9G,WAAAA,CAAY+G,EAAO,GAAItH,EAAsCiH,IAAcxG,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,yBAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,+BAAAA,EAAAA,EAAAA,GAAA,2BAAAA,EAAAA,EAAAA,GAAA,sBACzEK,KAAKyG,eAAiBzG,KAAK0G,kBAAkBF,EAAMtH,GACnDc,KAAK2G,sBACL3G,KAAK4G,OAAS5G,KAAK6G,WACpB,CASDH,iBAAAA,CAAkBF,EAAMtH,GACtB,MAAM,SACJsG,EAAWE,EADP,UAEJU,EAAYR,EAFR,SAGJS,EAAWP,EAHP,WAIJQ,GACEpH,EAEE4H,EAAkC,mBAAfR,EACnBS,EAAWP,EAAK3B,OAChB4B,EAAkC,GACxC,IAAIhC,EAAQ,EAEZ,IAAK,IAAIuC,EAAW,EAAGA,EAAWD,EAAUC,IAAY,CACtD,MAAMnB,EAAMW,EAAKQ,GACXrB,EAASS,EAAUP,GACnBoB,EAAIZ,EAASR,GAEbqB,EAAiBJ,EAAYnB,EAAOX,OAAOsB,GAAcX,EAE/DE,EAAIqB,eAAiBJ,EAAYI,EAAiB,KAElD,MAAMC,EAAQD,EAAerC,OAASW,EAAS0B,GAAkB,KAE7DC,UAEFV,EAAehC,GAAS,CACtBwC,EAAG3C,OAAOC,SAAS0C,GAAKA,EAAID,EAC5BG,QACAC,OAAQF,EAAerC,QAEzBJ,IAEH,CACD,OAAOgC,CACR,CAEDY,kBAAAA,CAAmBC,GACjB,MAAMC,EAAMvH,KAAKwH,WAAW3C,OAC5B,GAAI0C,EAAM,EACR,MAAO,CAAC,EAAG,GAGb,MAAOE,EAAOC,GAASJ,EAAgBvC,KAAI4C,IAAKC,EAAAA,EAAAA,IAAMD,EAAG,EAAG,OAK5D,MAAO,CAHUE,KAAKC,KAAML,EAAQ,KAAQF,EAAM,IACjCM,KAAKE,MAAOL,EAAQ,KAAQH,EAAM,IAGpD,CAODV,SAAAA,GACE,MAAMD,EAAS,CAAC,EAChB,IAAK,MAAMf,KAAO7F,KAAKyG,eACrBG,EAAOf,EAAIoB,GAAKpB,EAElB,OAAOe,CACR,CAODD,mBAAAA,GACE,IAAIqB,EAAW,EACXC,EAAW,EACXC,EAtHiB,cAuHjBC,EAAa,EACjB,IAAK,MAAMC,KAAKpI,KAAKyG,eACnBuB,EAAWA,EAAWI,EAAEhB,OAASY,EAAWI,EAAEhB,OAC9Ca,EAAWA,EAAWG,EAAEjB,MAAQc,EAAWG,EAAEjB,MAC7Ce,EAAWA,EAAWE,EAAEjB,MAAQe,EAAWE,EAAEjB,MAC7CgB,GAAcC,EAAEhB,OAElBpH,KAAKgI,SAAWA,EAChBhI,KAAKiI,SAAWA,EAChBjI,KAAKkI,SAAWA,EAChBlI,KAAKmI,WAAaA,CACnB,CASDE,aAAAA,CAAcf,GAIZ,GAHKtH,KAAKwH,aACRxH,KAAKwH,WAAaxH,KAAKyG,eAAe6B,MAAK,CAACtC,EAAGC,IAAMF,EAAUC,EAAEmB,MAAOlB,EAAEkB,WAEvEnH,KAAKwH,WAAW3C,OAEnB,MAAO,GAET,IAAI0D,EAAW,EACXC,EAAWxI,KAAKwH,WAAW3C,OAAS,EAExC,GAAI4D,MAAMC,QAAQpB,GAAkB,CAClC,MAAMqB,EAAW3I,KAAKqH,mBAAmBC,GACzCiB,EAAWI,EAAS,GACpBH,EAAWG,EAAS,EACrB,CAED,MAAO,CAAC3I,KAAKwH,WAAWe,GAAUpB,MAAOnH,KAAKwH,WAAWgB,GAAUrB,MACpE,CAEDyB,qBAAAA,CAAsBC,GAAgBpB,EAAQ,EAAGC,EAAQ,KAAO,IAI9D,GAHK1H,KAAKwH,aACRxH,KAAKwH,WAAaxH,KAAKyG,eAAe6B,MAAK,CAACtC,EAAGC,IAAMF,EAAUC,EAAEmB,MAAOlB,EAAEkB,WAEvEnH,KAAKwH,WAAW3C,OACnB,MAAO,GAET,MAAMiE,EAAY9I,KAAKqH,mBAAmB,CAACI,EAAOC,IAElD,OAAO1H,KAAK+I,gBAAgBF,EAAOC,EACpC,CAEDC,eAAAA,CAAgBC,GAAoBT,EAAUC,IAC5C,MAAMhC,EAAOxG,KAAKwH,WAElB,OAAQwB,GACN,IAAK,WACL,IAAK,SASL,QACE,MAAO,CAACxC,EAAK+B,GAAUpB,MAAOX,EAAKgC,GAAUrB,OAP/C,IAAK,WACH,OAAO8B,EAAAA,EAAAA,IAAkBzC,EAAK0C,MAAMX,EAAUC,EAAW,IAAIW,GAAKA,EAAEhC,QAEtE,IAAK,UACH,OAAOiC,EAAAA,EAAAA,IAAiB5C,GAAM2C,GAAKA,EAAEhC,QAK1C,E,gFCjMI,SAASkC,EAASC,EAAQC,EAAOC,GACtC,MAAMX,EAAQW,EAId,OAHAX,EAAMS,OAAS,IAAMA,EACrBT,EAAMU,MAAQ,IAAMA,EAEbV,CACR,CAKM,SAASY,EAAiBH,EAAQC,GAGvC,OAAOF,EAASC,EAAQC,GAFFpC,GAgGjB,SAAuBmC,EAAQC,EAAOpC,GAC3C,MAAMuC,EAAcJ,EAAO,GAAKA,EAAO,GACvC,GAAII,GAAe,EAEjB,OADAC,EAAAA,EAAIC,KAAK,oDAATD,GACOJ,EAAM,GAEf,MAAMM,EAAOH,EAAcH,EAAM1E,OAC3BiF,EAAMjC,KAAKE,OAAOZ,EAAQmC,EAAO,IAAMO,GAG7C,OAAON,EAFU1B,KAAKkC,IAAIlC,KAAKmC,IAAIF,EAAKP,EAAM1E,OAAS,GAAI,GAG5D,CA3GgCoF,CAAcX,EAAQC,EAAOpC,IAG7D,CAGM,SAAS+C,EAAeZ,EAAQC,GAGrC,OAAOF,EAASC,EAAQC,GAFFpC,GAuGjB,SAAqBmC,EAAQC,EAAOpC,GACzC,OAASA,EAAQmC,EAAO,KAAOA,EAAO,GAAKA,EAAO,KAAQC,EAAM,GAAKA,EAAM,IAAMA,EAAM,EACxF,CAzGgCY,CAAYb,EAAQC,EAAOpC,IAG3D,CAEM,SAASiD,EAAiBd,EAAQC,GAEvC,MAAMc,EAAef,EAAOhB,KAAKvC,GACjC,IAAIkB,EAAI,EACR,MAAMU,EAAIE,KAAKkC,IAAI,EAAGR,EAAM1E,QACtByF,EAAa,IAAI7B,MAAMd,EAAI,GACjC,OAASV,EAAIU,GACX2C,EAAWrD,EAAI,GAAKsD,EAAUF,EAAcpD,EAAIU,GAGlD,MAAM6B,EAAgBrC,GAyCxB,SAAyBmD,EAAYf,EAAOpC,GAC1C,OAAOoC,EAhBT,SAAqBvD,EAAGoC,GACtB,IAAIoC,EAAK,EACLC,EAAKzE,EAAEnB,OACX,KAAO2F,EAAKC,GAAI,CACd,MAAMC,EAAOF,EAAKC,IAAQ,EACtB1E,EAAUC,EAAE0E,GAAMtC,GAAK,EACzBqC,EAAKC,EAELF,EAAKE,EAAM,CAEd,CACD,OAAOF,CACR,CAIcG,CAAYL,EAAYnD,GACtC,CA3CgCyD,CAAgBN,EAAYf,EAAOpC,GAGlE,OAFAqC,EAAcc,WAAa,IAAMA,EAE1BjB,EAASC,EAAQC,EAAOC,EAChC,CAED,SAASzD,EAAUC,EAAGC,GACpB,OAAOD,EAAIC,CACZ,CAED,SAASsE,EAAUjB,EAAQuB,GACzB,MAAMC,EAAexB,EAAOzE,OAC5B,GAAIgG,GAAY,GAAKC,EAAe,EAClC,OAAOxB,EAAO,GAEhB,GAAIuB,GAAY,EACd,OAAOvB,EAAOwB,EAAe,GAG/B,MAAMC,GAAkBD,EAAe,GAAKD,EACtCG,EAAWnD,KAAKE,MAAMgD,GACtBE,EAAM3B,EAAO0B,GAEnB,OAAOC,GADM3B,EAAO0B,EAAW,GACVC,IAAQF,EAAiBC,EAC/C,CAiCM,SAASE,EAAgB5B,EAAQC,GACtC,MAAM4B,EAAY,IAAIC,IAChBC,EAAe,GACrB,IAAK,MAAMlC,KAAKG,EAAQ,CACtB,MAAMjK,EAAM,GAAHiM,OAAMnC,GACVgC,EAAUI,IAAIlM,IACjB8L,EAAUK,IAAInM,EAAKgM,EAAaI,KAAKtC,GAExC,CAID,OAAOE,EAASC,EAAQC,GAFFpC,GArBxB,SAAsBmC,EAAQ6B,EAAW5B,EAAOpC,GAC9C,MAAM9H,EAAM,GAAHiM,OAAMnE,GACf,IAAIgC,EAAIgC,EAAUO,IAAIrM,GAMtB,YALU4D,IAANkG,IAEFA,EAAIG,EAAOmC,KAAKtE,GAChBgE,EAAUK,IAAInM,EAAK8J,IAEdI,GAAOJ,EAAI,GAAKI,EAAM1E,OAC9B,CAYgC8G,CAAaN,EAAcF,EAAW5B,EAAOpC,IAG7E,CAuBD,SAASyE,EAAmBzC,GAC1B,OAAOA,OACR,CAaD,SAAS0C,EAAgBxL,EAAMyL,GAE7B,OADwC,mBAAlBA,EAA+BzL,EAAK0E,IAAI+G,GAAiBzL,GACjE2E,OAAO4G,EACtB,CAOM,SAAS3C,EAAkB5I,EAAMyL,GACtC,OAAOD,EAAgBxL,EAAMyL,EAC9B,CAEM,SAAS1C,EAAiB/I,EAAMyL,GACrC,OA1BK,SAAgBC,GACrB,MAAMC,EAAU,GAOhB,OANAD,EAAOE,SAAQC,KACRF,EAAQ1M,SAAS4M,IAAMN,EAAmBM,IAC7CF,EAAQP,KAAKS,EACd,IAGIF,CACR,CAiBQG,CAAON,EAAgBxL,EAAMyL,GACrC,CAmBM,SAASlE,EAAMT,EAAO6C,EAAKD,GAChC,OAAOlC,KAAKkC,IAAIC,EAAKnC,KAAKmC,IAAID,EAAK5C,GACpC,CAEM,SAASiF,EAA4BpD,GAC1C,OAAQA,GACN,IAAK,WASL,QACE,OAAOS,EART,IAAK,SACH,OAAOS,EACT,IAAK,WACH,OAAOE,EACT,IAAK,UACH,OAAOc,EAKZ,C,kGCzLc,MAAe1L,UAA+C6M,EAAAA,EAM5D,eAAXC,GACF,OAAO,CACR,CAGW,YAARC,GACF,OAAOzM,MAAMyM,UAAYvM,KAAKwM,eAAeC,OAAMC,GAASA,EAAMH,UACnE,CAGDC,YAAAA,GACE,OAAQxM,KAAK2M,eAAiB3M,KAAK2M,cAAcC,WAAc,EAChE,CAKD7M,eAAAA,CAAgBE,GAA+B,CAG/CC,QAAAA,CAAS2M,GACP/M,MAAMI,SAAS2M,GAMf7M,KAAK8M,gBACN,CAKDC,cAAAA,EAAe,KAACC,IACd,MAAM,OAACC,GAAUD,EAIjB,OAFEC,GAAUA,EAAOC,UAAYD,EAAOC,SAASC,QAAUF,EAAOC,SAASC,OAAO5J,KAAOvD,KAAKuD,IAO5FyJ,EAAKC,OAASA,EAAOC,SAASD,OAC9BD,EAAKvI,MAAQwI,EAAOC,SAASzI,MAEtBuI,GAPEA,CAQV,CAQDI,cAAAA,CAAenN,GACb,OAAO,CACR,CAGSoN,oBAAAA,CAAqBC,EAAoBjN,GACjD,OAAOA,GAAQA,EAAKwE,MACrB,CAGS0I,gBAAAA,CACRD,EACAE,GAEA,MAAOC,eAAgBC,GAAmB1N,KAAKd,MAE/C,OACGwO,GACCA,EAAgBJ,IACfI,EAAgBJ,GAAYK,MAC/BH,CAEH,CAISI,cAAAA,CAAkBC,EAAQC,EAAmBC,GAOrD,OALAF,EAAIX,SAAW,CACbC,OAAQnN,KACRiN,OAAQa,EACRrJ,MAAOsJ,GAEFF,CACR,CAKSG,mBAAAA,CAA6BrL,GACrC,GAAwB,mBAAbA,EAAyB,CAClC,MAAMsL,EAAkC,CACtCxJ,OAAQ,EAERpE,KAAML,KAAKd,MAAMmB,KACjB6N,OAAQ,IAEV,MAAO,CAAC9F,EAAQnB,IACVmB,GAAKA,EAAE8E,UACTe,EAAWxJ,MAAQ2D,EAAE8E,SAASzI,MAEvB9B,EAASyF,EAAE8E,SAASD,OAAcgB,IAGpCtL,EAASyF,EAASnB,EAE5B,CACD,OAAOtE,CACR,CAISwL,gBAAAA,CACRC,EAII,CAAC,GACA,IAAAC,EACL,MAAM,QACJC,EADI,SAEJC,EAFI,QAGJC,EAHI,WAIJC,EAJI,iBAKJC,EALI,uBAMJC,EANI,cAOJC,EAPI,eAQJC,EARI,iBASJC,EATI,iBAUJC,EAVI,cAWJC,EAXI,eAYJC,EAZI,YAaJC,EAbI,WAcJC,EAdI,MAeJC,EAfI,UAgBJC,EACA5B,eAAgBC,GACd1N,KAAKd,MACH2D,EAAW,CACfU,GAAI,GACJ+L,eAAgB,CAAC,EACjBhB,UACAC,WACAC,UACAC,aACAC,mBACAC,yBACAC,gBACAC,iBACAC,mBACAC,mBACAC,gBACAC,iBACAC,cACAC,aACAC,QACAC,aAGIE,EACJ7B,GAAmBU,EAAc7K,IAAMmK,EAAgBU,EAAc7K,IACjEiM,EACJD,GAA2BA,EAAwBD,eAC/CG,EAAarB,EAAc7K,IAAM,WAEvC,GAAIgM,EAAyB,CAC3B,MAAMzM,EAAY9C,KAAKd,MAAMwQ,EAAAA,IACvBC,EAAoBvB,EAAcT,KAAOS,EAAcT,KAAKvN,WAAa,CAAC,EAChF,IAAK,MAAMf,KAAOkQ,EAAyB,CACzC,MAAMK,EAAWD,EAAkBtQ,IAAQyD,EAAUzD,GAEjDuQ,GAA8B,aAAlBA,EAASjC,OACvB4B,EAAwBlQ,GAAOW,KAAKgO,oBAAoBuB,EAAwBlQ,IAEnF,CACF,CAEDoC,OAAOC,OACLmB,EACAuL,EAEAmB,GAEF1M,EAASU,GAAT,GAAA+H,OAAiBtL,KAAKd,MAAMqE,GAA5B,KAAA+H,OAAkCmE,GAClC5M,EAASyM,eAAiB,CACxB5M,IAAG,QAAA2L,EAAErO,KAAKd,MAAMoQ,sBAAb,IAAAjB,OAAA,EAAEA,EAA2B3L,OAC7B0L,EAAckB,kBACdE,GAKL,IAAK,MAAMK,KAAaV,EAAY,CAClC,MAAMW,EAAmBD,EAAU1B,iBAAiB4B,KAAK/P,KAAM6P,GAC3DC,GACFrO,OAAOC,OAAOmB,EAAUiN,EAAkB,CACxCR,eAAgB7N,OAAOC,OAAOmB,EAASyM,eAAgBQ,EAAiBR,iBAG7E,CAED,OAAOzM,CACR,CAGSmN,oBAAAA,CAAqBhD,GAC7B,IAAK,MAAMN,KAAS1M,KAAKwM,eACvBE,EAAMuD,oBAAoBjD,EAE7B,CAGS3J,oBAAAA,GACR,OAAO,IACR,CAGS6M,WAAAA,CAAYC,EAAsCC,GAE1D,IAAIxD,EAAY5M,KAAK2M,cAAcC,UACnC,MAAMyD,GAAgBzD,GAAa5M,KAAKsQ,cACxC,GAAID,EAAc,CAChB,MAAME,EAAgBvQ,KAAKwQ,eAI3B5D,GAAY6D,EAAAA,EAAAA,GAAQF,EAAeG,SAEnC1Q,KAAK2M,cAAcC,UAAYA,CAChC,EACD+D,EAAAA,EAAAA,GAnPwB,8BAmPG3Q,KAAMqQ,EAAczD,GAI/C,IAAK,MAAMF,KAASE,EAClBF,EAAMS,OAASnN,IAElB,G,OAxP2BR,EAAAA,YAGD,iB","sources":["webpack://superset/../../../src/utils/prop-utils.js","webpack://superset/../../src/aggregation-layer.ts","webpack://superset/../../../src/utils/aggregation-operation-utils.js","webpack://superset/../../../src/utils/bin-sorter.ts","webpack://superset/../../../src/utils/scale-utils.js","webpack://superset/../../../src/lib/composite-layer.ts"],"sourcesContent":["// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport function filterProps(props, filterKeys) {\n  const filteredProps = {};\n  for (const key in props) {\n    if (!filterKeys.includes(key)) {\n      filteredProps[key] = props[key];\n    }\n  }\n  return filteredProps;\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  CompositeLayer,\n  AttributeManager,\n  LayerDataSource,\n  _compareProps as compareProps,\n  UpdateParameters,\n  CompositeLayerProps\n} from '@deck.gl/core';\nimport {cssToDeviceRatio} from '@luma.gl/core';\nimport {filterProps} from './utils/prop-utils';\n\nexport type AggregationLayerProps<DataT> = CompositeLayerProps & {\n  data: LayerDataSource<DataT>;\n};\n\nexport default abstract class AggregationLayer<\n  DataT,\n  ExtraPropsT extends {} = {}\n> extends CompositeLayer<Required<AggregationLayer<DataT>> & ExtraPropsT> {\n  static layerName = 'AggregationLayer';\n\n  state!: CompositeLayer['state'] & {\n    ignoreProps?: Record<string, any>;\n    dimensions?: any;\n  };\n\n  initializeAggregationLayer(dimensions: any) {\n    super.initializeState(this.context);\n\n    this.setState({\n      // Layer props , when changed doesn't require updating aggregation\n      ignoreProps: filterProps((this.constructor as any)._propTypes, dimensions.data.props),\n      dimensions\n    });\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n    const {changeFlags} = opts;\n    if (changeFlags.extensionsChanged) {\n      const shaders = this.getShaders({});\n      if (shaders && shaders.defines) {\n        shaders.defines.NON_INSTANCED_MODEL = 1;\n      }\n      this.updateShaders(shaders);\n    }\n\n    // Explictly call to update attributes as 'CompositeLayer' doesn't call this\n    this._updateAttributes();\n  }\n\n  updateAttributes(changedAttributes) {\n    // Super classes, can refer to state.changedAttributes to determine what\n    // attributes changed\n    this.setState({changedAttributes});\n  }\n\n  getAttributes() {\n    return this.getAttributeManager()!.getShaderAttributes();\n  }\n\n  getModuleSettings() {\n    // For regular layer draw this happens during draw cycle (_drawLayersInViewport) not during update cycle\n    // For aggregation layers this is called during updateState to update aggregation data\n    // NOTE: it is similar to LayerPass._getModuleParameters() but doesn't inlcude `effects` it is not needed for aggregation\n    const {viewport, mousePosition, gl} = this.context;\n    const moduleSettings = Object.assign(Object.create(this.props), {\n      viewport,\n      mousePosition,\n      pickingActive: 0,\n      devicePixelRatio: cssToDeviceRatio(gl)\n    });\n    return moduleSettings;\n  }\n\n  updateShaders(shaders) {\n    // Default implemention is empty, subclasses can update their Model objects if needed\n  }\n\n  /**\n   * Checks if aggregation is dirty\n   * @param {Object} updateOpts - object {props, oldProps, changeFlags}\n   * @param {Object} params - object {dimension, compareAll}\n   * @param {Object} params.dimension - {props, accessors} array of props and/or accessors\n   * @param {Boolean} params.compareAll - when `true` it will include non layer props for comparision\n   * @returns {Boolean} - returns true if dimensions' prop or accessor is changed\n   **/\n  isAggregationDirty(\n    updateOpts,\n    params: {compareAll?: boolean; dimension?: any} = {}\n  ): string | boolean {\n    const {props, oldProps, changeFlags} = updateOpts;\n    const {compareAll = false, dimension} = params;\n    const {ignoreProps} = this.state;\n    const {props: dataProps, accessors = []} = dimension;\n    const {updateTriggersChanged} = changeFlags;\n    if (changeFlags.dataChanged) {\n      return true;\n    }\n    if (updateTriggersChanged) {\n      if (updateTriggersChanged.all) {\n        return true;\n      }\n      for (const accessor of accessors) {\n        if (updateTriggersChanged[accessor]) {\n          return true;\n        }\n      }\n    }\n    if (compareAll) {\n      if (changeFlags.extensionsChanged) {\n        return true;\n      }\n      // Compare non layer props too (like extension props)\n      // ignoreprops refers to all Layer props other than aggregation props that need to be comapred\n      return compareProps({\n        oldProps,\n        newProps: props,\n        ignoreProps,\n        propTypes: (this.constructor as any)._propTypes\n      });\n    }\n    // Compare props of the dimension\n    for (const name of dataProps) {\n      if (props[name] !== oldProps[name]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks if an attribute is changed\n   * @param {String} name - name of the attribute\n   * @returns {Boolean} - `true` if attribute `name` is changed, `false` otherwise,\n   *                       If `name` is not passed or `undefiend`, `true` if any attribute is changed, `false` otherwise\n   **/\n  isAttributeChanged(name?: string) {\n    const {changedAttributes} = this.state;\n    if (!name) {\n      // if name not specified return true if any attribute is changed\n      return !isObjectEmpty(changedAttributes);\n    }\n    return changedAttributes && changedAttributes[name] !== undefined;\n  }\n\n  // Private\n\n  // override Composite layer private method to create AttributeManager instance\n  _getAttributeManager() {\n    return new AttributeManager(this.context.gl, {\n      id: this.props.id,\n      stats: this.context.stats\n    });\n  }\n}\n\n// Helper methods\n\n// Returns true if given object is empty, false otherwise.\nfunction isObjectEmpty(obj) {\n  let isEmpty = true;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  for (const key in obj) {\n    isEmpty = false;\n    break;\n  }\n  return isEmpty;\n}\n","// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const AGGREGATION_OPERATION = {\n  SUM: 1,\n  MEAN: 2,\n  MIN: 3,\n  MAX: 4\n};\n\nfunction sumReducer(accu, cur) {\n  return accu + cur;\n}\n\nfunction maxReducer(accu, cur) {\n  return cur > accu ? cur : accu;\n}\n\nfunction minReducer(accu, cur) {\n  return cur < accu ? cur : accu;\n}\n\nexport function getMean(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;\n}\n\nexport function getSum(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? pts.length * accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(sumReducer, 0) : null;\n}\n\nexport function getMax(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;\n}\n\nexport function getMin(pts, accessor) {\n  if (Number.isFinite(accessor)) {\n    return pts.length ? accessor : null;\n  }\n  const filtered = pts.map(accessor).filter(Number.isFinite);\n\n  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;\n}\n\n// Function to convert from aggregation/accessor props (like colorAggregation and getColorWeight) to getValue prop (like getColorValue)\nexport function getValueFunc(aggregation, accessor, context) {\n  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;\n  accessor = wrapAccessor(accessor, context);\n  switch (op) {\n    case AGGREGATION_OPERATION.MIN:\n      return pts => getMin(pts, accessor);\n    case AGGREGATION_OPERATION.SUM:\n      return pts => getSum(pts, accessor);\n    case AGGREGATION_OPERATION.MEAN:\n      return pts => getMean(pts, accessor);\n    case AGGREGATION_OPERATION.MAX:\n      return pts => getMax(pts, accessor);\n    default:\n      return null;\n  }\n}\n\nfunction wrapAccessor(accessor, context = {}) {\n  if (Number.isFinite(accessor)) {\n    return accessor;\n  }\n  return pt => {\n    context.index = pt.index;\n    return accessor(pt.source, context);\n  };\n}\n\nexport function wrapGetValueFunc(getValue, context = {}) {\n  return pts => {\n    context.indices = pts.map(pt => pt.index);\n    return getValue(\n      pts.map(pt => pt.source),\n      context\n    );\n  };\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n// getValue takes an array of points returns a value to sort the bins on.\n// by default it returns the number of points\n// this is where to pass in a function to color the bins by\n// avg/mean/max of specific value of the point\nconst defaultGetValue = points => points.length;\n\nimport {clamp, getQuantileDomain, getOrdinalDomain} from './scale-utils';\n\nconst MAX_32_BIT_FLOAT = 3.402823466e38;\n\n// access array of points in each bin\nconst defaultGetPoints = bin => bin.points;\n// access index of each bin\nconst defaultGetIndex = bin => bin.index;\n\n// d3-scending\nconst ascending = (a, b) => (a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN);\n\nconst defaultProps = {\n  getValue: defaultGetValue,\n  getPoints: defaultGetPoints,\n  getIndex: defaultGetIndex,\n  filterData: null\n};\n\nexport type AggregatedBin = {\n  i: number;\n  value: any;\n  counts: number;\n};\n\nexport default class BinSorter {\n  maxCount!: number;\n  maxValue!: number;\n  minValue!: number;\n  totalCount!: number;\n\n  aggregatedBins: AggregatedBin[];\n  sortedBins!: AggregatedBin[];\n  binMap: Record<number, AggregatedBin>;\n\n  constructor(bins = [], props: Partial<typeof defaultProps> = defaultProps) {\n    this.aggregatedBins = this.getAggregatedBins(bins, props);\n    this._updateMinMaxValues();\n    this.binMap = this.getBinMap();\n  }\n\n  /**\n   * Get an array of object with aggregated values and index of bins\n   * Array object will be sorted by value optionally.\n   * @param {Array} bins\n   * @param {Function} getValue\n   * @return {Array} array of values and index lookup\n   */\n  getAggregatedBins(bins, props): AggregatedBin[] {\n    const {\n      getValue = defaultGetValue,\n      getPoints = defaultGetPoints,\n      getIndex = defaultGetIndex,\n      filterData\n    } = props;\n\n    const hasFilter = typeof filterData === 'function';\n    const binCount = bins.length;\n    const aggregatedBins: AggregatedBin[] = [];\n    let index = 0;\n\n    for (let binIndex = 0; binIndex < binCount; binIndex++) {\n      const bin = bins[binIndex];\n      const points = getPoints(bin);\n      const i = getIndex(bin);\n\n      const filteredPoints = hasFilter ? points.filter(filterData) : points;\n\n      bin.filteredPoints = hasFilter ? filteredPoints : null;\n\n      const value = filteredPoints.length ? getValue(filteredPoints) : null;\n\n      if (value !== null && value !== undefined) {\n        // filter bins if value is null or undefined\n        aggregatedBins[index] = {\n          i: Number.isFinite(i) ? i : binIndex,\n          value,\n          counts: filteredPoints.length\n        };\n        index++;\n      }\n    }\n    return aggregatedBins;\n  }\n\n  _percentileToIndex(percentileRange): [number, number] {\n    const len = this.sortedBins.length;\n    if (len < 2) {\n      return [0, 0];\n    }\n\n    const [lower, upper] = percentileRange.map(n => clamp(n, 0, 100));\n\n    const lowerIdx = Math.ceil((lower / 100) * (len - 1));\n    const upperIdx = Math.floor((upper / 100) * (len - 1));\n\n    return [lowerIdx, upperIdx];\n  }\n\n  /**\n   * Get a mapping from cell/hexagon index to sorted bin\n   * This is used to retrieve bin value for color calculation\n   * @return {Object} bin index to aggregatedBins\n   */\n  getBinMap(): Record<number, AggregatedBin> {\n    const binMap = {};\n    for (const bin of this.aggregatedBins) {\n      binMap[bin.i] = bin;\n    }\n    return binMap;\n  }\n\n  // Private\n\n  /**\n   * Get ths max count of all bins\n   */\n  _updateMinMaxValues(): void {\n    let maxCount = 0;\n    let maxValue = 0;\n    let minValue = MAX_32_BIT_FLOAT;\n    let totalCount = 0;\n    for (const x of this.aggregatedBins) {\n      maxCount = maxCount > x.counts ? maxCount : x.counts;\n      maxValue = maxValue > x.value ? maxValue : x.value;\n      minValue = minValue < x.value ? minValue : x.value;\n      totalCount += x.counts;\n    }\n    this.maxCount = maxCount;\n    this.maxValue = maxValue;\n    this.minValue = minValue;\n    this.totalCount = totalCount;\n  }\n\n  /**\n   * Get range of values of all bins\n   * @param {Number[]} range\n   * @param {Number} range[0] - lower bound\n   * @param {Number} range[1] - upper bound\n   * @return {Array} array of new value range\n   */\n  getValueRange(percentileRange: [number, number]): [number, number] {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      // @ts-expect-error\n      return [];\n    }\n    let lowerIdx = 0;\n    let upperIdx = this.sortedBins.length - 1;\n\n    if (Array.isArray(percentileRange)) {\n      const idxRange = this._percentileToIndex(percentileRange);\n      lowerIdx = idxRange[0];\n      upperIdx = idxRange[1];\n    }\n\n    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];\n  }\n\n  getValueDomainByScale(scale: string, [lower = 0, upper = 100] = []) {\n    if (!this.sortedBins) {\n      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending(a.value, b.value));\n    }\n    if (!this.sortedBins.length) {\n      return [];\n    }\n    const indexEdge = this._percentileToIndex([lower, upper]);\n\n    return this._getScaleDomain(scale, indexEdge);\n  }\n\n  _getScaleDomain(scaleType: string, [lowerIdx, upperIdx]: [number, number]): [number, number] {\n    const bins = this.sortedBins;\n\n    switch (scaleType) {\n      case 'quantize':\n      case 'linear':\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n\n      case 'quantile':\n        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), d => d.value);\n\n      case 'ordinal':\n        return getOrdinalDomain(bins, d => d.value) as [number, number];\n\n      default:\n        return [bins[lowerIdx].value, bins[upperIdx].value];\n    }\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {log} from '@deck.gl/core';\n\n// a scale function wrapper just like d3-scales\nexport function getScale(domain, range, scaleFunction) {\n  const scale = scaleFunction;\n  scale.domain = () => domain;\n  scale.range = () => range;\n\n  return scale;\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\n// return a quantize scale function\nexport function getQuantizeScale(domain, range) {\n  const scaleFunction = value => quantizeScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// return a linear scale function\nexport function getLinearScale(domain, range) {\n  const scaleFunction = value => linearScale(domain, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\nexport function getQuantileScale(domain, range) {\n  // calculate threshold\n  const sortedDomain = domain.sort(ascending);\n  let i = 0;\n  const n = Math.max(1, range.length);\n  const thresholds = new Array(n - 1);\n  while (++i < n) {\n    thresholds[i - 1] = threshold(sortedDomain, i / n);\n  }\n\n  const scaleFunction = value => thresholdsScale(thresholds, range, value);\n  scaleFunction.thresholds = () => thresholds;\n\n  return getScale(domain, range, scaleFunction);\n}\n\nfunction ascending(a, b) {\n  return a - b;\n}\n\nfunction threshold(domain, fraction) {\n  const domainLength = domain.length;\n  if (fraction <= 0 || domainLength < 2) {\n    return domain[0];\n  }\n  if (fraction >= 1) {\n    return domain[domainLength - 1];\n  }\n\n  const domainFraction = (domainLength - 1) * fraction;\n  const lowIndex = Math.floor(domainFraction);\n  const low = domain[lowIndex];\n  const high = domain[lowIndex + 1];\n  return low + (high - low) * (domainFraction - lowIndex);\n}\n\nfunction bisectRight(a, x) {\n  let lo = 0;\n  let hi = a.length;\n  while (lo < hi) {\n    const mid = (lo + hi) >>> 1;\n    if (ascending(a[mid], x) > 0) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  return lo;\n}\n\n// return a quantize scale function\nfunction thresholdsScale(thresholds, range, value) {\n  return range[bisectRight(thresholds, value)];\n}\n\n// ordinal Scale\nfunction ordinalScale(domain, domainMap, range, value) {\n  const key = `${value}`;\n  let d = domainMap.get(key);\n  if (d === undefined) {\n    // update the domain\n    d = domain.push(value);\n    domainMap.set(key, d);\n  }\n  return range[(d - 1) % range.length];\n}\n\nexport function getOrdinalScale(domain, range) {\n  const domainMap = new Map();\n  const uniqueDomain = [];\n  for (const d of domain) {\n    const key = `${d}`;\n    if (!domainMap.has(key)) {\n      domainMap.set(key, uniqueDomain.push(d));\n    }\n  }\n\n  const scaleFunction = value => ordinalScale(uniqueDomain, domainMap, range, value);\n\n  return getScale(domain, range, scaleFunction);\n}\n\n// Quantize scale is similar to linear scales,\n// except it uses a discrete rather than continuous range\nexport function quantizeScale(domain, range, value) {\n  const domainRange = domain[1] - domain[0];\n  if (domainRange <= 0) {\n    log.warn('quantizeScale: invalid domain, returning range[0]')();\n    return range[0];\n  }\n  const step = domainRange / range.length;\n  const idx = Math.floor((value - domain[0]) / step);\n  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);\n\n  return range[clampIdx];\n}\n\n// Linear scale maps continuous domain to continuous range\nexport function linearScale(domain, range, value) {\n  return ((value - domain[0]) / (domain[1] - domain[0])) * (range[1] - range[0]) + range[0];\n}\n\n// get scale domains\nfunction notNullOrUndefined(d) {\n  return d !== undefined && d !== null;\n}\n\nexport function unique(values) {\n  const results = [];\n  values.forEach(v => {\n    if (!results.includes(v) && notNullOrUndefined(v)) {\n      results.push(v);\n    }\n  });\n\n  return results;\n}\n\nfunction getTruthyValues(data, valueAccessor) {\n  const values = typeof valueAccessor === 'function' ? data.map(valueAccessor) : data;\n  return values.filter(notNullOrUndefined);\n}\n\nexport function getLinearDomain(data, valueAccessor) {\n  const sorted = getTruthyValues(data, valueAccessor).sort();\n  return sorted.length ? [sorted[0], sorted[sorted.length - 1]] : [0, 0];\n}\n\nexport function getQuantileDomain(data, valueAccessor) {\n  return getTruthyValues(data, valueAccessor);\n}\n\nexport function getOrdinalDomain(data, valueAccessor) {\n  return unique(getTruthyValues(data, valueAccessor));\n}\n\nexport function getScaleDomain(scaleType, data, valueAccessor) {\n  switch (scaleType) {\n    case 'quantize':\n    case 'linear':\n      return getLinearDomain(data, valueAccessor);\n\n    case 'quantile':\n      return getQuantileDomain(data, valueAccessor);\n\n    case 'ordinal':\n      return getOrdinalDomain(data, valueAccessor);\n\n    default:\n      return getLinearDomain(data, valueAccessor);\n  }\n}\n\nexport function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nexport function getScaleFunctionByScaleType(scaleType) {\n  switch (scaleType) {\n    case 'quantize':\n      return getQuantizeScale;\n    case 'linear':\n      return getLinearScale;\n    case 'quantile':\n      return getQuantileScale;\n    case 'ordinal':\n      return getOrdinalScale;\n\n    default:\n      return getQuantizeScale;\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport Layer, {UpdateParameters} from './layer';\nimport debug from '../debug';\nimport {flatten} from '../utils/flatten';\n\nimport type AttributeManager from './attribute/attribute-manager';\nimport type {PickingInfo, GetPickingInfoParams} from './picking/pick-info';\nimport type {FilterContext} from '../passes/layers-pass';\nimport type {LayersList, LayerContext} from './layer-manager';\nimport type {CompositeLayerProps, Accessor, AccessorContext} from '../types/layer-props';\nimport {ConstructorOf} from '../types/types';\nimport {PROP_TYPES_SYMBOL} from '../lifecycle/constants';\n\nconst TRACE_RENDER_LAYERS = 'compositeLayer.renderLayers';\n\nexport default abstract class CompositeLayer<PropsT extends {} = {}> extends Layer<\n  PropsT & Required<CompositeLayerProps>\n> {\n  static layerName: string = 'CompositeLayer';\n\n  /** `true` if this layer renders other layers */\n  get isComposite(): boolean {\n    return true;\n  }\n\n  /** Returns true if all async resources are loaded */\n  get isLoaded(): boolean {\n    return super.isLoaded && this.getSubLayers().every(layer => layer.isLoaded);\n  }\n\n  /** Return last rendered sub layers */\n  getSubLayers(): Layer[] {\n    return (this.internalState && this.internalState.subLayers) || [];\n  }\n\n  // initializeState is usually not needed for composite layers\n  // Provide empty definition to disable check for missing definition\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  initializeState(context: LayerContext): void {}\n\n  /** Updates selected state members and marks the composite layer to need rerender */\n  setState(updateObject: any): void {\n    super.setState(updateObject);\n    // Trigger a layer update\n    // Although conceptually layer.draw and compositeLayer.renderLayers are equivalent,\n    // they are executed during different lifecycles.\n    // draw can be called without calling updateState (e.g. most viewport changes),\n    // while renderLayers can only be called during a recursive layer update.\n    this.setNeedsUpdate();\n  }\n\n  /** called to augment the info object that is bubbled up from a sublayer\n      override Layer.getPickingInfo() because decoding / setting uniform do\n      not apply to a composite layer. */\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {object} = info;\n    const isDataWrapped =\n      object && object.__source && object.__source.parent && object.__source.parent.id === this.id;\n\n    if (!isDataWrapped) {\n      return info;\n    }\n\n    // override object with picked data\n    info.object = object.__source.object;\n    info.index = object.__source.index;\n\n    return info;\n  }\n\n  // Implement to generate subLayers\n  abstract renderLayers(): Layer | null | LayersList;\n\n  /**\n   * Filters sub layers at draw time. Return true if the sub layer should be drawn.\n   */\n  filterSubLayer(context: FilterContext): boolean {\n    return true;\n  }\n\n  /** Returns true if sub layer needs to be rendered */\n  protected shouldRenderSubLayer(subLayerId: string, data: any): boolean {\n    return data && data.length;\n  }\n\n  /** Returns sub layer class for a specific sublayer */\n  protected getSubLayerClass<T extends Layer>(\n    subLayerId: string,\n    DefaultLayerClass: ConstructorOf<T>\n  ): ConstructorOf<T> {\n    const {_subLayerProps: overridingProps} = this.props;\n\n    return (\n      (overridingProps &&\n        overridingProps[subLayerId] &&\n        (overridingProps[subLayerId].type as ConstructorOf<T>)) ||\n      DefaultLayerClass\n    );\n  }\n\n  /** When casting user data into another format to pass to sublayers,\n      add reference to the original object and object index */\n  protected getSubLayerRow<T>(row: T, sourceObject: any, sourceObjectIndex: number): T {\n    // @ts-ignore (TS2339) adding undefined property\n    row.__source = {\n      parent: this,\n      object: sourceObject,\n      index: sourceObjectIndex\n    };\n    return row;\n  }\n\n  /** Some composite layers cast user data into another format before passing to sublayers\n    We need to unwrap them before calling the accessor so that they see the original data\n    objects */\n  protected getSubLayerAccessor<In, Out>(accessor: Accessor<In, Out>): Accessor<In, Out> {\n    if (typeof accessor === 'function') {\n      const objectInfo: AccessorContext<In> = {\n        index: -1,\n        // @ts-ignore accessing resolved data\n        data: this.props.data,\n        target: []\n      };\n      return (x: any, i: AccessorContext<In>) => {\n        if (x && x.__source) {\n          objectInfo.index = x.__source.index;\n          // @ts-ignore (TS2349) Out is never a function\n          return accessor(x.__source.object as In, objectInfo);\n        }\n        // @ts-ignore (TS2349) Out is never a function\n        return accessor(x as In, i);\n      };\n    }\n    return accessor;\n  }\n\n  /** Returns sub layer props for a specific sublayer */\n  // eslint-disable-next-line complexity\n  protected getSubLayerProps(\n    sublayerProps: {\n      id?: string;\n      updateTriggers?: Record<string, any>;\n      [propName: string]: any;\n    } = {}\n  ): any {\n    const {\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation,\n      _subLayerProps: overridingProps\n    } = this.props;\n    const newProps = {\n      id: '',\n      updateTriggers: {},\n      opacity,\n      pickable,\n      visible,\n      parameters,\n      getPolygonOffset,\n      highlightedObjectIndex,\n      autoHighlight,\n      highlightColor,\n      coordinateSystem,\n      coordinateOrigin,\n      wrapLongitude,\n      positionFormat,\n      modelMatrix,\n      extensions,\n      fetch,\n      operation\n    };\n\n    const overridingSublayerProps =\n      overridingProps && sublayerProps.id && overridingProps[sublayerProps.id];\n    const overridingSublayerTriggers =\n      overridingSublayerProps && overridingSublayerProps.updateTriggers;\n    const sublayerId = sublayerProps.id || 'sublayer';\n\n    if (overridingSublayerProps) {\n      const propTypes = this.props[PROP_TYPES_SYMBOL];\n      const subLayerPropTypes = sublayerProps.type ? sublayerProps.type._propTypes : {};\n      for (const key in overridingSublayerProps) {\n        const propType = subLayerPropTypes[key] || propTypes[key];\n        // eslint-disable-next-line\n        if (propType && propType.type === 'accessor') {\n          overridingSublayerProps[key] = this.getSubLayerAccessor(overridingSublayerProps[key]);\n        }\n      }\n    }\n\n    Object.assign(\n      newProps,\n      sublayerProps,\n      // experimental feature that allows users to override sublayer props via parent layer prop\n      overridingSublayerProps\n    );\n    newProps.id = `${this.props.id}-${sublayerId}`;\n    newProps.updateTriggers = {\n      all: this.props.updateTriggers?.all,\n      ...sublayerProps.updateTriggers,\n      ...overridingSublayerTriggers\n    };\n\n    // Pass through extension props\n    // @ts-ignore (TS2532) extensions is always defined after merging with default props\n    for (const extension of extensions) {\n      const passThroughProps = extension.getSubLayerProps.call(this, extension);\n      if (passThroughProps) {\n        Object.assign(newProps, passThroughProps, {\n          updateTriggers: Object.assign(newProps.updateTriggers, passThroughProps.updateTriggers)\n        });\n      }\n    }\n\n    return newProps;\n  }\n\n  /** Update sub layers to highlight the hovered object */\n  protected _updateAutoHighlight(info: PickingInfo): void {\n    for (const layer of this.getSubLayers()) {\n      layer.updateAutoHighlight(info);\n    }\n  }\n\n  /** Override base Layer method */\n  protected _getAttributeManager(): AttributeManager | null {\n    return null;\n  }\n\n  /** (Internal) Called after an update to rerender sub layers */\n  protected _postUpdate(updateParams: UpdateParameters<this>, forceUpdate: boolean) {\n    // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n    let subLayers = this.internalState.subLayers as Layer[];\n    const shouldUpdate = !subLayers || this.needsUpdate();\n    if (shouldUpdate) {\n      const subLayersList = this.renderLayers();\n      // Flatten the returned array, removing any null, undefined or false\n      // this allows layers to render sublayers conditionally\n      // (see CompositeLayer.renderLayers docs)\n      subLayers = flatten(subLayersList, Boolean) as Layer[];\n      // @ts-ignore (TS2531) this method is only called internally when internalState is defined\n      this.internalState.subLayers = subLayers;\n    }\n    debug(TRACE_RENDER_LAYERS, this, shouldUpdate, subLayers);\n\n    // populate reference to parent layer (this layer)\n    // NOTE: needs to be done even when reusing layers as the parent may have changed\n    for (const layer of subLayers) {\n      layer.parent = this;\n    }\n  }\n}\n"],"names":["filterProps","props","filterKeys","filteredProps","key","includes","AggregationLayer","CompositeLayer","constructor","args","_defineProperty","initializeAggregationLayer","dimensions","super","initializeState","this","context","setState","ignoreProps","_propTypes","data","updateState","opts","changeFlags","extensionsChanged","shaders","getShaders","defines","NON_INSTANCED_MODEL","updateShaders","_updateAttributes","updateAttributes","changedAttributes","getAttributes","getAttributeManager","getShaderAttributes","getModuleSettings","viewport","mousePosition","gl","Object","assign","create","pickingActive","devicePixelRatio","cssToDeviceRatio","isAggregationDirty","updateOpts","params","oldProps","compareAll","dimension","state","dataProps","accessors","updateTriggersChanged","dataChanged","all","accessor","compareProps","newProps","propTypes","name","isAttributeChanged","undefined","obj","isEmpty","isObjectEmpty","_getAttributeManager","AttributeManager","id","stats","AGGREGATION_OPERATION","SUM","MEAN","MIN","MAX","sumReducer","accu","cur","maxReducer","minReducer","getValueFunc","aggregation","op","Number","isFinite","pt","index","source","wrapAccessor","pts","length","filtered","map","filter","reduce","Infinity","getMin","getSum","getMean","getMax","wrapGetValueFunc","getValue","indices","defaultGetValue","points","defaultGetPoints","bin","defaultGetIndex","ascending","a","b","NaN","defaultProps","getPoints","getIndex","filterData","BinSorter","bins","aggregatedBins","getAggregatedBins","_updateMinMaxValues","binMap","getBinMap","hasFilter","binCount","binIndex","i","filteredPoints","value","counts","_percentileToIndex","percentileRange","len","sortedBins","lower","upper","n","clamp","Math","ceil","floor","maxCount","maxValue","minValue","totalCount","x","getValueRange","sort","lowerIdx","upperIdx","Array","isArray","idxRange","getValueDomainByScale","scale","indexEdge","_getScaleDomain","scaleType","getQuantileDomain","slice","d","getOrdinalDomain","getScale","domain","range","scaleFunction","getQuantizeScale","domainRange","log","warn","step","idx","max","min","quantizeScale","getLinearScale","linearScale","getQuantileScale","sortedDomain","thresholds","threshold","lo","hi","mid","bisectRight","thresholdsScale","fraction","domainLength","domainFraction","lowIndex","low","getOrdinalScale","domainMap","Map","uniqueDomain","concat","has","set","push","get","ordinalScale","notNullOrUndefined","getTruthyValues","valueAccessor","values","results","forEach","v","unique","getScaleFunctionByScaleType","Layer","isComposite","isLoaded","getSubLayers","every","layer","internalState","subLayers","updateObject","setNeedsUpdate","getPickingInfo","info","object","__source","parent","filterSubLayer","shouldRenderSubLayer","subLayerId","getSubLayerClass","DefaultLayerClass","_subLayerProps","overridingProps","type","getSubLayerRow","row","sourceObject","sourceObjectIndex","getSubLayerAccessor","objectInfo","target","getSubLayerProps","sublayerProps","_this$props$updateTri","opacity","pickable","visible","parameters","getPolygonOffset","highlightedObjectIndex","autoHighlight","highlightColor","coordinateSystem","coordinateOrigin","wrapLongitude","positionFormat","modelMatrix","extensions","fetch","operation","updateTriggers","overridingSublayerProps","overridingSublayerTriggers","sublayerId","PROP_TYPES_SYMBOL","subLayerPropTypes","propType","extension","passThroughProps","call","_updateAutoHighlight","updateAutoHighlight","_postUpdate","updateParams","forceUpdate","shouldUpdate","needsUpdate","subLayersList","renderLayers","flatten","Boolean","debug"],"sourceRoot":""}
(globalThis.webpackChunksuperset=globalThis.webpackChunksuperset||[]).push([[1296],{776613:t=>{function e(t){if(!(this instanceof e))return new e(t);this._bbox=t||[1/0,1/0,-1/0,-1/0],this._valid=!!t}t.exports=e,e.prototype.include=function(t){return this._valid=!0,this._bbox[0]=Math.min(this._bbox[0],t[0]),this._bbox[1]=Math.min(this._bbox[1],t[1]),this._bbox[2]=Math.max(this._bbox[2],t[0]),this._bbox[3]=Math.max(this._bbox[3],t[1]),this},e.prototype.equals=function(t){var n;return n=t instanceof e?t.bbox():t,this._bbox[0]==n[0]&&this._bbox[1]==n[1]&&this._bbox[2]==n[2]&&this._bbox[3]==n[3]},e.prototype.center=function(t){return this._valid?[(this._bbox[0]+this._bbox[2])/2,(this._bbox[1]+this._bbox[3])/2]:null},e.prototype.union=function(t){var n;return this._valid=!0,n=t instanceof e?t.bbox():t,this._bbox[0]=Math.min(this._bbox[0],n[0]),this._bbox[1]=Math.min(this._bbox[1],n[1]),this._bbox[2]=Math.max(this._bbox[2],n[2]),this._bbox[3]=Math.max(this._bbox[3],n[3]),this},e.prototype.bbox=function(){return this._valid?this._bbox:null},e.prototype.contains=function(t){if(!t)return this._fastContains();if(!this._valid)return null;var e=t[0],n=t[1];return this._bbox[0]<=e&&this._bbox[1]<=n&&this._bbox[2]>=e&&this._bbox[3]>=n},e.prototype.intersect=function(t){return this._valid?(n=t instanceof e?t.bbox():t,!(this._bbox[0]>n[2]||this._bbox[2]<n[0]||this._bbox[3]<n[1]||this._bbox[1]>n[3])):null;var n},e.prototype._fastContains=function(){if(!this._valid)return new Function("return null;");var t="return "+this._bbox[0]+"<= ll[0] &&"+this._bbox[1]+"<= ll[1] &&"+this._bbox[2]+">= ll[0] &&"+this._bbox[3]+">= ll[1]";return new Function("ll",t)},e.prototype.polygon=function(){return this._valid?{type:"Polygon",coordinates:[[[this._bbox[0],this._bbox[1]],[this._bbox[2],this._bbox[1]],[this._bbox[2],this._bbox[3]],[this._bbox[0],this._bbox[3]],[this._bbox[0],this._bbox[1]]]]}:null}},607829:t=>{t.exports=function(t){return function t(e){return Array.isArray(e)&&e.length&&"number"==typeof e[0]?[e]:e.reduce((function(e,n){return Array.isArray(n)&&Array.isArray(n[0])?e.concat(t(n)):(e.push(n),e)}),[])}(t)}},634506:(t,e,n)=>{var i=n(699340),o=n(700063),s=n(607829);o instanceof Function||(o=o.default),t.exports=function(t){if(!t)return[];var e=o(i(t)),n=[];return e.features.forEach((function(t){t.geometry&&(n=n.concat(s(t.geometry.coordinates)))})),n}},629319:(t,e,n)=>{var i=n(634506),o=n(213692),s=n(776613),r={features:["FeatureCollection"],coordinates:["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon"],geometry:["Feature"],geometries:["GeometryCollection"]},a=Object.keys(r);function l(t){for(var e=s(),n=i(t),o=0;o<n.length;o++)e.include(n[o]);return e}t.exports=function(t){return l(t).bbox()},t.exports.polygon=function(t){return l(t).polygon()},t.exports.bboxify=function(t){return o(t).map((function(t){t&&a.some((function(e){return!!t[e]&&-1!==r[e].indexOf(t.type)}))&&(t.bbox=l(t).bbox(),this.update(t))}))}},699340:t=>{t.exports=function(t){if(!t||!t.type)return null;var n=e[t.type];return n?"geometry"===n?{type:"FeatureCollection",features:[{type:"Feature",properties:{},geometry:t}]}:"feature"===n?{type:"FeatureCollection",features:[t]}:"featurecollection"===n?t:void 0:null};var e={Point:"geometry",MultiPoint:"geometry",LineString:"geometry",MultiLineString:"geometry",Polygon:"geometry",MultiPolygon:"geometry",GeometryCollection:"geometry",Feature:"feature",FeatureCollection:"featurecollection"}},763521:(t,e,n)=>{"use strict";n.d(e,{Z:()=>dt});var i=n(204942),o=n(336750),s=n(367186),r=n(905259),a=n(537832),l=n(113717),c=n(733321),u=n(541576),d=n(339769),g=n(453982),f=n(904912),p=n(601953),h=n(645383),y=n(260930);const v=()=>{},x={10241:9987,10240:9729,10242:33071,10243:33071};function m(t,e,n,i){const o=Math.min(n/e.width,i/e.height),s=Math.floor(e.width*o),r=Math.floor(e.height*o);return 1===o?{data:e,width:s,height:r}:(t.canvas.height=r,t.canvas.width=s,t.clearRect(0,0,s,r),t.drawImage(e,0,0,e.width,e.height,0,0,s,r),{data:t.canvas,width:s,height:r})}function P(t){return t&&(t.id||t.url)}function _(t,e,n){for(let i=0;i<e.length;i++){const{icon:o,xOffset:s}=e[i];t[P(o)]={...o,x:s,y:n}}}class b{constructor(t,{onUpdate:e=v,onError:n=v}){(0,i.Z)(this,"gl",void 0),(0,i.Z)(this,"onUpdate",void 0),(0,i.Z)(this,"onError",void 0),(0,i.Z)(this,"_loadOptions",null),(0,i.Z)(this,"_texture",null),(0,i.Z)(this,"_externalTexture",null),(0,i.Z)(this,"_mapping",{}),(0,i.Z)(this,"_textureParameters",null),(0,i.Z)(this,"_pendingCount",0),(0,i.Z)(this,"_autoPacking",!1),(0,i.Z)(this,"_xOffset",0),(0,i.Z)(this,"_yOffset",0),(0,i.Z)(this,"_rowHeight",0),(0,i.Z)(this,"_buffer",4),(0,i.Z)(this,"_canvasWidth",1024),(0,i.Z)(this,"_canvasHeight",0),(0,i.Z)(this,"_canvas",null),this.gl=t,this.onUpdate=e,this.onError=n}finalize(){var t;null===(t=this._texture)||void 0===t||t.delete()}getTexture(){return this._texture||this._externalTexture}getIconMapping(t){const e=this._autoPacking?P(t):t;return this._mapping[e]||{}}setProps({loadOptions:t,autoPacking:e,iconAtlas:n,iconMapping:i,textureParameters:o}){var s;t&&(this._loadOptions=t),void 0!==e&&(this._autoPacking=e),i&&(this._mapping=i),n&&(null===(s=this._texture)||void 0===s||s.delete(),this._texture=null,this._externalTexture=n),o&&(this._textureParameters=o)}get isLoaded(){return 0===this._pendingCount}packIcons(t,e){if(!this._autoPacking||"undefined"==typeof document)return;const n=Object.values(function(t,e,n){if(!t||!e)return null;n=n||{};const i={},{iterable:o,objectInfo:s}=(0,y.jB)(t);for(const t of o){s.index++;const o=e(t,s),r=P(o);if(!o)throw new Error("Icon is missing.");if(!o.url)throw new Error("Icon url is missing.");i[r]||n[r]&&o.url===n[r].url||(i[r]={...o,source:t,sourceIndex:s.index})}return i}(t,e,this._mapping)||{});if(n.length>0){const{mapping:t,xOffset:e,yOffset:i,rowHeight:o,canvasHeight:s}=function({icons:t,buffer:e,mapping:n={},xOffset:i=0,yOffset:o=0,rowHeight:s=0,canvasWidth:r}){let a=[];for(let l=0;l<t.length;l++){const c=t[l];if(!n[P(c)]){const{height:t,width:l}=c;i+l+e>r&&(_(n,a,o),i=0,o=s+o+e,s=0,a=[]),a.push({icon:c,xOffset:i}),i=i+l+e,s=Math.max(s,t)}}return a.length>0&&_(n,a,o),{mapping:n,rowHeight:s,xOffset:i,yOffset:o,canvasWidth:r,canvasHeight:(l=s+o+e,Math.pow(2,Math.ceil(Math.log2(l))))};var l}({icons:n,buffer:this._buffer,canvasWidth:this._canvasWidth,mapping:this._mapping,rowHeight:this._rowHeight,xOffset:this._xOffset,yOffset:this._yOffset});this._rowHeight=o,this._mapping=t,this._xOffset=e,this._yOffset=i,this._canvasHeight=s,this._texture||(this._texture=new f.Z(this.gl,{width:this._canvasWidth,height:this._canvasHeight,parameters:this._textureParameters||x})),this._texture.height!==this._canvasHeight&&(this._texture=function(t,e,n,i){const o=t.width,s=t.height,r=new f.Z(t.gl,{width:e,height:n,parameters:i});return(0,p.Lv)(t,r,{targetY:0,width:o,height:s}),t.delete(),r}(this._texture,this._canvasWidth,this._canvasHeight,this._textureParameters||x)),this.onUpdate(),this._canvas=this._canvas||document.createElement("canvas"),this._loadIcons(n)}}_loadIcons(t){const e=this._canvas.getContext("2d",{willReadFrequently:!0});for(const n of t)this._pendingCount++,(0,h.z)(n.url,this._loadOptions).then((t=>{const i=P(n),o=this._mapping[i],{x:s,y:r,width:a,height:l}=o,{data:c,width:u,height:d}=m(e,t,a,l);this._texture.setSubImageData({data:c,x:s+(a-u)/2,y:r+(l-d)/2,width:u,height:d}),o.width=u,o.height=d,this._texture.generateMipmap(),this.onUpdate()})).catch((t=>{this.onError({url:n.url,source:n.source,sourceIndex:n.sourceIndex,loadOptions:this._loadOptions,error:t})})).finally((()=>{this._pendingCount--}))}}const C=[0,0,0,255],S={iconAtlas:{type:"image",value:null,async:!0},iconMapping:{type:"object",value:{},async:!0},sizeScale:{type:"number",value:1,min:0},billboard:!0,sizeUnits:"pixels",sizeMinPixels:{type:"number",min:0,value:0},sizeMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},alphaCutoff:{type:"number",value:.05,min:0,max:1},getPosition:{type:"accessor",value:t=>t.position},getIcon:{type:"accessor",value:t=>t.icon},getColor:{type:"accessor",value:C},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},onIconError:{type:"function",value:null,optional:!0},textureParameters:{type:"object",ignore:!0}};class L extends r.Z{constructor(...t){super(...t),(0,i.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:"#define SHADER_NAME icon-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\nattribute vec4 instanceIconFrames;\nattribute float instanceColorModes;\nattribute vec2 instanceOffsets;\nattribute vec2 instancePixelOffset;\n\nuniform float sizeScale;\nuniform vec2 iconsTextureDim;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform bool billboard;\nuniform int sizeUnits;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = angle * PI / 180.0;\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n\n  vec2 iconSize = instanceIconFrames.zw;\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits), \n    sizeMinPixels, sizeMaxPixels\n  );\n  float instanceScale = iconSize.y == 0.0 ? 0.0 : sizePixels / iconSize.y;\n  vec2 pixelOffset = positions / 2.0 * iconSize + instanceOffsets;\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles) * instanceScale;\n  pixelOffset += instancePixelOffset;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position); \n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  vTextureCoords = mix(\n    instanceIconFrames.xy,\n    instanceIconFrames.xy + iconSize,\n    (positions.xy + 1.0) / 2.0\n  ) / iconsTextureDim;\n\n  vColor = instanceColors;\n  DECKGL_FILTER_COLOR(vColor, geometry);\n\n  vColorMode = instanceColorModes;\n}\n",fs:"#define SHADER_NAME icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float alphaCutoff;\n\nvarying float vColorMode;\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec4 texColor = texture2D(iconsTexture, vTextureCoords);\n  vec3 color = mix(texColor.rgb, vColor.rgb, vColorMode);\n  float a = texColor.a * opacity * vColor.a;\n\n  if (a < alphaCutoff) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, a);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[a.Z,l.Z]})}initializeState(){this.state={iconManager:new b(this.context.gl,{onUpdate:this._onUpdate.bind(this),onError:this._onError.bind(this)})},this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceOffsets:{size:2,accessor:"getIcon",transform:this.getInstanceOffset},instanceIconFrames:{size:4,accessor:"getIcon",transform:this.getInstanceIconFrame},instanceColorModes:{size:1,type:5121,accessor:"getIcon",transform:this.getInstanceColorMode},instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,transition:!0,accessor:"getColor",defaultValue:C},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instancePixelOffset:{size:2,transition:!0,accessor:"getPixelOffset"}})}updateState(t){super.updateState(t);const{props:e,oldProps:n,changeFlags:i}=t,o=this.getAttributeManager(),{iconAtlas:s,iconMapping:r,data:a,getIcon:l,textureParameters:c}=e,{iconManager:u}=this.state,d=s||this.internalState.isAsyncPropLoading("iconAtlas");if(u.setProps({loadOptions:e.loadOptions,autoPacking:!d,iconAtlas:s,iconMapping:d?r:null,textureParameters:c}),d?n.iconMapping!==e.iconMapping&&o.invalidate("getIcon"):(i.dataChanged||i.updateTriggersChanged&&(i.updateTriggersChanged.all||i.updateTriggersChanged.getIcon))&&u.packIcons(a,l),i.extensionsChanged){var g;const{gl:t}=this.context;null===(g=this.state.model)||void 0===g||g.delete(),this.state.model=this._getModel(t),o.invalidateAll()}}get isLoaded(){return super.isLoaded&&this.state.iconManager.isLoaded}finalizeState(t){super.finalizeState(t),this.state.iconManager.finalize()}draw({uniforms:t}){const{sizeScale:e,sizeMinPixels:n,sizeMaxPixels:i,sizeUnits:o,billboard:s,alphaCutoff:r}=this.props,{iconManager:a}=this.state,l=a.getTexture();l&&this.state.model.setUniforms(t).setUniforms({iconsTexture:l,iconsTextureDim:[l.width,l.height],sizeUnits:c.iI[o],sizeScale:e,sizeMinPixels:n,sizeMaxPixels:i,billboard:s,alphaCutoff:r}).draw()}_getModel(t){return new d.Z(t,{...this.getShaders(),id:this.props.id,geometry:new g.Z({drawMode:6,attributes:{positions:{size:2,value:new Float32Array([-1,-1,-1,1,1,1,1,-1])}}}),isInstanced:!0})}_onUpdate(){this.setNeedsRedraw()}_onError(t){var e;const n=null===(e=this.getCurrentLayer())||void 0===e?void 0:e.props.onIconError;n?n(t):u.Z.error(t.error.message)()}getInstanceOffset(t){const{width:e,height:n,anchorX:i=e/2,anchorY:o=n/2}=this.state.iconManager.getIconMapping(t);return[e/2-i,n/2-o]}getInstanceColorMode(t){return this.state.iconManager.getIconMapping(t).mask?1:0}getInstanceIconFrame(t){const{x:e,y:n,width:i,height:o}=this.state.iconManager.getIconMapping(t);return[e,n,i,o]}}(0,i.Z)(L,"defaultProps",S),(0,i.Z)(L,"layerName","IconLayer");var w=n(573715);const z=.75,M=[];class O extends L{constructor(...t){super(...t),(0,i.Z)(this,"state",void 0)}getShaders(){return{...super.getShaders(),fs:"#define SHADER_NAME multi-icon-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D iconsTexture;\nuniform float gamma;\nuniform bool sdf;\nuniform float alphaCutoff;\nuniform float sdfBuffer;\nuniform float outlineBuffer;\nuniform vec4 outlineColor;\n\nvarying vec4 vColor;\nvarying vec2 vTextureCoords;\nvarying vec2 uv;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  if (!picking_uActive) {\n    float alpha = texture2D(iconsTexture, vTextureCoords).a;\n    vec4 color = vColor;\n    if (sdf) {\n      float distance = alpha;\n      alpha = smoothstep(sdfBuffer - gamma, sdfBuffer + gamma, distance);\n\n      if (outlineBuffer > 0.0) {\n        float inFill = alpha;\n        float inBorder = smoothstep(outlineBuffer - gamma, outlineBuffer + gamma, distance);\n        color = mix(outlineColor, vColor, inFill);\n        alpha = inBorder;\n      }\n    }\n    float a = alpha * color.a;\n    \n    if (a < alphaCutoff) {\n      discard;\n    }\n\n    gl_FragColor = vec4(color.rgb, a * opacity);\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n"}}initializeState(){super.initializeState(),this.getAttributeManager().addInstanced({instanceOffsets:{size:2,accessor:"getIconOffsets"},instancePickingColors:{type:5121,size:3,accessor:(t,{index:e,target:n})=>this.encodePickingColor(e,n)}})}updateState(t){super.updateState(t);const{props:e,oldProps:n}=t;let{outlineColor:i}=e;i!==n.outlineColor&&(i=i.map((t=>t/255)),i[3]=Number.isFinite(i[3])?i[3]:1,this.setState({outlineColor:i})),!e.sdf&&e.outlineWidth&&u.Z.warn("".concat(this.id,": fontSettings.sdf is required to render outline"))()}draw(t){const{sdf:e,smoothing:n,outlineWidth:i}=this.props,{outlineColor:o}=this.state,s=i?Math.max(n,z*(1-i)):-1;if(t.uniforms={...t.uniforms,sdfBuffer:z,outlineBuffer:s,gamma:n,sdf:Boolean(e),outlineColor:o},super.draw(t),e&&i){const{iconManager:t}=this.state;t.getTexture()&&this.state.model.draw({uniforms:{outlineBuffer:z}})}}getInstanceOffset(t){return t?Array.from(t).flatMap((t=>super.getInstanceOffset(t))):M}getInstanceColorMode(t){return 1}getInstanceIconFrame(t){return t?Array.from(t).flatMap((t=>super.getInstanceIconFrame(t))):M}}(0,i.Z)(O,"defaultProps",{getIconOffsets:{type:"accessor",value:t=>t.offsets},alphaCutoff:.001,smoothing:.1,outlineWidth:0,outlineColor:{type:"color",value:[0,0,0,255]}}),(0,i.Z)(O,"layerName","MultiIconLayer");const A=1e20;class F{constructor({fontSize:t=24,buffer:e=3,radius:n=8,cutoff:i=.25,fontFamily:o="sans-serif",fontWeight:s="normal",fontStyle:r="normal"}={}){this.buffer=e,this.cutoff=i,this.radius=n;const a=this.size=t+4*e,l=this._createCanvas(a),c=this.ctx=l.getContext("2d",{willReadFrequently:!0});c.font=`${r} ${s} ${t}px ${o}`,c.textBaseline="alphabetic",c.textAlign="left",c.fillStyle="black",this.gridOuter=new Float64Array(a*a),this.gridInner=new Float64Array(a*a),this.f=new Float64Array(a),this.z=new Float64Array(a+1),this.v=new Uint16Array(a)}_createCanvas(t){const e=document.createElement("canvas");return e.width=e.height=t,e}draw(t){const{width:e,actualBoundingBoxAscent:n,actualBoundingBoxDescent:i,actualBoundingBoxLeft:o,actualBoundingBoxRight:s}=this.ctx.measureText(t),r=Math.ceil(n),a=Math.max(0,Math.min(this.size-this.buffer,Math.ceil(s-o))),l=Math.min(this.size-this.buffer,r+Math.ceil(i)),c=a+2*this.buffer,u=l+2*this.buffer,d=Math.max(c*u,0),g=new Uint8ClampedArray(d),f={data:g,width:c,height:u,glyphWidth:a,glyphHeight:l,glyphTop:r,glyphLeft:0,glyphAdvance:e};if(0===a||0===l)return f;const{ctx:p,buffer:h,gridInner:y,gridOuter:v}=this;p.clearRect(h,h,a,l),p.fillText(t,h,h+r);const x=p.getImageData(h,h,a,l);v.fill(A,0,d),y.fill(0,0,d);for(let t=0;t<l;t++)for(let e=0;e<a;e++){const n=x.data[4*(t*a+e)+3]/255;if(0===n)continue;const i=(t+h)*c+e+h;if(1===n)v[i]=0,y[i]=A;else{const t=.5-n;v[i]=t>0?t*t:0,y[i]=t<0?t*t:0}}I(v,0,0,c,u,c,this.f,this.v,this.z),I(y,h,h,a,l,c,this.f,this.v,this.z);for(let t=0;t<d;t++){const e=Math.sqrt(v[t])-Math.sqrt(y[t]);g[t]=Math.round(255-255*(e/this.radius+this.cutoff))}return f}}function I(t,e,n,i,o,s,r,a,l){for(let c=e;c<e+i;c++)T(t,n*s+c,s,o,r,a,l);for(let c=n;c<n+o;c++)T(t,c*s+e,1,i,r,a,l)}function T(t,e,n,i,o,s,r){s[0]=0,r[0]=-A,r[1]=A,o[0]=t[e];for(let a=1,l=0,c=0;a<i;a++){o[a]=t[e+a*n];const i=a*a;do{const t=s[l];c=(o[a]-o[t]+i-t*t)/(a-t)/2}while(c<=r[l]&&--l>-1);l++,s[l]=a,r[l]=c,r[l+1]=A}for(let a=0,l=0;a<i;a++){for(;r[l+1]<a;)l++;const i=s[l],c=a-i;t[e+a*n]=o[i]+c*c}}const E=[];function R(t,e,n,i){let o=0;for(let r=e;r<n;r++){var s;o+=(null===(s=i[t[r]])||void 0===s?void 0:s.layoutWidth)||0}return o}function k(t,e,n,i,o,s){let r=e,a=0;for(let l=e;l<n;l++){const e=R(t,l,l+1,o);a+e>i&&(r<l&&s.push(l),r=l,a=0),a+=e}return a}function W(t,e,n,i,o=0,s){void 0===s&&(s=t.length);const r=[];return"break-all"===e?k(t,o,s,n,i,r):function(t,e,n,i,o,s){let r=e,a=e,l=e,c=0;for(let u=e;u<n;u++)if(" "===t[u]?l=u+1:" "!==t[u+1]&&u+1!==n||(l=u+1),l>a){let e=R(t,a,l,o);c+e>i&&(r<a&&(s.push(a),r=a,c=0),e>i&&(e=k(t,a,l,i,o,s),r=s[s.length-1])),a=l,c+=e}}(t,o,s,n,i,r),r}function B(t,e,n,i,o,s){let r=0,a=0;for(let s=e;s<n;s++){const e=t[s],n=i[e];n?(a||(a=n.layoutHeight),o[s]=r+n.layoutWidth/2,r+=n.layoutWidth):(u.Z.warn("Missing character: ".concat(e," (").concat(e.codePointAt(0),")"))(),o[s]=r,r+=32)}s[0]=r,s[1]=a}class Z{constructor(t=5){(0,i.Z)(this,"limit",void 0),(0,i.Z)(this,"_cache",{}),(0,i.Z)(this,"_order",[]),this.limit=t}get(t){const e=this._cache[t];return e&&(this._deleteOrder(t),this._appendOrder(t)),e}set(t,e){this._cache[t]?(this.delete(t),this._cache[t]=e,this._appendOrder(t)):(Object.keys(this._cache).length===this.limit&&this.delete(this._order[0]),this._cache[t]=e,this._appendOrder(t))}delete(t){this._cache[t]&&(delete this._cache[t],this._deleteOrder(t))}_deleteOrder(t){const e=this._order.indexOf(t);e>=0&&this._order.splice(e,1)}_appendOrder(t){this._order.push(t)}}const j={fontFamily:"Monaco, monospace",fontWeight:"normal",characterSet:function(){const t=[];for(let e=32;e<128;e++)t.push(String.fromCharCode(e));return t}(),fontSize:64,buffer:4,sdf:!1,cutoff:.25,radius:12,smoothing:.1};let U=new Z(3);function D(t,e){for(let n=0;n<t.length;n++)e.data[4*n+3]=t[n]}function G(t,e,n,i){t.font="".concat(i," ").concat(n,"px ").concat(e),t.fillStyle="#000",t.textBaseline="alphabetic",t.textAlign="left"}class N{constructor(){(0,i.Z)(this,"props",{...j}),(0,i.Z)(this,"_key",void 0),(0,i.Z)(this,"_atlas",void 0)}get texture(){return this._atlas}get mapping(){return this._atlas&&this._atlas.mapping}get scale(){const{fontSize:t,buffer:e}=this.props;return(1.2*t+2*e)/t}setProps(t={}){Object.assign(this.props,t),this._key=this._getKey();const e=function(t,e){let n;n="string"==typeof e?new Set(Array.from(e)):new Set(e);const i=U.get(t);if(!i)return n;for(const t in i.mapping)n.has(t)&&n.delete(t);return n}(this._key,this.props.characterSet),n=U.get(this._key);if(n&&0===e.size)return void(this._atlas!==n&&(this._atlas=n));const i=this._generateFontAtlas(e,n);this._atlas=i,U.set(this._key,i)}_generateFontAtlas(t,e){const{fontFamily:n,fontWeight:i,fontSize:o,buffer:s,sdf:r,radius:a,cutoff:l}=this.props;let c=e&&e.data;c||(c=document.createElement("canvas"),c.width=1024);const u=c.getContext("2d",{willReadFrequently:!0});G(u,n,o,i);const{mapping:d,canvasHeight:g,xOffset:f,yOffset:p}=function({characterSet:t,getFontWidth:e,fontHeight:n,buffer:i,maxCanvasWidth:o,mapping:s={},xOffset:r=0,yOffset:a=0}){let l=0,c=r;const u=n+2*i;for(const r of t)if(!s[r]){const t=e(r);c+t+2*i>o&&(c=0,l++),s[r]={x:c+i,y:a+l*u+i,width:t,height:u,layoutWidth:t,layoutHeight:n},c+=t+2*i}return{mapping:s,xOffset:c,yOffset:a+l*u,canvasHeight:(d=a+(l+1)*u,Math.pow(2,Math.ceil(Math.log2(d))))};var d}({getFontWidth:t=>u.measureText(t).width,fontHeight:1.2*o,buffer:s,characterSet:t,maxCanvasWidth:1024,...e&&{mapping:e.mapping,xOffset:e.xOffset,yOffset:e.yOffset}});if(c.height!==g){const t=u.getImageData(0,0,c.width,c.height);c.height=g,u.putImageData(t,0,0)}if(G(u,n,o,i),r){const e=new F({fontSize:o,buffer:s,radius:a,cutoff:l,fontFamily:n,fontWeight:"".concat(i)});for(const n of t){const{data:t,width:i,height:s,glyphTop:r}=e.draw(n);d[n].width=i,d[n].layoutOffsetY=.9*o-r;const a=u.createImageData(i,s);D(t,a),u.putImageData(a,d[n].x,d[n].y)}}else for(const e of t)u.fillText(e,d[e].x,d[e].y+s+.9*o);return{xOffset:f,yOffset:p,mapping:d,data:c,width:c.width,height:c.height}}_getKey(){const{fontFamily:t,fontWeight:e,fontSize:n,buffer:i,sdf:o,radius:s,cutoff:r}=this.props;return o?"".concat(t," ").concat(e," ").concat(n," ").concat(i," ").concat(s," ").concat(r):"".concat(t," ").concat(e," ").concat(n," ").concat(i)}}const H={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,padding:{type:"array",value:[0,0,0,0]},getPosition:{type:"accessor",value:t=>t.position},getSize:{type:"accessor",value:1},getAngle:{type:"accessor",value:0},getPixelOffset:{type:"accessor",value:[0,0]},getBoundingRect:{type:"accessor",value:[0,0,0,0]},getFillColor:{type:"accessor",value:[0,0,0,255]},getLineColor:{type:"accessor",value:[0,0,0,255]},getLineWidth:{type:"accessor",value:1}};class V extends r.Z{constructor(...t){super(...t),(0,i.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:"#define SHADER_NAME text-background-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute vec4 instanceRects;\nattribute float instanceSizes;\nattribute float instanceAngles;\nattribute vec2 instancePixelOffsets;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform bool billboard;\nuniform float opacity;\nuniform float sizeScale;\nuniform float sizeMinPixels;\nuniform float sizeMaxPixels;\nuniform vec4 padding;\nuniform int sizeUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvec2 rotate_by_angle(vec2 vertex, float angle) {\n  float angle_radian = radians(angle);\n  float cos_angle = cos(angle_radian);\n  float sin_angle = sin(angle_radian);\n  mat2 rotationMatrix = mat2(cos_angle, -sin_angle, sin_angle, cos_angle);\n  return rotationMatrix * vertex;\n}\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  geometry.uv = positions;\n  geometry.pickingColor = instancePickingColors;\n  uv = positions;\n  vLineWidth = instanceLineWidths;\n  float sizePixels = clamp(\n    project_size_to_pixel(instanceSizes * sizeScale, sizeUnits),\n    sizeMinPixels, sizeMaxPixels\n  );\n\n  dimensions = instanceRects.zw * sizePixels + padding.xy + padding.zw;\n\n  vec2 pixelOffset = (positions * instanceRects.zw + instanceRects.xy) * sizePixels + mix(-padding.xy, padding.zw, positions);\n  pixelOffset = rotate_by_angle(pixelOffset, instanceAngles);\n  pixelOffset += instancePixelOffsets;\n  pixelOffset.y *= -1.0;\n\n  if (billboard)  {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = vec3(pixelOffset, 0.0);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset_common = vec3(project_pixel_size(pixelOffset), 0.0);\n    DECKGL_FILTER_SIZE(offset_common, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset_common, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n",fs:"#define SHADER_NAME text-background-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool stroked;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying float vLineWidth;\nvarying vec2 uv;\nvarying vec2 dimensions;\n\nvoid main(void) {\n  geometry.uv = uv;\n\n  vec2 pixelPosition = uv * dimensions;\n  if (stroked) {\n    float distToEdge = min(\n      min(pixelPosition.x, dimensions.x - pixelPosition.x),\n      min(pixelPosition.y, dimensions.y - pixelPosition.y)\n    );\n    float isBorder = smoothedge(distToEdge, vLineWidth);\n    gl_FragColor = mix(vFillColor, vLineColor, isBorder);\n  } else {\n    gl_FragColor = vFillColor;\n  }\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[a.Z,l.Z]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceSizes:{size:1,transition:!0,accessor:"getSize",defaultValue:1},instanceAngles:{size:1,transition:!0,accessor:"getAngle"},instanceRects:{size:4,accessor:"getBoundingRect"},instancePixelOffsets:{size:2,transition:!0,accessor:"getPixelOffset"},instanceFillColors:{size:4,transition:!0,normalized:!0,type:5121,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:4,transition:!0,normalized:!0,type:5121,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(t){super.updateState(t);const{changeFlags:e}=t;if(e.extensionsChanged){var n;const{gl:t}=this.context;null===(n=this.state.model)||void 0===n||n.delete(),this.state.model=this._getModel(t),this.getAttributeManager().invalidateAll()}}draw({uniforms:t}){const{billboard:e,sizeScale:n,sizeUnits:i,sizeMinPixels:o,sizeMaxPixels:s,getLineWidth:r}=this.props;let{padding:a}=this.props;a.length<4&&(a=[a[0],a[1],a[0],a[1]]),this.state.model.setUniforms(t).setUniforms({billboard:e,stroked:Boolean(r),padding:a,sizeUnits:c.iI[i],sizeScale:n,sizeMinPixels:o,sizeMaxPixels:s}).draw()}_getModel(t){return new d.Z(t,{...this.getShaders(),id:this.props.id,geometry:new g.Z({drawMode:6,vertexCount:4,attributes:{positions:{size:2,value:new Float32Array([0,0,1,0,1,1,0,1])}}}),isInstanced:!0})}}(0,i.Z)(V,"defaultProps",H),(0,i.Z)(V,"layerName","TextBackgroundLayer");const K={start:1,middle:0,end:-1},J={top:1,center:0,bottom:-1},q=[0,0,0,255],X={billboard:!0,sizeScale:1,sizeUnits:"pixels",sizeMinPixels:0,sizeMaxPixels:Number.MAX_SAFE_INTEGER,background:!1,getBackgroundColor:{type:"accessor",value:[255,255,255,255]},getBorderColor:{type:"accessor",value:q},getBorderWidth:{type:"accessor",value:0},backgroundPadding:{type:"array",value:[0,0,0,0]},characterSet:{type:"object",value:j.characterSet},fontFamily:j.fontFamily,fontWeight:j.fontWeight,lineHeight:1,outlineWidth:{type:"number",value:0,min:0},outlineColor:{type:"color",value:q},fontSettings:{type:"object",value:{},compare:1},wordBreak:"break-word",maxWidth:{type:"number",value:-1},getText:{type:"accessor",value:t=>t.text},getPosition:{type:"accessor",value:t=>t.position},getColor:{type:"accessor",value:q},getSize:{type:"accessor",value:32},getAngle:{type:"accessor",value:0},getTextAnchor:{type:"accessor",value:"middle"},getAlignmentBaseline:{type:"accessor",value:"center"},getPixelOffset:{type:"accessor",value:[0,0]},backgroundColor:{deprecatedFor:["background","getBackgroundColor"]}};class Y extends o.Z{constructor(...t){super(...t),(0,i.Z)(this,"state",void 0),(0,i.Z)(this,"getBoundingRect",((t,e)=>{let{size:[n,i]}=this.transformParagraph(t,e);const{fontSize:o}=this.state.fontAtlasManager.props;n/=o,i/=o;const{getTextAnchor:s,getAlignmentBaseline:r}=this.props;return[(K["function"==typeof s?s(t,e):s]-1)*n/2,(J["function"==typeof r?r(t,e):r]-1)*i/2,n,i]})),(0,i.Z)(this,"getIconOffsets",((t,e)=>{const{getTextAnchor:n,getAlignmentBaseline:i}=this.props,{x:o,y:s,rowWidth:r,size:[a,l]}=this.transformParagraph(t,e),c=K["function"==typeof n?n(t,e):n],u=J["function"==typeof i?i(t,e):i],d=o.length,g=new Array(2*d);let f=0;for(let t=0;t<d;t++){const e=(1-c)*(a-r[t])/2;g[f++]=(c-1)*a/2+e+o[t],g[f++]=(u-1)*l/2+s[t]}return g}))}initializeState(){this.state={styleVersion:0,fontAtlasManager:new N},this.props.maxWidth>0&&u.Z.warn("v8.9 breaking change: TextLayer maxWidth is now relative to text size")()}updateState(t){const{props:e,oldProps:n,changeFlags:i}=t;(i.dataChanged||i.updateTriggersChanged&&(i.updateTriggersChanged.all||i.updateTriggersChanged.getText))&&this._updateText(),(this._updateFontAtlas()||e.lineHeight!==n.lineHeight||e.wordBreak!==n.wordBreak||e.maxWidth!==n.maxWidth)&&this.setState({styleVersion:this.state.styleVersion+1})}getPickingInfo({info:t}){return t.object=t.index>=0?this.props.data[t.index]:null,t}_updateFontAtlas(){const{fontSettings:t,fontFamily:e,fontWeight:n}=this.props,{fontAtlasManager:i,characterSet:o}=this.state,s={...t,characterSet:o,fontFamily:e,fontWeight:n};if(!i.mapping)return i.setProps(s),!0;for(const t in s)if(s[t]!==i.props[t])return i.setProps(s),!0;return!1}_updateText(){var t;const{data:e,characterSet:n}=this.props,i=null===(t=e.attributes)||void 0===t?void 0:t.getText;let o,{getText:s}=this.props,r=e.startIndices;const a="auto"===n&&new Set;if(i&&r){const{texts:t,characterCount:n}=function({value:t,length:e,stride:n,offset:i,startIndices:o,characterSet:s}){const r=t.BYTES_PER_ELEMENT,a=n?n/r:1,l=i?i/r:0,c=o[e]||Math.ceil((t.length-l)/a),u=s&&new Set,d=new Array(e);let g=t;if(a>1||l>0){g=new(0,t.constructor)(c);for(let e=0;e<c;e++)g[e]=t[e*a+l]}for(let t=0;t<e;t++){const e=o[t],n=o[t+1]||c,i=g.subarray(e,n);d[t]=String.fromCodePoint.apply(null,i),u&&i.forEach(u.add,u)}if(u)for(const t of u)s.add(String.fromCodePoint(t));return{texts:d,characterCount:c}}({...ArrayBuffer.isView(i)?{value:i}:i,length:e.length,startIndices:r,characterSet:a});o=n,s=(e,{index:n})=>t[n]}else{const{iterable:t,objectInfo:n}=(0,y.jB)(e);r=[0],o=0;for(const e of t){n.index++;const t=Array.from(s(e,n)||"");a&&t.forEach(a.add,a),o+=t.length,r.push(o)}}this.setState({getText:s,startIndices:r,numInstances:o,characterSet:a||n})}transformParagraph(t,e){const{fontAtlasManager:n}=this.state,i=n.mapping,o=this.state.getText,{wordBreak:s,lineHeight:r,maxWidth:a}=this.props;return function(t,e,n,i,o){const s=Array.from(t),r=s.length,a=new Array(r),l=new Array(r),c=new Array(r),u=("break-word"===n||"break-all"===n)&&isFinite(i)&&i>0,d=[0,0],g=[0,0];let f=0,p=0,h=0;for(let t=0;t<=r;t++){const v=s[t];if("\n"!==v&&t!==r||(h=t),h>p){const t=u?W(s,n,i,o,p,h):E;for(let n=0;n<=t.length;n++){const i=0===n?p:t[n-1],r=n<t.length?t[n]:h;B(s,i,r,o,a,g);for(let t=i;t<r;t++){var y;const e=(null===(y=o[s[t]])||void 0===y?void 0:y.layoutOffsetY)||0;l[t]=f+g[1]/2+e,c[t]=g[0]}f+=g[1]*e,d[0]=Math.max(d[0],g[0])}p=h}"\n"===v&&(a[p]=0,l[p]=0,c[p]=0,p++)}return d[1]=f,{x:a,y:l,rowWidth:c,size:d}}(o(t,e)||"",r,s,a*n.props.fontSize,i)}renderLayers(){const{startIndices:t,numInstances:e,getText:n,fontAtlasManager:{scale:i,texture:o,mapping:s},styleVersion:r}=this.state,{data:a,_dataDiff:l,getPosition:c,getColor:u,getSize:d,getAngle:g,getPixelOffset:f,getBackgroundColor:p,getBorderColor:h,getBorderWidth:y,backgroundPadding:v,background:x,billboard:m,fontSettings:P,outlineWidth:_,outlineColor:b,sizeScale:C,sizeUnits:S,sizeMinPixels:L,sizeMaxPixels:w,transitions:z,updateTriggers:M}=this.props,A=this.getSubLayerClass("characters",O),F=this.getSubLayerClass("background",V);return[x&&new F({getFillColor:p,getLineColor:h,getLineWidth:y,padding:v,getPosition:c,getSize:d,getAngle:g,getPixelOffset:f,billboard:m,sizeScale:C,sizeUnits:S,sizeMinPixels:L,sizeMaxPixels:w,transitions:z&&{getPosition:z.getPosition,getAngle:z.getAngle,getSize:z.getSize,getFillColor:z.getBackgroundColor,getLineColor:z.getBorderColor,getLineWidth:z.getBorderWidth,getPixelOffset:z.getPixelOffset}},this.getSubLayerProps({id:"background",updateTriggers:{getPosition:M.getPosition,getAngle:M.getAngle,getSize:M.getSize,getFillColor:M.getBackgroundColor,getLineColor:M.getBorderColor,getLineWidth:M.getBorderWidth,getPixelOffset:M.getPixelOffset,getBoundingRect:{getText:M.getText,getTextAnchor:M.getTextAnchor,getAlignmentBaseline:M.getAlignmentBaseline,styleVersion:r}}}),{data:a.attributes&&a.attributes.background?{length:a.length,attributes:a.attributes.background}:a,_dataDiff:l,autoHighlight:!1,getBoundingRect:this.getBoundingRect}),new A({sdf:P.sdf,smoothing:Number.isFinite(P.smoothing)?P.smoothing:j.smoothing,outlineWidth:_/(P.radius||j.radius),outlineColor:b,iconAtlas:o,iconMapping:s,getPosition:c,getColor:u,getSize:d,getAngle:g,getPixelOffset:f,billboard:m,sizeScale:C*i,sizeUnits:S,sizeMinPixels:L*i,sizeMaxPixels:w*i,transitions:z&&{getPosition:z.getPosition,getAngle:z.getAngle,getColor:z.getColor,getSize:z.getSize,getPixelOffset:z.getPixelOffset}},this.getSubLayerProps({id:"characters",updateTriggers:{all:M.getText,getPosition:M.getPosition,getAngle:M.getAngle,getColor:M.getColor,getSize:M.getSize,getPixelOffset:M.getPixelOffset,getIconOffsets:{getTextAnchor:M.getTextAnchor,getAlignmentBaseline:M.getAlignmentBaseline,styleVersion:r}}}),{data:a,_dataDiff:l,startIndices:t,numInstances:e,getIconOffsets:this.getIconOffsets,getIcon:n})]}static set fontAtlasCacheLimit(t){!function(t){u.Z.assert(Number.isFinite(t)&&t>=3,"Invalid cache limit"),U=new Z(t)}(t)}}(0,i.Z)(Y,"defaultProps",X),(0,i.Z)(Y,"layerName","TextLayer");var $=n(248897),Q=n(491567);const tt={circle:{type:w.Z,props:{filled:"filled",stroked:"stroked",lineWidthMaxPixels:"lineWidthMaxPixels",lineWidthMinPixels:"lineWidthMinPixels",lineWidthScale:"lineWidthScale",lineWidthUnits:"lineWidthUnits",pointRadiusMaxPixels:"radiusMaxPixels",pointRadiusMinPixels:"radiusMinPixels",pointRadiusScale:"radiusScale",pointRadiusUnits:"radiusUnits",pointAntialiasing:"antialiasing",pointBillboard:"billboard",getFillColor:"getFillColor",getLineColor:"getLineColor",getLineWidth:"getLineWidth",getPointRadius:"getRadius"}},icon:{type:L,props:{iconAtlas:"iconAtlas",iconMapping:"iconMapping",iconSizeMaxPixels:"sizeMaxPixels",iconSizeMinPixels:"sizeMinPixels",iconSizeScale:"sizeScale",iconSizeUnits:"sizeUnits",iconAlphaCutoff:"alphaCutoff",iconBillboard:"billboard",getIcon:"getIcon",getIconAngle:"getAngle",getIconColor:"getColor",getIconPixelOffset:"getPixelOffset",getIconSize:"getSize"}},text:{type:Y,props:{textSizeMaxPixels:"sizeMaxPixels",textSizeMinPixels:"sizeMinPixels",textSizeScale:"sizeScale",textSizeUnits:"sizeUnits",textBackground:"background",textBackgroundPadding:"backgroundPadding",textFontFamily:"fontFamily",textFontWeight:"fontWeight",textLineHeight:"lineHeight",textMaxWidth:"maxWidth",textOutlineColor:"outlineColor",textOutlineWidth:"outlineWidth",textWordBreak:"wordBreak",textCharacterSet:"characterSet",textBillboard:"billboard",textFontSettings:"fontSettings",getText:"getText",getTextAngle:"getAngle",getTextColor:"getColor",getTextPixelOffset:"getPixelOffset",getTextSize:"getSize",getTextAnchor:"getTextAnchor",getTextAlignmentBaseline:"getAlignmentBaseline",getTextBackgroundColor:"getBackgroundColor",getTextBorderColor:"getBorderColor",getTextBorderWidth:"getBorderWidth"}}},et={type:$.Z,props:{lineWidthUnits:"widthUnits",lineWidthScale:"widthScale",lineWidthMinPixels:"widthMinPixels",lineWidthMaxPixels:"widthMaxPixels",lineJointRounded:"jointRounded",lineCapRounded:"capRounded",lineMiterLimit:"miterLimit",lineBillboard:"billboard",getLineColor:"getColor",getLineWidth:"getWidth"}},nt={type:Q.Z,props:{extruded:"extruded",filled:"filled",wireframe:"wireframe",elevationScale:"elevationScale",material:"material",_full3d:"_full3d",getElevation:"getElevation",getFillColor:"getFillColor",getLineColor:"getLineColor"}};function it({type:t,props:e}){const n={};for(const i in e)n[i]=t.defaultProps[e[i]];return n}function ot(t,e){const{transitions:n,updateTriggers:i}=t.props,o={updateTriggers:{},transitions:n&&{getPosition:n.geometry}};for(const s in e){const r=e[s];let a=t.props[s];s.startsWith("get")&&(a=t.getSubLayerAccessor(a),o.updateTriggers[r]=i[s],n&&(o.transitions[r]=n[s])),o[r]=a}return o}function st(t,e,n={}){const i={pointFeatures:[],lineFeatures:[],polygonFeatures:[],polygonOutlineFeatures:[]},{startRow:o=0,endRow:s=t.length}=n;for(let n=o;n<s;n++){const o=t[n],{geometry:s}=o;if(s)if("GeometryCollection"===s.type){u.Z.assert(Array.isArray(s.geometries),"GeoJSON does not have geometries array");const{geometries:t}=s;for(let s=0;s<t.length;s++)rt(t[s],i,e,o,n)}else rt(s,i,e,o,n)}return i}function rt(t,e,n,i,o){const{type:s,coordinates:r}=t,{pointFeatures:a,lineFeatures:l,polygonFeatures:c,polygonOutlineFeatures:d}=e;if(function(t,e){let n=at[t];for(u.Z.assert(n,"Unknown GeoJSON type ".concat(t));e&&--n>0;)e=e[0];return e&&Number.isFinite(e[0])}(s,r))switch(s){case"Point":a.push(n({geometry:t},i,o));break;case"MultiPoint":r.forEach((t=>{a.push(n({geometry:{type:"Point",coordinates:t}},i,o))}));break;case"LineString":l.push(n({geometry:t},i,o));break;case"MultiLineString":r.forEach((t=>{l.push(n({geometry:{type:"LineString",coordinates:t}},i,o))}));break;case"Polygon":c.push(n({geometry:t},i,o)),r.forEach((t=>{d.push(n({geometry:{type:"LineString",coordinates:t}},i,o))}));break;case"MultiPolygon":r.forEach((t=>{c.push(n({geometry:{type:"Polygon",coordinates:t}},i,o)),t.forEach((t=>{d.push(n({geometry:{type:"LineString",coordinates:t}},i,o))}))}))}else u.Z.warn("".concat(s," coordinates are malformed"))()}const at={Point:1,MultiPoint:2,LineString:2,MultiLineString:3,Polygon:3,MultiPolygon:4};function lt(t){return t.geometry.coordinates}const ct=["points","linestrings","polygons"],ut={...it(tt.circle),...it(tt.icon),...it(tt.text),...it(et),...it(nt),stroked:!0,filled:!0,extruded:!1,wireframe:!1,_full3d:!1,iconAtlas:{type:"object",value:null},iconMapping:{type:"object",value:{}},getIcon:{type:"accessor",value:t=>t.properties.icon},getText:{type:"accessor",value:t=>t.properties.text},pointType:"circle",getRadius:{deprecatedFor:"getPointRadius"}};class dt extends o.Z{initializeState(){this.state={layerProps:{},features:{}}}updateState({props:t,changeFlags:e}){if(!e.dataChanged)return;const{data:n}=this.props,i=n&&"points"in n&&"polygons"in n&&"lines"in n;this.setState({binary:i}),i?this._updateStateBinary({props:t,changeFlags:e}):this._updateStateJSON({props:t,changeFlags:e})}_updateStateBinary({props:t,changeFlags:e}){const n=function(t,e){const n={points:{},lines:{},polygons:{},polygonsOutline:{}},{points:i,lines:o,polygons:s}=t,r=function(t,e){const n={points:null,lines:null,polygons:null};for(const i in n){const o=t[i].globalFeatureIds.value;n[i]=new Uint8ClampedArray(3*o.length);const s=[];for(let t=0;t<o.length;t++)e(o[t],s),n[i][3*t+0]=s[0],n[i][3*t+1]=s[1],n[i][3*t+2]=s[2]}return n}(t,e);return n.points.data={length:i.positions.value.length/i.positions.size,attributes:{...i.attributes,getPosition:i.positions,instancePickingColors:{size:3,value:r.points}},properties:i.properties,numericProps:i.numericProps,featureIds:i.featureIds},n.lines.data={length:o.pathIndices.value.length-1,startIndices:o.pathIndices.value,attributes:{...o.attributes,getPath:o.positions,instancePickingColors:{size:3,value:r.lines}},properties:o.properties,numericProps:o.numericProps,featureIds:o.featureIds},n.lines._pathType="open",n.polygons.data={length:s.polygonIndices.value.length-1,startIndices:s.polygonIndices.value,attributes:{...s.attributes,getPolygon:s.positions,pickingColors:{size:3,value:r.polygons}},properties:s.properties,numericProps:s.numericProps,featureIds:s.featureIds},n.polygons._normalize=!1,s.triangles&&(n.polygons.data.attributes.indices=s.triangles.value),n.polygonsOutline.data={length:s.primitivePolygonIndices.value.length-1,startIndices:s.primitivePolygonIndices.value,attributes:{...s.attributes,getPath:s.positions,instancePickingColors:{size:3,value:r.polygons}},properties:s.properties,numericProps:s.numericProps,featureIds:s.featureIds},n.polygonsOutline._pathType="open",n}(t.data,this.encodePickingColor);this.setState({layerProps:n})}_updateStateJSON({props:t,changeFlags:e}){const n=function(t){if(Array.isArray(t))return t;switch(u.Z.assert(t.type,"GeoJSON does not have type"),t.type){case"Feature":return[t];case"FeatureCollection":return u.Z.assert(Array.isArray(t.features),"GeoJSON does not have features array"),t.features;default:return[{geometry:t}]}}(t.data),i=this.getSubLayerRow.bind(this);let o={};const r={};if(Array.isArray(e.dataChanged)){const t=this.state.features;for(const e in t)o[e]=t[e].slice(),r[e]=[];for(const a of e.dataChanged){const e=st(n,i,a);for(const n in t)r[n].push((0,s.b)({data:o[n],getIndex:t=>t.__source.index,dataRange:a,replace:e[n]}))}}else o=st(n,i);const a=function(t,e){const n={points:{},lines:{},polygons:{},polygonsOutline:{}},{pointFeatures:i,lineFeatures:o,polygonFeatures:s,polygonOutlineFeatures:r}=t;return n.points.data=i,n.points._dataDiff=e.pointFeatures&&(()=>e.pointFeatures),n.points.getPosition=lt,n.lines.data=o,n.lines._dataDiff=e.lineFeatures&&(()=>e.lineFeatures),n.lines.getPath=lt,n.polygons.data=s,n.polygons._dataDiff=e.polygonFeatures&&(()=>e.polygonFeatures),n.polygons.getPolygon=lt,n.polygonsOutline.data=r,n.polygonsOutline._dataDiff=e.polygonOutlineFeatures&&(()=>e.polygonOutlineFeatures),n.polygonsOutline.getPath=lt,n}(o,r);this.setState({features:o,featuresDiff:r,layerProps:a})}getPickingInfo(t){const e=super.getPickingInfo(t),{index:n,sourceLayer:i}=e;return e.featureType=ct.find((t=>i.id.startsWith("".concat(this.id,"-").concat(t,"-")))),n>=0&&i.id.startsWith("".concat(this.id,"-points-text"))&&this.state.binary&&(e.index=this.props.data.points.globalFeatureIds.value[n]),e}_updateAutoHighlight(t){const e="".concat(this.id,"-points-"),n="points"===t.featureType;for(const i of this.getSubLayers())i.id.startsWith(e)===n&&i.updateAutoHighlight(t)}_renderPolygonLayer(){const{extruded:t,wireframe:e}=this.props,{layerProps:n}=this.state,i="polygons-fill",o=this.shouldRenderSubLayer(i,n.polygons.data)&&this.getSubLayerClass(i,nt.type);if(o){const s=ot(this,nt.props),r=t&&e;return r||delete s.getLineColor,s.updateTriggers.lineColors=r,new o(s,this.getSubLayerProps({id:i,updateTriggers:s.updateTriggers}),n.polygons)}return null}_renderLineLayers(){const{extruded:t,stroked:e}=this.props,{layerProps:n}=this.state,i="polygons-stroke",o="linestrings",s=!t&&e&&this.shouldRenderSubLayer(i,n.polygonsOutline.data)&&this.getSubLayerClass(i,et.type),r=this.shouldRenderSubLayer(o,n.lines.data)&&this.getSubLayerClass(o,et.type);if(s||r){const t=ot(this,et.props);return[s&&new s(t,this.getSubLayerProps({id:i,updateTriggers:t.updateTriggers}),n.polygonsOutline),r&&new r(t,this.getSubLayerProps({id:o,updateTriggers:t.updateTriggers}),n.lines)]}return null}_renderPointLayers(){const{pointType:t}=this.props,{layerProps:e,binary:n}=this.state;let{highlightedObjectIndex:i}=this.props;!n&&Number.isFinite(i)&&(i=e.points.data.findIndex((t=>t.__source.index===i)));const o=new Set(t.split("+")),s=[];for(const t of o){const o="points-".concat(t),r=tt[t],a=r&&this.shouldRenderSubLayer(o,e.points.data)&&this.getSubLayerClass(o,r.type);if(a){const l=ot(this,r.props);let c=e.points;if("text"===t&&n){const{instancePickingColors:t,...e}=c.data.attributes;c={...c,data:{...c.data,attributes:e}}}s.push(new a(l,this.getSubLayerProps({id:o,updateTriggers:l.updateTriggers,highlightedObjectIndex:i}),c))}}return s}renderLayers(){const{extruded:t}=this.props,e=this._renderPolygonLayer();return[!t&&e,this._renderLineLayers(),this._renderPointLayers(),t&&e]}getSubLayerAccessor(t){const{binary:e}=this.state;return e&&"function"==typeof t?(e,n)=>{const{data:i,index:o}=n,s=function(t,e){if(!t)return null;const n="startIndices"in t?t.startIndices[e]:e,i=t.featureIds.value[n];return-1!==n?function(t,e,n){const i={properties:{...t.properties[e]}};for(const e in t.numericProps)i.properties[e]=t.numericProps[e].value[n];return i}(t,i,n):null}(i,o);return t(s,n)}:super.getSubLayerAccessor(t)}}(0,i.Z)(dt,"layerName","GeoJsonLayer"),(0,i.Z)(dt,"defaultProps",ut)},248897:(t,e,n)=>{"use strict";n.d(e,{Z:()=>v});var i=n(204942),o=n(905259),s=n(537832),r=n(113717),a=n(733321),l=n(339769),c=n(453982),u=n(44500),d=n(25215);class g extends u.Z{constructor(t){super({...t,attributes:{positions:{size:3,padding:18,initialize:!0,type:t.fp64?Float64Array:Float32Array},segmentTypes:{size:1,type:Uint8ClampedArray}}})}get(t){return this.attributes[t]}getGeometryFromBuffer(t){return this.normalize?super.getGeometryFromBuffer(t):null}normalizeGeometry(t){return this.normalize?function(t,e,n,i){let o;if(Array.isArray(t[0])){const n=t.length*e;o=new Array(n);for(let n=0;n<t.length;n++)for(let i=0;i<e;i++)o[n*e+i]=t[n][i]||0}else o=t;return n?(0,d.dj)(o,{size:e,gridResolution:n}):i?(0,d.ct)(o,{size:e}):o}(t,this.positionSize,this.opts.resolution,this.opts.wrapLongitude):t}getGeometrySize(t){if(f(t)){let e=0;for(const n of t)e+=this.getGeometrySize(n);return e}const e=this.getPathLength(t);return e<2?0:this.isClosed(t)?e<3?0:e+2:e}updateGeometryAttributes(t,e){if(0!==e.geometrySize)if(t&&f(t))for(const n of t){const t=this.getGeometrySize(n);e.geometrySize=t,this.updateGeometryAttributes(n,e),e.vertexStart+=t}else this._updateSegmentTypes(t,e),this._updatePositions(t,e)}_updateSegmentTypes(t,e){const n=this.attributes.segmentTypes,i=!!t&&this.isClosed(t),{vertexStart:o,geometrySize:s}=e;n.fill(0,o,o+s),i?(n[o]=4,n[o+s-2]=4):(n[o]+=1,n[o+s-2]+=2),n[o+s-1]=4}_updatePositions(t,e){const{positions:n}=this.attributes;if(!n||!t)return;const{vertexStart:i,geometrySize:o}=e,s=new Array(3);for(let e=i,r=0;r<o;e++,r++)this.getPointOnPath(t,r,s),n[3*e]=s[0],n[3*e+1]=s[1],n[3*e+2]=s[2]}getPathLength(t){return t.length/this.positionSize}getPointOnPath(t,e,n=[]){const{positionSize:i}=this;e*i>=t.length&&(e+=1-t.length/i);const o=e*i;return n[0]=t[o],n[1]=t[o+1],n[2]=3===i&&t[o+2]||0,n}isClosed(t){if(!this.normalize)return Boolean(this.opts.loop);const{positionSize:e}=this,n=t.length-e;return t[0]===t[n]&&t[1]===t[n+1]&&(2===e||t[2]===t[n+2])}}function f(t){return Array.isArray(t[0])}const p=[0,0,0,255],h={widthUnits:"meters",widthScale:{type:"number",min:0,value:1},widthMinPixels:{type:"number",min:0,value:0},widthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},jointRounded:!1,capRounded:!1,miterLimit:{type:"number",min:0,value:4},billboard:!1,_pathType:null,getPath:{type:"accessor",value:t=>t.path},getColor:{type:"accessor",value:p},getWidth:{type:"accessor",value:1},rounded:{deprecatedFor:["jointRounded","capRounded"]}},y={enter:(t,e)=>e.length?e.subarray(e.length-t.length):t};class v extends o.Z{constructor(...t){super(...t),(0,i.Z)(this,"state",void 0)}getShaders(){return super.getShaders({vs:"#define SHADER_NAME path-layer-vertex-shader\n\nattribute vec2 positions;\n\nattribute float instanceTypes;\nattribute vec3 instanceStartPositions;\nattribute vec3 instanceEndPositions;\nattribute vec3 instanceLeftPositions;\nattribute vec3 instanceRightPositions;\nattribute vec3 instanceLeftPositions64Low;\nattribute vec3 instanceStartPositions64Low;\nattribute vec3 instanceEndPositions64Low;\nattribute vec3 instanceRightPositions64Low;\nattribute float instanceStrokeWidths;\nattribute vec4 instanceColors;\nattribute vec3 instancePickingColors;\n\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform float jointType;\nuniform float capType;\nuniform float miterLimit;\nuniform bool billboard;\nuniform int widthUnits;\n\nuniform float opacity;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nconst float EPSILON = 0.001;\nconst vec3 ZERO_OFFSET = vec3(0.0);\n\nfloat flipIfTrue(bool flag) {\n  return -(float(flag) * 2. - 1.);\n}\nvec3 getLineJoinOffset(\n  vec3 prevPoint, vec3 currPoint, vec3 nextPoint,\n  vec2 width\n) {\n  bool isEnd = positions.x > 0.0;\n  float sideOfPath = positions.y;\n  float isJoint = float(sideOfPath == 0.0);\n\n  vec3 deltaA3 = (currPoint - prevPoint);\n  vec3 deltaB3 = (nextPoint - currPoint);\n\n  mat3 rotationMatrix;\n  bool needsRotation = !billboard && project_needs_rotation(currPoint, rotationMatrix);\n  if (needsRotation) {\n    deltaA3 = deltaA3 * rotationMatrix;\n    deltaB3 = deltaB3 * rotationMatrix;\n  }\n  vec2 deltaA = deltaA3.xy / width;\n  vec2 deltaB = deltaB3.xy / width;\n\n  float lenA = length(deltaA);\n  float lenB = length(deltaB);\n\n  vec2 dirA = lenA > 0. ? normalize(deltaA) : vec2(0.0, 0.0);\n  vec2 dirB = lenB > 0. ? normalize(deltaB) : vec2(0.0, 0.0);\n\n  vec2 perpA = vec2(-dirA.y, dirA.x);\n  vec2 perpB = vec2(-dirB.y, dirB.x);\n  vec2 tangent = dirA + dirB;\n  tangent = length(tangent) > 0. ? normalize(tangent) : perpA;\n  vec2 miterVec = vec2(-tangent.y, tangent.x);\n  vec2 dir = isEnd ? dirA : dirB;\n  vec2 perp = isEnd ? perpA : perpB;\n  float L = isEnd ? lenA : lenB;\n  float sinHalfA = abs(dot(miterVec, perp));\n  float cosHalfA = abs(dot(dirA, miterVec));\n  float turnDirection = flipIfTrue(dirA.x * dirB.y >= dirA.y * dirB.x);\n  float cornerPosition = sideOfPath * turnDirection;\n\n  float miterSize = 1.0 / max(sinHalfA, EPSILON);\n  miterSize = mix(\n    min(miterSize, max(lenA, lenB) / max(cosHalfA, EPSILON)),\n    miterSize,\n    step(0.0, cornerPosition)\n  );\n\n  vec2 offsetVec = mix(miterVec * miterSize, perp, step(0.5, cornerPosition))\n    * (sideOfPath + isJoint * turnDirection);\n  bool isStartCap = lenA == 0.0 || (!isEnd && (instanceTypes == 1.0 || instanceTypes == 3.0));\n  bool isEndCap = lenB == 0.0 || (isEnd && (instanceTypes == 2.0 || instanceTypes == 3.0));\n  bool isCap = isStartCap || isEndCap;\n  if (isCap) {\n    offsetVec = mix(perp * sideOfPath, dir * capType * 4.0 * flipIfTrue(isStartCap), isJoint);\n    vJointType = capType;\n  } else {\n    vJointType = jointType;\n  }\n  vPathLength = L;\n  vCornerOffset = offsetVec;\n  vMiterLength = dot(vCornerOffset, miterVec * turnDirection);\n  vMiterLength = isCap ? isJoint : vMiterLength;\n\n  vec2 offsetFromStartOfPath = vCornerOffset + deltaA * float(isEnd);\n  vPathPosition = vec2(\n    dot(offsetFromStartOfPath, perp),\n    dot(offsetFromStartOfPath, dir)\n  );\n  geometry.uv = vPathPosition;\n\n  float isValid = step(instanceTypes, 3.5);\n  vec3 offset = vec3(offsetVec * width * isValid, 0.0);\n\n  if (needsRotation) {\n    offset = rotationMatrix * offset;\n  }\n  return offset;\n}\nvoid clipLine(inout vec4 position, vec4 refPosition) {\n  if (position.w < EPSILON) {\n    float r = (EPSILON - refPosition.w) / (position.w - refPosition.w);\n    position = refPosition + (position - refPosition) * r;\n  }\n}\n\nvoid main() {\n  geometry.pickingColor = instancePickingColors;\n\n  vColor = vec4(instanceColors.rgb, instanceColors.a * opacity);\n\n  float isEnd = positions.x;\n\n  vec3 prevPosition = mix(instanceLeftPositions, instanceStartPositions, isEnd);\n  vec3 prevPosition64Low = mix(instanceLeftPositions64Low, instanceStartPositions64Low, isEnd);\n\n  vec3 currPosition = mix(instanceStartPositions, instanceEndPositions, isEnd);\n  vec3 currPosition64Low = mix(instanceStartPositions64Low, instanceEndPositions64Low, isEnd);\n\n  vec3 nextPosition = mix(instanceEndPositions, instanceRightPositions, isEnd);\n  vec3 nextPosition64Low = mix(instanceEndPositions64Low, instanceRightPositions64Low, isEnd);\n\n  geometry.worldPosition = currPosition;\n  vec2 widthPixels = vec2(clamp(\n    project_size_to_pixel(instanceStrokeWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels) / 2.0);\n  vec3 width;\n\n  if (billboard) {\n    vec4 prevPositionScreen = project_position_to_clipspace(prevPosition, prevPosition64Low, ZERO_OFFSET);\n    vec4 currPositionScreen = project_position_to_clipspace(currPosition, currPosition64Low, ZERO_OFFSET, geometry.position);\n    vec4 nextPositionScreen = project_position_to_clipspace(nextPosition, nextPosition64Low, ZERO_OFFSET);\n\n    clipLine(prevPositionScreen, currPositionScreen);\n    clipLine(nextPositionScreen, currPositionScreen);\n    clipLine(currPositionScreen, mix(nextPositionScreen, prevPositionScreen, isEnd));\n\n    width = vec3(widthPixels, 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(\n      prevPositionScreen.xyz / prevPositionScreen.w,\n      currPositionScreen.xyz / currPositionScreen.w,\n      nextPositionScreen.xyz / nextPositionScreen.w,\n      project_pixel_size_to_clipspace(width.xy)\n    );\n\n    DECKGL_FILTER_GL_POSITION(currPositionScreen, geometry);\n    gl_Position = vec4(currPositionScreen.xyz + offset * currPositionScreen.w, currPositionScreen.w);\n  } else {\n    prevPosition = project_position(prevPosition, prevPosition64Low);\n    currPosition = project_position(currPosition, currPosition64Low);\n    nextPosition = project_position(nextPosition, nextPosition64Low);\n\n    width = vec3(project_pixel_size(widthPixels), 0.0);\n    DECKGL_FILTER_SIZE(width, geometry);\n\n    vec3 offset = getLineJoinOffset(prevPosition, currPosition, nextPosition, width.xy);\n    geometry.position = vec4(currPosition + offset, 1.0);\n    gl_Position = project_common_position_to_clipspace(geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n",fs:"#define SHADER_NAME path-layer-fragment-shader\n\nprecision highp float;\n\nuniform float miterLimit;\n\nvarying vec4 vColor;\nvarying vec2 vCornerOffset;\nvarying float vMiterLength;\nvarying vec2 vPathPosition;\nvarying float vPathLength;\nvarying float vJointType;\n\nvoid main(void) {\n  geometry.uv = vPathPosition;\n\n  if (vPathPosition.y < 0.0 || vPathPosition.y > vPathLength) {\n    if (vJointType > 0.5 && length(vCornerOffset) > 1.0) {\n      discard;\n    }\n    if (vJointType < 0.5 && vMiterLength > miterLimit + 1.0) {\n      discard;\n    }\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[s.Z,r.Z]})}get wrapLongitude(){return!1}initializeState(){this.getAttributeManager().addInstanced({positions:{size:3,vertexOffset:1,type:5130,fp64:this.use64bitPositions(),transition:y,accessor:"getPath",update:this.calculatePositions,noAlloc:!0,shaderAttributes:{instanceLeftPositions:{vertexOffset:0},instanceStartPositions:{vertexOffset:1},instanceEndPositions:{vertexOffset:2},instanceRightPositions:{vertexOffset:3}}},instanceTypes:{size:1,type:5121,update:this.calculateSegmentTypes,noAlloc:!0},instanceStrokeWidths:{size:1,accessor:"getWidth",transition:y,defaultValue:1},instanceColors:{size:this.props.colorFormat.length,type:5121,normalized:!0,accessor:"getColor",transition:y,defaultValue:p},instancePickingColors:{size:3,type:5121,accessor:(t,{index:e,target:n})=>this.encodePickingColor(t&&t.__source?t.__source.index:e,n)}}),this.setState({pathTesselator:new g({fp64:this.use64bitPositions()})})}updateState(t){super.updateState(t);const{props:e,changeFlags:n}=t,i=this.getAttributeManager();if(n.dataChanged||n.updateTriggersChanged&&(n.updateTriggersChanged.all||n.updateTriggersChanged.getPath)){const{pathTesselator:t}=this.state,o=e.data.attributes||{};t.updateGeometry({data:e.data,geometryBuffer:o.getPath,buffers:o,normalize:!e._pathType,loop:"loop"===e._pathType,getGeometry:e.getPath,positionFormat:e.positionFormat,wrapLongitude:e.wrapLongitude,resolution:this.context.viewport.resolution,dataChanged:n.dataChanged}),this.setState({numInstances:t.instanceCount,startIndices:t.vertexStarts}),n.dataChanged||i.invalidateAll()}if(n.extensionsChanged){var o;const{gl:t}=this.context;null===(o=this.state.model)||void 0===o||o.delete(),this.state.model=this._getModel(t),i.invalidateAll()}}getPickingInfo(t){const e=super.getPickingInfo(t),{index:n}=e,{data:i}=this.props;return i[0]&&i[0].__source&&(e.object=i.find((t=>t.__source.index===n))),e}disablePickingIndex(t){const{data:e}=this.props;if(e[0]&&e[0].__source)for(let n=0;n<e.length;n++)e[n].__source.index===t&&this._disablePickingIndex(n);else super.disablePickingIndex(t)}draw({uniforms:t}){const{jointRounded:e,capRounded:n,billboard:i,miterLimit:o,widthUnits:s,widthScale:r,widthMinPixels:l,widthMaxPixels:c}=this.props;this.state.model.setUniforms(t).setUniforms({jointType:Number(e),capType:Number(n),billboard:i,widthUnits:a.iI[s],widthScale:r,miterLimit:o,widthMinPixels:l,widthMaxPixels:c}).draw()}_getModel(t){return new l.Z(t,{...this.getShaders(),id:this.props.id,geometry:new c.Z({drawMode:4,attributes:{indices:new Uint16Array([0,1,2,1,4,2,1,3,4,3,5,4]),positions:{value:new Float32Array([0,0,0,-1,0,1,1,-1,1,1,1,0]),size:2}}}),isInstanced:!0})}calculatePositions(t){const{pathTesselator:e}=this.state;t.startIndices=e.vertexStarts,t.value=e.get("positions")}calculateSegmentTypes(t){const{pathTesselator:e}=this.state;t.startIndices=e.vertexStarts,t.value=e.get("segmentTypes")}}(0,i.Z)(v,"defaultProps",h),(0,i.Z)(v,"layerName","PathLayer")},573715:(t,e,n)=>{"use strict";n.d(e,{Z:()=>g});var i=n(204942),o=n(905259),s=n(537832),r=n(113717),a=n(733321),l=n(339769),c=n(453982);const u=[0,0,0,255],d={radiusUnits:"meters",radiusScale:{type:"number",min:0,value:1},radiusMinPixels:{type:"number",min:0,value:0},radiusMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},lineWidthUnits:"meters",lineWidthScale:{type:"number",min:0,value:1},lineWidthMinPixels:{type:"number",min:0,value:0},lineWidthMaxPixels:{type:"number",min:0,value:Number.MAX_SAFE_INTEGER},stroked:!1,filled:!0,billboard:!1,antialiasing:!0,getPosition:{type:"accessor",value:t=>t.position},getRadius:{type:"accessor",value:1},getFillColor:{type:"accessor",value:u},getLineColor:{type:"accessor",value:u},getLineWidth:{type:"accessor",value:1},strokeWidth:{deprecatedFor:"getLineWidth"},outline:{deprecatedFor:"stroked"},getColor:{deprecatedFor:["getFillColor","getLineColor"]}};class g extends o.Z{getShaders(){return super.getShaders({vs:"#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n",fs:"#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n",modules:[s.Z,r.Z]})}initializeState(){this.getAttributeManager().addInstanced({instancePositions:{size:3,type:5130,fp64:this.use64bitPositions(),transition:!0,accessor:"getPosition"},instanceRadius:{size:1,transition:!0,accessor:"getRadius",defaultValue:1},instanceFillColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getFillColor",defaultValue:[0,0,0,255]},instanceLineColors:{size:this.props.colorFormat.length,transition:!0,normalized:!0,type:5121,accessor:"getLineColor",defaultValue:[0,0,0,255]},instanceLineWidths:{size:1,transition:!0,accessor:"getLineWidth",defaultValue:1}})}updateState(t){if(super.updateState(t),t.changeFlags.extensionsChanged){var e;const{gl:t}=this.context;null===(e=this.state.model)||void 0===e||e.delete(),this.state.model=this._getModel(t),this.getAttributeManager().invalidateAll()}}draw({uniforms:t}){const{radiusUnits:e,radiusScale:n,radiusMinPixels:i,radiusMaxPixels:o,stroked:s,filled:r,billboard:l,antialiasing:c,lineWidthUnits:u,lineWidthScale:d,lineWidthMinPixels:g,lineWidthMaxPixels:f}=this.props;this.state.model.setUniforms(t).setUniforms({stroked:s?1:0,filled:r,billboard:l,antialiasing:c,radiusUnits:a.iI[e],radiusScale:n,radiusMinPixels:i,radiusMaxPixels:o,lineWidthUnits:a.iI[u],lineWidthScale:d,lineWidthMinPixels:g,lineWidthMaxPixels:f}).draw()}_getModel(t){return new l.Z(t,{...this.getShaders(),id:this.props.id,geometry:new c.Z({drawMode:6,vertexCount:4,attributes:{positions:{size:3,value:new Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0])}}}),isInstanced:!0})}}(0,i.Z)(g,"defaultProps",d),(0,i.Z)(g,"layerName","ScatterplotLayer")},367186:(t,e,n)=>{"use strict";function i({data:t,getIndex:e,dataRange:n,replace:i}){const{startRow:o=0,endRow:s=1/0}=n,r=t.length;let a=r,l=r;for(let n=0;n<r;n++){const i=e(t[n]);if(a>n&&i>=o&&(a=n),i>=s){l=n;break}}let c=a;const u=l-a!==i.length?t.slice(l):void 0;for(let e=0;e<i.length;e++)t[c++]=i[e];if(u){for(let e=0;e<u.length;e++)t[c++]=u[e];t.length=c}return{startRow:a,endRow:a+i.length}}n.d(e,{b:()=>i})},700063:(t,e,n)=>{"use strict";function i(t){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.reduce((function(t,e){return t.concat(i(e))}),[]),t;case"Feature":return t.geometry?i(t.geometry).map((function(e){var n={type:"Feature",properties:JSON.parse(JSON.stringify(t.properties)),geometry:e};return void 0!==t.id&&(n.id=t.id),n})):[t];case"MultiPoint":return t.coordinates.map((function(t){return{type:"Point",coordinates:t}}));case"MultiPolygon":return t.coordinates.map((function(t){return{type:"Polygon",coordinates:t}}));case"MultiLineString":return t.coordinates.map((function(t){return{type:"LineString",coordinates:t}}));case"GeometryCollection":return t.geometries.map(i).reduce((function(t,e){return t.concat(e)}),[]);case"Point":case"Polygon":case"LineString":return[t]}}n.r(e),n.d(e,{default:()=>i})},213692:t=>{var e=t.exports=function(t){return new n(t)};function n(t){this.value=t}function i(t,e,n){var i=[],r=[],u=!0;return function t(d){var g=n?o(d):d,f={},p=!0,h={node:g,node_:d,path:[].concat(i),parent:r[r.length-1],parents:r,key:i.slice(-1)[0],isRoot:0===i.length,level:i.length,circular:null,update:function(t,e){h.isRoot||(h.parent.node[h.key]=t),h.node=t,e&&(p=!1)},delete:function(t){delete h.parent.node[h.key],t&&(p=!1)},remove:function(t){a(h.parent.node)?h.parent.node.splice(h.key,1):delete h.parent.node[h.key],t&&(p=!1)},keys:null,before:function(t){f.before=t},after:function(t){f.after=t},pre:function(t){f.pre=t},post:function(t){f.post=t},stop:function(){u=!1},block:function(){p=!1}};if(!u)return h;function y(){if("object"==typeof h.node&&null!==h.node){h.keys&&h.node_===h.node||(h.keys=s(h.node)),h.isLeaf=0==h.keys.length;for(var t=0;t<r.length;t++)if(r[t].node_===d){h.circular=r[t];break}}else h.isLeaf=!0,h.keys=null;h.notLeaf=!h.isLeaf,h.notRoot=!h.isRoot}y();var v=e.call(h,h.node);return void 0!==v&&h.update&&h.update(v),f.before&&f.before.call(h,h.node),p?("object"!=typeof h.node||null===h.node||h.circular||(r.push(h),y(),l(h.keys,(function(e,o){i.push(e),f.pre&&f.pre.call(h,h.node[e],e);var s=t(h.node[e]);n&&c.call(h.node,e)&&(h.node[e]=s.node),s.isLast=o==h.keys.length-1,s.isFirst=0==o,f.post&&f.post.call(h,s),i.pop()})),r.pop()),f.after&&f.after.call(h,h.node),h):h}(t).node}function o(t){if("object"==typeof t&&null!==t){var e;if(a(t))e=[];else if("[object Date]"===r(t))e=new Date(t.getTime?t.getTime():t);else if("[object RegExp]"===r(t))e=new RegExp(t);else if(function(t){return"[object Error]"===r(t)}(t))e={message:t.message};else if(function(t){return"[object Boolean]"===r(t)}(t))e=new Boolean(t);else if(function(t){return"[object Number]"===r(t)}(t))e=new Number(t);else if(function(t){return"[object String]"===r(t)}(t))e=new String(t);else if(Object.create&&Object.getPrototypeOf)e=Object.create(Object.getPrototypeOf(t));else if(t.constructor===Object)e={};else{var n=t.constructor&&t.constructor.prototype||t.__proto__||{},i=function(){};i.prototype=n,e=new i}return l(s(t),(function(n){e[n]=t[n]})),e}return t}n.prototype.get=function(t){for(var e=this.value,n=0;n<t.length;n++){var i=t[n];if(!e||!c.call(e,i)){e=void 0;break}e=e[i]}return e},n.prototype.has=function(t){for(var e=this.value,n=0;n<t.length;n++){var i=t[n];if(!e||!c.call(e,i))return!1;e=e[i]}return!0},n.prototype.set=function(t,e){for(var n=this.value,i=0;i<t.length-1;i++){var o=t[i];c.call(n,o)||(n[o]={}),n=n[o]}return n[t[i]]=e,e},n.prototype.map=function(t){return i(this.value,t,!0)},n.prototype.forEach=function(t){return this.value=i(this.value,t,!1),this.value},n.prototype.reduce=function(t,e){var n=1===arguments.length,i=n?this.value:e;return this.forEach((function(e){this.isRoot&&n||(i=t.call(this,i,e))})),i},n.prototype.paths=function(){var t=[];return this.forEach((function(e){t.push(this.path)})),t},n.prototype.nodes=function(){var t=[];return this.forEach((function(e){t.push(this.node)})),t},n.prototype.clone=function(){var t=[],e=[];return function n(i){for(var r=0;r<t.length;r++)if(t[r]===i)return e[r];if("object"==typeof i&&null!==i){var a=o(i);return t.push(i),e.push(a),l(s(i),(function(t){a[t]=n(i[t])})),t.pop(),e.pop(),a}return i}(this.value)};var s=Object.keys||function(t){var e=[];for(var n in t)e.push(n);return e};function r(t){return Object.prototype.toString.call(t)}var a=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)},l=function(t,e){if(t.forEach)return t.forEach(e);for(var n=0;n<t.length;n++)e(t[n],n,t)};l(s(n.prototype),(function(t){e[t]=function(e){var i=[].slice.call(arguments,1),o=new n(e);return o[t].apply(o,i)}}));var c=Object.hasOwnProperty||function(t,e){return e in t}}}]);
//# sourceMappingURL=3b79fe9a37e0ad65885a.chunk.js.map
{"version":3,"file":"4f5868c386e6820d9802.chunk.js","mappings":"2KAwBA,MAaA,GAbcA,EAAAA,EAAAA,KAAQC,IAA0BC,EAAAA,EAAAA,IAACC,EAAAA,EAAS,IAAKF,KAAU;IACrE,EAAGG,QAAOC,QAAOC,WAAY,+DAIfC,IAAVD,EACI,eAAeD,GAASD,EAAMI,OAAOC,QAAQC,QAC7C;+LCUZ,MAAMC,EAA0BX,EAAAA,GAAOY,GAAG;IACtC,EAAGR,WAAY,8GAKEA,EAAMS,kCACU,EAAjBT,EAAMS,+KAUQT,EAAMS,8EAKA,EAAjBT,EAAMS;EAKvBC,EAAad,EAAAA,GAAOY,GAAG;;;;iBAIZ,EAAGR,WAAYA,EAAMS,SAAW;;;;;;;;;;EA4C3CE,EAAcA,EAClBC,UACAC,mBAKAC,EAAAA,EAAAA,IAACJ,EAAU,CAAAK,SAAA,EACTjB,EAAAA,EAAAA,IAACkB,EAAAA,EAAK,CAACC,UAAU,UAASF,SAAEH,GAAW,MACvCd,EAAAA,EAAAA,IAAA,QAAMmB,UAAU,OAAOC,MAAOL,EAAaE,SACxCF,OAKDM,EAAyC,GACzCC,EAAuC,GAM/B,SAAUC,GAAiB,GACvCC,EAAE,SACFC,GAAW,EAAK,WAChBC,EAAU,UACVC,EAAS,YACTC,EAAW,wBACXC,GAA0B,EAAI,WAC9BC,EAAU,eACVC,EAAc,gBACdC,EAAe,QACfC,EAAO,eACPC,EAAc,OACdC,EAAM,SACNC,GAAW,EAAK,WAChBC,GAAa,IAEb,MAAMC,IAA0B,MAAFd,IAAAA,EAAIe,sBAC3BC,EAAWC,IAAgBC,EAAAA,EAAAA,aAC3BC,EAAgBC,IAAqBF,EAAAA,EAAAA,UAE1CT,EAAU,CAAEY,MAAOZ,EAASa,MAAOb,EAASb,MAAOa,QAAY5B,GAC3D0C,GAAaC,EAAAA,EAAAA,QAAOf,GAC1Bc,EAAWE,QAAUhB,EACrB,MAAOiB,EAAeC,IAAoBT,EAAAA,EAAAA,UACxCP,EAAS,CAAEU,MAAOV,EAAQW,MAAOX,EAAQf,MAAOe,QAAW9B,GAEvD+C,GAAYJ,EAAAA,EAAAA,QAAOb,GACzBiB,EAAUH,QAAUd,EACpB,MAAM,gBAAEkB,IAAoBC,EAAAA,EAAAA,MACtBC,GAAiBC,EAAAA,EAAAA,cACrB,CAACC,EAAkCC,IACjCD,EAAME,MAAQD,EAAMC,OACtB,IAGIC,GAAgBC,EAAAA,EAAAA,UACpB,IACEC,MACEC,EACAC,EACAC,KAKA,MAkBMC,EAAW,uBAlBGC,IAAAA,OAAa,CAC/BC,aAAc,gBACdC,gBAAiB,MACjBL,OACAM,UAAWL,KACPxC,IAAaY,EACb,CAAEkC,QAAS,CAAC,CAAEC,IAAK,gBAAiBC,IAAK,KAAM3B,MAAOiB,KACtD,CACEQ,QAAS,CACP,CAAEC,IAAK,gBAAiBC,IAAK,KAAM3B,MAAOiB,GAC1C,CACES,IAAK,mBACLC,IAAK,KACL3B,OAAO,SAMnB,OAAO4B,EAAAA,EAAeC,IAAI,CAAET,aAAYU,MAAK,EAAGC,WAC9C,MAAM,OAAEC,EAAM,MAAE1E,GAAUyE,EACtBlD,GACFA,EAAUmD,GAEU,IAAlBA,EAAOC,QACLhD,GAAgBA,EAAegC,GAGrC,MAAMiB,EAAUF,EAAOG,KAAI,CAACC,EAAqBvB,KAAkB,CACjEd,OACE7C,EAAAA,EAAAA,IAACa,EAAW,CACVC,QAASoE,EAAIpE,QACbC,aAAcmE,EAAIC,gBAGtBrC,MAAOoC,EAAIE,GACXA,GAAIF,EAAIE,GACRD,cAAeD,EAAIC,cACnBrE,QAASoE,EAAIpE,QACbyB,oBAAqB2C,EAAI3C,oBACzBoB,YAGF,MAAO,CACL0B,KAAML,EACNM,WAAiB,MAALlF,EAAAA,EAAS4E,EAAQD,OAC9B,GACD,GAEN,CAACtD,EAAUE,EAAWU,EAAYN,IAsBpC,SAASwD,EAAapD,GACpBgB,EAAiBhB,GACbD,IAAwB,MAANC,OAAM,EAANA,EAAQW,SAAUM,EAAUH,SAChDf,EAAqB,MAANC,OAAM,EAANA,EAAQW,MAE3B,EAxBA0C,EAAAA,EAAAA,YAAU,KACR/C,GAAaQ,IACJ,MAAPA,OAAO,EAAPA,EAASmC,OAAS,MAAF5D,OAAE,EAAFA,EAAI4D,IAChB5D,EACE,CACEqB,OACE7C,EAAAA,EAAAA,IAACa,EAAW,CACVC,QAASU,EAAGV,QACZC,aAAcS,EAAG2D,gBAGrBrC,MAAOtB,EAAG4D,MACP5D,QAELnB,EACF4C,GACL,GACA,CAACzB,IASJ,MACEiE,YAAaC,EACbC,WAAYC,EACZC,QAASC,IACPC,EAAAA,EAAAA,IAAW,CACbC,KAAe,MAATxD,OAAS,EAATA,EAAWM,MACjBb,QAAuB,MAAdU,OAAc,EAAdA,EAAgBG,MACzBmD,UAAWA,CAACC,EAASC,KACI,IAAnBD,EAAQnB,OACVQ,EAAaW,EAAQ,IAEpBA,EAAQE,MAAKC,GAAgBjD,EAAUH,UAAYoD,EAAavD,SAEjEyC,OAAalF,GAGX8F,GACF9C,EAAgB,iB,EAGpBiD,QAASA,IAAM1E,GAAY2E,EAAAA,EAAAA,GAAE,6CAGzBC,EAAgBd,GAAcpE,EAEpC,SAASmF,EAAcxE,GACrBW,EAAkBX,GAClBkB,OAAiB9C,GACb2B,IAA0B,MAAPC,OAAO,EAAPA,EAASa,SAAUC,EAAWE,SACnDjB,EAAuB,MAAPC,OAAO,EAAPA,EAASa,MAE7B,CAEA,MACEuC,KAAMqB,EACNf,WAAYgB,EACZd,QAASe,IACPC,EAAAA,EAAAA,IAAY,CACdb,KAAM1D,EAA+B,MAATE,OAAS,EAATA,EAAWM,WAAQzC,EAC/C4F,UAAWA,CAACa,EAAUX,KACf7D,EAE0B,IAApBwE,EAAS/B,OAClB0B,EAAcK,EAAS,IAEtBA,EAASV,MACRW,GAAiBhE,EAAWE,UAAY8D,EAAcjE,SAGxD2D,OAAcpG,GARdoG,EAAc,MAWZnE,GAAuB6D,GACzB9C,EAAgB,iB,EAGpBiD,QAASA,KACHhE,GACFV,GAAY2E,EAAAA,EAAAA,GAAE,2C,IAKdS,EAAiBN,GAAerF,EAoBtC,SAAS4F,EAAgBC,EAAmBC,GAC1C,OACEnG,EAAAA,EAAAA,IAAA,OAAKG,UAAU,UAASF,SAAA,EACtBjB,EAAAA,EAAAA,IAAA,QAAMmB,UAAU,SAAQF,SAAEiG,KAC1BlH,EAAAA,EAAAA,IAAA,QAAMmB,UAAU,UAASF,SAAEkG,MAGjC,CA4EA,OACEnG,EAAAA,EAAAA,IAACP,EAAuB,CAAAQ,SAAA,CA1EjBgG,GACLjH,EAAAA,EAAAA,IAACoH,EAAAA,GAAW,CACVC,WAAWd,EAAAA,EAAAA,GAAE,+CACbe,kBAAmB,CAAC,gBAAiB,SAErCC,QAAQvH,EAAAA,EAAAA,IAACwH,EAAAA,GAAS,CAAAvG,UAAEsF,EAAAA,EAAAA,GAAE,cACtBkB,aAAa,EACbC,gBAAiBhG,EACjBiG,SApCN,SACE7E,EACA8E,GAEAnF,EAAamF,GACbhF,OAAkBvC,GAClB8C,OAAiB9C,GACbyB,GACFA,EAAW8F,GAET5F,GACFA,OAAgB3B,GAEd6B,GACFA,OAAe7B,EAEnB,EAqBMyC,MAAON,EACPqF,aAAatB,EAAAA,EAAAA,GAAE,+CACfuB,UAAWjG,GAA2BO,EACtC4C,QAASpB,EACTL,eAAgBA,IAElB,MA6DCjB,GAzDL,WACE,MAAMyF,GAAe3F,IACnBpC,EAAAA,EAAAA,IAACgI,EAAAA,EAAY,CACXC,QAASrB,EACTsB,gBAAgB3B,EAAAA,EAAAA,GAAE,gCAGtB,OAAOU,GACLjH,EAAAA,EAAAA,IAACmI,EAAAA,GAAM,CACLd,WAAWd,EAAAA,EAAAA,GAAE,6CACbuB,UAAWtF,GAAaJ,EACxBmF,QAAQvH,EAAAA,EAAAA,IAACwH,EAAAA,GAAS,CAAAvG,UAAEsF,EAAAA,EAAAA,GAAE,aACtB6B,cAAY,EACZC,QAAS1B,EACT2B,KAAK,iBACLZ,iBAAiBnB,EAAAA,EAAAA,GAAE,+BACnBsB,aAAatB,EAAAA,EAAAA,GAAE,6CACfoB,SAAUY,GAAQ9B,EAAc8B,GAChCvD,QAASgC,EACTwB,YAAU,EACV1F,MAAOH,QAAkBtC,EACzBoI,YAAU,IAEZV,EAEJ,CAgC4BW,GA9B5B,WACE,MAAMX,GAAe3F,IACnBpC,EAAAA,EAAAA,IAACgI,EAAAA,EAAY,CACXC,QAASnC,EACToC,gBAAgB3B,EAAAA,EAAAA,GAAE,+BAGtB,OAAOU,GACLjH,EAAAA,EAAAA,IAACmI,EAAAA,GAAM,CACLd,WAAWd,EAAAA,EAAAA,GAAE,2CACbuB,UAAWtF,GAAaJ,EACxBmF,QAAQvH,EAAAA,EAAAA,IAACwH,EAAAA,GAAS,CAAAvG,UAAEsF,EAAAA,EAAAA,GAAE,YACtB6B,cAAY,EACZC,QAASzC,EACT0C,KAAK,gBACLZ,iBAAiBnB,EAAAA,EAAAA,GAAE,8BACnBsB,aAAatB,EAAAA,EAAAA,GAAE,2CACfoB,SAAUY,GAAQhD,EAAagD,GAC/BvD,QAASwB,EACTgC,YAAU,EACV1F,MAAOI,EACPuF,YAAU,IAEZV,EAEJ,CAMKY,KAGP,C,wFCtZA,MAqBA,EArBqBX,EAAGC,UAASC,qBAE/B,MAAMU,GAAiBC,EAAAA,EAAAA,aAAW,CAAC9I,EAAiB+I,KAClD9I,EAAAA,EAAAA,IAAC+I,EAAAA,EAAMC,QAAO,IAAKjJ,MAGrB,OACEC,EAAAA,EAAAA,IAACiJ,EAAAA,EAAO,CAAC7H,MAAO8G,EAAejH,UAC7BjB,EAAAA,EAAAA,IAAC4I,EAAc,CACbM,KAAK,SACLjB,QAASA,EACTkB,IAAMjJ,IAAyB,CAC7BkJ,OAAQ,UACRjJ,MAAOD,EAAMI,OAAO+I,UAAU7I,KAC9B,UAAW,CAAEL,MAAOD,EAAMI,OAAOC,QAAQC,WAGrC,C,gOCAd,MAEM8I,EAAuBxJ,EAAAA,GAAOY,GAAG;IACnC,EAAGR,WAAY,8GAKEA,EAAMS,kCACU,EAAjBT,EAAMS,+KAUOT,EAAMI,OAAOiJ,UAAUC,8EAKzCtJ,EAAMI,OAAO+I,UAAUI,iFAKPvJ,EAAMS,SA7Bf;EAkChB+I,EAAa5J,EAAAA,GAAO6J,IAAI;;;;;;;oBAOV,EAAGzJ,WAAYA,EAAMS;;EAoC5BiJ,EAAcA,EAAGC,YAC5B,MAAM,MAAE/G,EAAK,KAAEgH,EAAI,MAAEC,GAAUF,EAC/B,OACE7I,EAAAA,EAAAA,IAAC0I,EAAU,CAACtI,MAAO0B,EAAM7B,SAAA,CACb,SAAT6I,GACC9J,EAAAA,EAAAA,IAAC+I,EAAAA,EAAMiB,IAAG,CAACC,SAAS,OAEpBjK,EAAAA,EAAAA,IAAC+I,EAAAA,EAAMmB,MAAK,CAACD,SAAS,OAElB,MAALF,OAAK,EAALA,EAAOI,iBACNnK,EAAAA,EAAAA,IAACoK,EAAAA,EAAc,CACbC,YAAaN,EAAMI,cAAcG,aACjCC,QAASR,EAAMI,cAAcI,QAC7BC,KAAK,OAGH,MAALT,OAAK,EAALA,EAAOU,oBACNzK,EAAAA,EAAAA,IAAC0K,EAAAA,EAAsB,CACrBC,gBAAiBZ,EAAMU,iBACvBD,KAAK,IACLI,YAAa,IAGhB9H,IACU,EAaX+H,EAAuDA,EAC3DjD,WACAlG,aACAD,YAAW,EACXE,YACAC,cACAC,2BAA0B,EAC1BC,aACAE,kBACAE,iBACAE,YAAW,EACXL,iBACAE,UACAE,SACAE,cAAa,EACbyI,kBAAkB,SAClBC,aACAC,sBACAC,qCAEA,MAAM,gBAAE5H,IAAoBC,EAAAA,EAAAA,OACrBX,EAAgBC,IAAqBF,EAAAA,EAAAA,UAE1CT,IACKiB,EAAeC,IAAoBT,EAAAA,EAAAA,UACxCP,IAEK+I,EAAkBC,IAAuBzI,EAAAA,EAAAA,eAE9CrC,IAEAoF,YAAaJ,EACbM,WAAYyF,EAAa,QACzBvF,IACEwF,EAAAA,EAAAA,IAAU,CACZrF,KAAc,MAAR4B,OAAQ,EAARA,EAAUxC,GAChBnD,QAASU,EACTR,OAAQe,EACR+C,UAAWA,CAACZ,EAAMc,KACZA,GACF9C,GAAgBkD,EAAAA,EAAAA,GAAE,gB,EAGtBD,QAASgF,KACPC,EAAAA,EAAAA,IAAqBD,GAAK1G,MAAK4G,IAC7B5J,GACE6J,EAAAA,EAAAA,KACElF,EAAAA,EAAAA,GAAE,yCACFiF,GAEH,GACD,IAIAE,GAAe7H,EAAAA,EAAAA,UACnB,IACEwB,EACIA,EAAKL,QAAQC,KAAI4E,IAAK,CACpB/G,MAAO+G,EAAM/G,MACbD,OAAO7C,EAAAA,EAAAA,IAAC4J,EAAW,CAACC,MAAOA,IAC3B8B,KAAM9B,EAAM/G,SACRmI,GAAkC,CACpCW,YAAaX,EAA+BpB,QAGhD,IACN,CAACxE,EAAM4F,KAGTzF,EAAAA,EAAAA,YAAU,UAESnF,IAAbuH,IACFhF,OAAkBvC,GAClB8C,OAAiB9C,GACjB8K,OAAoB9K,G,GAErB,CAACuH,EAAUkD,KAEdtF,EAAAA,EAAAA,YAAU,KAEN2F,EADsB,WAApBL,EAEAY,EAAatF,MAAKyF,GAAUA,EAAO/I,QAAUiI,KAIjC,MAAZW,OAAY,EAAZA,EAAcI,QACZD,GAAUA,IAAoB,MAAVd,OAAU,EAAVA,EAAYgB,SAASF,EAAO/I,YAC7C,G,GAGR,CAAC4I,EAAcX,EAAYD,IAE9B,MAgDMkB,GAAqBnI,EAAAA,EAAAA,UACzB,IAAM,CAACE,EAAgB8H,KACrB,MAAMI,EAAclI,EAAOmI,OAAOC,eAC5B,MAAErJ,GAAU+I,EAClB,OAAO/I,EAAMqJ,cAAcJ,SAASE,EAAY,GAElD,IA4CF,OACEjL,EAAAA,EAAAA,IAACsI,EAAoB,CAAArI,SAAA,EACnBjB,EAAAA,EAAAA,IAACuB,EAAAA,EAAgB,CACfC,GAAIoG,EACJlG,WAAYA,EACZD,SAAUA,EACVE,UAAWA,EACXC,YAAaA,EACbE,WAAYM,OAAW/B,EA1FHmB,IACpBM,GACFA,EAAWN,GAGboB,OAAkBvC,GAClB8C,OAAiB9C,GAEjB8K,EADkC,WAApBL,OAA+BzK,EAAY,GAC/B,EAmFtB0B,eAAgBA,EAChBC,gBAAiBI,OAAW/B,EAjFH4B,IAC7BW,EAAkBX,GACdD,GACFA,EAAgBC,GAGlBkB,OAAiB9C,GAEjB8K,EADkC,WAApBL,OAA+BzK,EAAY,GAC/B,EA0EtB4B,QAASU,EACTT,eAAgBE,OAAW/B,EAxEH8B,IAC5BgB,EAAiBhB,GACbD,GACFA,EAAeC,GAIjBgJ,EADkC,WAApBL,OAA+BzK,EAAY,GAC/B,EAkEtB8B,OAAQe,EACRb,WAAYA,EACZR,wBAAyBA,IAA4BO,EACrDA,SAAUA,IAEXC,IAAeZ,IAAYzB,EAAAA,EAAAA,IAAA,OAAKmB,UAAU,YA3D/C,WACE,MAAM2G,EAAY5E,IAAkBzB,GAAYW,IAAcc,EAExDqE,EAASlF,GACbrC,EAAAA,EAAAA,IAACwH,EAAAA,GAAS,CAAAvG,UAAEsF,EAAAA,EAAAA,GAAE,uBAEdvG,EAAAA,EAAAA,IAACwH,EAAAA,GAAS,CAAAvG,UAAEsF,EAAAA,EAAAA,GAAE,WAgChB,OArMqBW,GAyKnBlH,EAAAA,EAAAA,IAACmI,EAAAA,GAAM,CACLd,WAAWd,EAAAA,EAAAA,GAAE,yCACbuB,SAAUA,EACVsE,aAAcJ,EACdzE,OAAQA,EACRa,cAAY,EACZC,QAAS+C,EACT9C,KAAK,eACLX,SAAW3C,IACTqH,OA3ENC,EA2E0BtH,OAzEtB9B,EACiB,MAAnB8H,GAAAA,EACEuB,MAAMC,QAAQF,GACVA,EAAgBrH,KAAI4G,GAAgB,MAANA,OAAM,EAANA,EAAQ/I,QACvB,MAAfwJ,OAAe,EAAfA,EAAiBxJ,MACrBH,EACAO,GAGFiI,EAAoBmB,IAZID,IAC1BC,CA4EK,EACDtH,QAAS0G,EACT7D,aAAatB,EAAAA,EAAAA,GAAE,yCACfiC,YAAU,EACViE,KAAM3B,EACNhI,MAAOoI,EACPzC,WAAgC,aAApBqC,EACZ4B,gBAAgB,IA1LoBvF,GA8LlB/E,IACpBpC,EAAAA,EAAAA,IAACgI,EAAAA,EAAY,CACXC,QAASA,IAAMpC,IACfqC,gBAAgB3B,EAAAA,EAAAA,GAAE,+BA/LtBvF,EAAAA,EAAAA,IAAA,OAAKG,UAAU,UAASF,SAAA,EACtBjB,EAAAA,EAAAA,IAAA,QAAMmB,UAAU,SAAQF,SAAEiG,KAC1BlH,EAAAA,EAAAA,IAAA,QAAMmB,UAAU,UAASF,SAAEkG,OAJjC,IAAyBD,EAAmBC,CAsM1C,CAqBKwF,KACoB,EAIdC,EAET7M,IAASC,EAAAA,EAAAA,IAAC6K,EAAa,CAACC,gBAAgB,cAAe/K,IAE3D,G,2QCrVA,MAAM8M,EAAaC,EAAAA,EAAIC,gBAAgB,CACrCC,UAAWC,IAAO,CAChBnG,SAAUmG,EAAQC,MAAiD,CACjEC,aAAc,CAAC,CAAErD,KAAM,WAAY1E,GAAI,SACvC8H,MAAOA,EAAGlH,OAAMoH,mBAAmB,CACjClJ,SAAU,oBAAoB8B,cAC9BqH,UAAW,CACTC,MAAOF,GAETG,kBAAmBA,EAAG1I,UACpBA,EAAKC,OAAO0I,OAAOvI,KAAKnC,IAAkB,CACxCA,QACAD,MAAOC,EACP1B,MAAO0B,QAGb2K,mBAAoBA,EAAGC,WAAa1H,YAAa,CAC/CA,gBAMK,qBACX2H,EAAoB,iBACpBC,EACAZ,UAAWa,EACXC,KAAMC,GACJlB,EAESmB,EAAiB,GAExB,SAAUnH,EAAY7B,GAC1B,MAAM,KAAEgB,EAAI,UAAEC,EAAS,QAAEK,GAAYtB,GAAW,CAAC,GAC1CiJ,GAAWN,IACZ7I,EAAS8I,EACb,CAAE5H,OAAMoH,cAAc,GACtB,CACEc,MAAOlI,IAILmI,GAAYC,EAAAA,EAAAA,IAChB,CAACpI,EAAwCoH,GAAe,MAClDpH,GAAUlB,EAAOW,cAAe2H,GAClCa,EAAQ,CAAEjI,OAAMoH,iBAAgBxI,MAAK,EAAGyJ,YAAWC,UAASjJ,WACtDgJ,IACO,MAATpI,GAAAA,EAAYZ,GAAQ2I,EAAgBZ,IAElCkB,IACK,MAAPhI,GAAAA,I,OAOJT,GAAUrC,EAAAA,EAAAA,cAAY,KAC1B2K,EAAUnI,GAAM,EAAK,GACpB,CAACA,EAAMmI,IAMV,OAJA3I,EAAAA,EAAAA,YAAU,KACR2I,EAAUnI,GAAM,EAAM,GACrB,CAACA,EAAMmI,IAEH,IACFrJ,EACHe,UAEJ,C,gBCnFA,SAAS0I,GAAkB,OAAEC,IAC3B,OAAKA,EACEA,EAAOvJ,KAAIwJ,GAAS,GAAGA,EAAMC,cAAcD,EAAME,cADpC,IAEtB,CAEA,MAAMC,E,MAAkBzK,GAAAA,OAAa,CACnC0K,QAAS,CAAC,oBAAqB,oBAC/BC,KAAM,CAAC,UAGH,SAAUC,EAAmBC,GACjC,OAAOC,EAAAA,EAAAA,KACLC,EAAAA,EAAAA,IAAwB,iBAAiBF,OAAaJ,KACtDL,EAEJ,CCfO,MAAMY,EAAgBC,IAC3BH,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAA4B,qBAAqBE,MACjDC,IAAS,IACJA,EAEHC,SACGD,EAAUE,eAAiBC,KAAKC,MAAMJ,EAAUE,gBAAmB,CAAC,EACvEG,cACEL,EAAUM,eAAiBH,KAAKC,MAAMJ,EAAUM,eAClDnB,OAAQa,EAAUb,QAAU,OAKrBoB,EAAsBR,IACjCF,EAAAA,EAAAA,IAA0B,qBAAqBE,YAKpCS,EAAwBT,IACnCF,EAAAA,EAAAA,IAA+B,qBAAqBE,c,4BCVtD,MAAMU,EAAqBhD,EAAAA,EAAIC,gBAAgB,CAC7CC,UAAWC,IAAO,CAChB8C,iBAAkB9C,EAAQC,MAGxB,CACAC,aAAc,CAAC,oBACfD,MAAOA,EAAGlH,OAAM/D,UAASE,SAAQ6N,MAAKC,qBACpC,IAAIC,EAAkBD,EACtB,IACEC,EAAkBV,KAAKC,MAAMQ,GAAkB,G,CAC/C,MAAOE,GACPD,OAAkB7P,C,CAEpB,MAAM+P,EAAc,CAClBnO,UACAE,SACA6N,SACIE,GAAmB,CAAEA,oBAE3B,MAAO,CACLG,OAAQ,OACRnM,SAAU,oBAAoB8B,kBAC9BsK,QAAS,CAAE,eAAgB,oBAC3BC,KAAMf,KAAKgB,UAAUJ,GACrB7C,kBAAmBA,EAAG1I,UAAyBA,EAAKC,OACrD,SAMI,yBAAE2L,GAA6BX,C","sources":["webpack://superset/./src/components/Badge/index.tsx","webpack://superset/./src/components/DatabaseSelector/index.tsx","webpack://superset/./src/components/RefreshLabel/index.tsx","webpack://superset/./src/components/TableSelector/index.tsx","webpack://superset/./src/hooks/apiResources/catalogs.ts","webpack://superset/./src/hooks/apiResources/charts.ts","webpack://superset/./src/hooks/apiResources/dashboards.ts","webpack://superset/./src/hooks/apiResources/queryValidations.ts"],"sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { styled } from '@superset-ui/core';\nimport { Badge as AntdBadge } from 'antd-v5';\nimport { BadgeProps as AntdBadgeProps } from 'antd-v5/lib/badge';\n\nexport type { AntdBadgeProps as BadgeProps };\n\nconst Badge = styled((props: AntdBadgeProps) => <AntdBadge {...props} />)`\n  ${({ theme, color, count }) => `\n    & > sup,\n    & > sup.antd5-badge-count {\n      ${\n        count !== undefined\n          ? `background: ${color || theme.colors.primary.base};`\n          : ''\n      }\n    }\n  `}\n`;\n\nexport default Badge;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  ReactNode,\n  useState,\n  useMemo,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport { styled, SupersetClient, t } from '@superset-ui/core';\nimport type { LabeledValue as AntdLabeledValue } from 'antd/lib/select';\nimport rison from 'rison';\nimport { AsyncSelect, Select } from 'src/components';\nimport Label from 'src/components/Label';\nimport { FormLabel } from 'src/components/Form';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport {\n  useCatalogs,\n  CatalogOption,\n  useSchemas,\n  SchemaOption,\n} from 'src/hooks/apiResources';\n\nconst DatabaseSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: 30px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .select {\n      width: calc(100% - 30px - ${theme.gridUnit}px);\n      flex: 1;\n    }\n\n    & > div {\n      margin-bottom: ${theme.gridUnit * 4}px;\n    }\n  `}\n`;\n\nconst LabelStyle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: ${({ theme }) => theme.gridUnit - 2}px;\n\n  .backend {\n    overflow: visible;\n  }\n\n  .name {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\ntype DatabaseValue = {\n  label: ReactNode;\n  value: number;\n  id: number;\n  database_name: string;\n  backend?: string;\n};\n\nexport type DatabaseObject = {\n  id: number;\n  database_name: string;\n  backend?: string;\n  allow_multi_catalog?: boolean;\n};\n\nexport interface DatabaseSelectorProps {\n  db?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onEmptyResults?: (searchText?: string) => void;\n  onCatalogChange?: (catalog?: string) => void;\n  catalog?: string | null;\n  onSchemaChange?: (schema?: string) => void;\n  schema?: string;\n  readOnly?: boolean;\n  sqlLabMode?: boolean;\n}\n\nconst SelectLabel = ({\n  backend,\n  databaseName,\n}: {\n  backend?: string;\n  databaseName: string;\n}) => (\n  <LabelStyle>\n    <Label className=\"backend\">{backend || ''}</Label>\n    <span className=\"name\" title={databaseName}>\n      {databaseName}\n    </span>\n  </LabelStyle>\n);\n\nconst EMPTY_CATALOG_OPTIONS: CatalogOption[] = [];\nconst EMPTY_SCHEMA_OPTIONS: SchemaOption[] = [];\n\ninterface AntdLabeledValueWithOrder extends AntdLabeledValue {\n  order: number;\n}\n\nexport default function DatabaseSelector({\n  db,\n  formMode = false,\n  emptyState,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onEmptyResults,\n  onCatalogChange,\n  catalog,\n  onSchemaChange,\n  schema,\n  readOnly = false,\n  sqlLabMode = false,\n}: DatabaseSelectorProps) {\n  const showCatalogSelector = !!db?.allow_multi_catalog;\n  const [currentDb, setCurrentDb] = useState<DatabaseValue | undefined>();\n  const [currentCatalog, setCurrentCatalog] = useState<\n    CatalogOption | null | undefined\n  >(catalog ? { label: catalog, value: catalog, title: catalog } : undefined);\n  const catalogRef = useRef(catalog);\n  catalogRef.current = catalog;\n  const [currentSchema, setCurrentSchema] = useState<SchemaOption | undefined>(\n    schema ? { label: schema, value: schema, title: schema } : undefined,\n  );\n  const schemaRef = useRef(schema);\n  schemaRef.current = schema;\n  const { addSuccessToast } = useToasts();\n  const sortComparator = useCallback(\n    (itemA: AntdLabeledValueWithOrder, itemB: AntdLabeledValueWithOrder) =>\n      itemA.order - itemB.order,\n    [],\n  );\n\n  const loadDatabases = useMemo(\n    () =>\n      async (\n        search: string,\n        page: number,\n        pageSize: number,\n      ): Promise<{\n        data: DatabaseValue[];\n        totalCount: number;\n      }> => {\n        const queryParams = rison.encode({\n          order_column: 'database_name',\n          order_direction: 'asc',\n          page,\n          page_size: pageSize,\n          ...(formMode || !sqlLabMode\n            ? { filters: [{ col: 'database_name', opr: 'ct', value: search }] }\n            : {\n                filters: [\n                  { col: 'database_name', opr: 'ct', value: search },\n                  {\n                    col: 'expose_in_sqllab',\n                    opr: 'eq',\n                    value: true,\n                  },\n                ],\n              }),\n        });\n        const endpoint = `/api/v1/database/?q=${queryParams}`;\n        return SupersetClient.get({ endpoint }).then(({ json }) => {\n          const { result, count } = json;\n          if (getDbList) {\n            getDbList(result);\n          }\n          if (result.length === 0) {\n            if (onEmptyResults) onEmptyResults(search);\n          }\n\n          const options = result.map((row: DatabaseObject, order: number) => ({\n            label: (\n              <SelectLabel\n                backend={row.backend}\n                databaseName={row.database_name}\n              />\n            ),\n            value: row.id,\n            id: row.id,\n            database_name: row.database_name,\n            backend: row.backend,\n            allow_multi_catalog: row.allow_multi_catalog,\n            order,\n          }));\n\n          return {\n            data: options,\n            totalCount: count ?? options.length,\n          };\n        });\n      },\n    [formMode, getDbList, sqlLabMode, onEmptyResults],\n  );\n\n  useEffect(() => {\n    setCurrentDb(current =>\n      current?.id !== db?.id\n        ? db\n          ? {\n              label: (\n                <SelectLabel\n                  backend={db.backend}\n                  databaseName={db.database_name}\n                />\n              ),\n              value: db.id,\n              ...db,\n            }\n          : undefined\n        : current,\n    );\n  }, [db]);\n\n  function changeSchema(schema: SchemaOption | undefined) {\n    setCurrentSchema(schema);\n    if (onSchemaChange && schema?.value !== schemaRef.current) {\n      onSchemaChange(schema?.value);\n    }\n  }\n\n  const {\n    currentData: schemaData,\n    isFetching: loadingSchemas,\n    refetch: refetchSchemas,\n  } = useSchemas({\n    dbId: currentDb?.value,\n    catalog: currentCatalog?.value,\n    onSuccess: (schemas, isFetched) => {\n      if (schemas.length === 1) {\n        changeSchema(schemas[0]);\n      } else if (\n        !schemas.find(schemaOption => schemaRef.current === schemaOption.value)\n      ) {\n        changeSchema(undefined);\n      }\n\n      if (isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => handleError(t('There was an error loading the schemas')),\n  });\n\n  const schemaOptions = schemaData || EMPTY_SCHEMA_OPTIONS;\n\n  function changeCatalog(catalog: CatalogOption | null | undefined) {\n    setCurrentCatalog(catalog);\n    setCurrentSchema(undefined);\n    if (onCatalogChange && catalog?.value !== catalogRef.current) {\n      onCatalogChange(catalog?.value);\n    }\n  }\n\n  const {\n    data: catalogData,\n    isFetching: loadingCatalogs,\n    refetch: refetchCatalogs,\n  } = useCatalogs({\n    dbId: showCatalogSelector ? currentDb?.value : undefined,\n    onSuccess: (catalogs, isFetched) => {\n      if (!showCatalogSelector) {\n        changeCatalog(null);\n      } else if (catalogs.length === 1) {\n        changeCatalog(catalogs[0]);\n      } else if (\n        !catalogs.find(\n          catalogOption => catalogRef.current === catalogOption.value,\n        )\n      ) {\n        changeCatalog(undefined);\n      }\n\n      if (showCatalogSelector && isFetched) {\n        addSuccessToast('List refreshed');\n      }\n    },\n    onError: () => {\n      if (showCatalogSelector) {\n        handleError(t('There was an error loading the catalogs'));\n      }\n    },\n  });\n\n  const catalogOptions = catalogData || EMPTY_CATALOG_OPTIONS;\n\n  function changeDatabase(\n    value: { label: string; value: number },\n    database: DatabaseValue,\n  ) {\n    setCurrentDb(database);\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    if (onDbChange) {\n      onDbChange(database);\n    }\n    if (onCatalogChange) {\n      onCatalogChange(undefined);\n    }\n    if (onSchemaChange) {\n      onSchemaChange(undefined);\n    }\n  }\n\n  function renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n    return (\n      <div className=\"section\">\n        <span className=\"select\">{select}</span>\n        <span className=\"refresh\">{refreshBtn}</span>\n      </div>\n    );\n  }\n\n  function renderDatabaseSelect() {\n    return renderSelectRow(\n      <AsyncSelect\n        ariaLabel={t('Select database or type to search databases')}\n        optionFilterProps={['database_name', 'value']}\n        data-test=\"select-database\"\n        header={<FormLabel>{t('Database')}</FormLabel>}\n        lazyLoading={false}\n        notFoundContent={emptyState}\n        onChange={changeDatabase}\n        value={currentDb}\n        placeholder={t('Select database or type to search databases')}\n        disabled={!isDatabaseSelectEnabled || readOnly}\n        options={loadDatabases}\n        sortComparator={sortComparator}\n      />,\n      null,\n    );\n  }\n\n  function renderCatalogSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={refetchCatalogs}\n        tooltipContent={t('Force refresh catalog list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select catalog or type to search catalogs')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Catalog')}</FormLabel>}\n        labelInValue\n        loading={loadingCatalogs}\n        name=\"select-catalog\"\n        notFoundContent={t('No compatible catalog found')}\n        placeholder={t('Select catalog or type to search catalogs')}\n        onChange={item => changeCatalog(item as CatalogOption)}\n        options={catalogOptions}\n        showSearch\n        value={currentCatalog || undefined}\n        allowClear\n      />,\n      refreshIcon,\n    );\n  }\n\n  function renderSchemaSelect() {\n    const refreshIcon = !readOnly && (\n      <RefreshLabel\n        onClick={refetchSchemas}\n        tooltipContent={t('Force refresh schema list')}\n      />\n    );\n    return renderSelectRow(\n      <Select\n        ariaLabel={t('Select schema or type to search schemas')}\n        disabled={!currentDb || readOnly}\n        header={<FormLabel>{t('Schema')}</FormLabel>}\n        labelInValue\n        loading={loadingSchemas}\n        name=\"select-schema\"\n        notFoundContent={t('No compatible schema found')}\n        placeholder={t('Select schema or type to search schemas')}\n        onChange={item => changeSchema(item as SchemaOption)}\n        options={schemaOptions}\n        showSearch\n        value={currentSchema}\n        allowClear\n      />,\n      refreshIcon,\n    );\n  }\n\n  return (\n    <DatabaseSelectorWrapper data-test=\"DatabaseSelector\">\n      {renderDatabaseSelect()}\n      {showCatalogSelector && renderCatalogSelect()}\n      {renderSchemaSelect()}\n    </DatabaseSelectorWrapper>\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { MouseEventHandler, forwardRef } from 'react';\nimport { SupersetTheme } from '@superset-ui/core';\nimport { Tooltip } from 'src/components/Tooltip';\nimport Icons, { IconType } from 'src/components/Icons';\n\nexport interface RefreshLabelProps {\n  onClick: MouseEventHandler<HTMLSpanElement>;\n  tooltipContent: string;\n}\n\nconst RefreshLabel = ({ onClick, tooltipContent }: RefreshLabelProps) => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const IconWithoutRef = forwardRef((props: IconType, ref: any) => (\n    <Icons.Refresh {...props} />\n  ));\n\n  return (\n    <Tooltip title={tooltipContent}>\n      <IconWithoutRef\n        role=\"button\"\n        onClick={onClick}\n        css={(theme: SupersetTheme) => ({\n          cursor: 'pointer',\n          color: theme.colors.grayscale.base,\n          '&:hover': { color: theme.colors.primary.base },\n        })}\n      />\n    </Tooltip>\n  );\n};\n\nexport default RefreshLabel;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  FunctionComponent,\n  useState,\n  ReactNode,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { SelectValue } from 'antd/lib/select';\n\nimport {\n  styled,\n  t,\n  getClientErrorMessage,\n  getClientErrorObject,\n} from '@superset-ui/core';\nimport { Select } from 'src/components';\nimport { FormLabel } from 'src/components/Form';\nimport Icons from 'src/components/Icons';\nimport DatabaseSelector, {\n  DatabaseObject,\n} from 'src/components/DatabaseSelector';\nimport RefreshLabel from 'src/components/RefreshLabel';\nimport CertifiedBadge from 'src/components/CertifiedBadge';\nimport WarningIconWithTooltip from 'src/components/WarningIconWithTooltip';\nimport { useToasts } from 'src/components/MessageToasts/withToasts';\nimport { useTables, Table } from 'src/hooks/apiResources';\n\nconst REFRESH_WIDTH = 30;\n\nconst TableSelectorWrapper = styled.div`\n  ${({ theme }) => `\n    .refresh {\n      display: flex;\n      align-items: center;\n      width: ${REFRESH_WIDTH}px;\n      margin-left: ${theme.gridUnit}px;\n      margin-top: ${theme.gridUnit * 5}px;\n    }\n\n    .section {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    }\n\n    .divider {\n      border-bottom: 1px solid ${theme.colors.secondary.light5};\n      margin: 15px 0;\n    }\n\n    .table-length {\n      color: ${theme.colors.grayscale.light1};\n    }\n\n    .select {\n      flex: 1;\n      max-width: calc(100% - ${theme.gridUnit + REFRESH_WIDTH}px)\n    }\n  `}\n`;\n\nconst TableLabel = styled.span`\n  align-items: center;\n  display: flex;\n  white-space: nowrap;\n\n  svg,\n  small {\n    margin-right: ${({ theme }) => theme.gridUnit}px;\n  }\n`;\n\ninterface TableSelectorProps {\n  clearable?: boolean;\n  database?: DatabaseObject | null;\n  emptyState?: ReactNode;\n  formMode?: boolean;\n  getDbList?: (arg0: any) => void;\n  handleError: (msg: string) => void;\n  isDatabaseSelectEnabled?: boolean;\n  onDbChange?: (db: DatabaseObject) => void;\n  onCatalogChange?: (catalog?: string | null) => void;\n  onSchemaChange?: (schema?: string) => void;\n  readOnly?: boolean;\n  catalog?: string | null;\n  schema?: string;\n  onEmptyResults?: (searchText?: string) => void;\n  sqlLabMode?: boolean;\n  tableValue?: string | string[];\n  onTableSelectChange?: (\n    value?: string | string[],\n    catalog?: string | null,\n    schema?: string,\n  ) => void;\n  tableSelectMode?: 'single' | 'multiple';\n  customTableOptionLabelRenderer?: (table: Table) => JSX.Element;\n}\n\nexport interface TableOption {\n  label: JSX.Element;\n  text: string;\n  value: string;\n}\n\nexport const TableOption = ({ table }: { table: Table }) => {\n  const { value, type, extra } = table;\n  return (\n    <TableLabel title={value}>\n      {type === 'view' ? (\n        <Icons.Eye iconSize=\"m\" />\n      ) : (\n        <Icons.Table iconSize=\"m\" />\n      )}\n      {extra?.certification && (\n        <CertifiedBadge\n          certifiedBy={extra.certification.certified_by}\n          details={extra.certification.details}\n          size=\"l\"\n        />\n      )}\n      {extra?.warning_markdown && (\n        <WarningIconWithTooltip\n          warningMarkdown={extra.warning_markdown}\n          size=\"l\"\n          marginRight={4}\n        />\n      )}\n      {value}\n    </TableLabel>\n  );\n};\n\nfunction renderSelectRow(select: ReactNode, refreshBtn: ReactNode) {\n  return (\n    <div className=\"section\">\n      <span className=\"select\">{select}</span>\n      <span className=\"refresh\">{refreshBtn}</span>\n    </div>\n  );\n}\n\nconst TableSelector: FunctionComponent<TableSelectorProps> = ({\n  database,\n  emptyState,\n  formMode = false,\n  getDbList,\n  handleError,\n  isDatabaseSelectEnabled = true,\n  onDbChange,\n  onCatalogChange,\n  onSchemaChange,\n  readOnly = false,\n  onEmptyResults,\n  catalog,\n  schema,\n  sqlLabMode = true,\n  tableSelectMode = 'single',\n  tableValue = undefined,\n  onTableSelectChange,\n  customTableOptionLabelRenderer,\n}) => {\n  const { addSuccessToast } = useToasts();\n  const [currentCatalog, setCurrentCatalog] = useState<\n    string | null | undefined\n  >(catalog);\n  const [currentSchema, setCurrentSchema] = useState<string | undefined>(\n    schema,\n  );\n  const [tableSelectValue, setTableSelectValue] = useState<\n    SelectValue | undefined\n  >(undefined);\n  const {\n    currentData: data,\n    isFetching: loadingTables,\n    refetch,\n  } = useTables({\n    dbId: database?.id,\n    catalog: currentCatalog,\n    schema: currentSchema,\n    onSuccess: (data, isFetched) => {\n      if (isFetched) {\n        addSuccessToast(t('List updated'));\n      }\n    },\n    onError: err => {\n      getClientErrorObject(err).then(clientError => {\n        handleError(\n          getClientErrorMessage(\n            t('There was an error loading the tables'),\n            clientError,\n          ),\n        );\n      });\n    },\n  });\n\n  const tableOptions = useMemo<TableOption[]>(\n    () =>\n      data\n        ? data.options.map(table => ({\n            value: table.value,\n            label: <TableOption table={table} />,\n            text: table.value,\n            ...(customTableOptionLabelRenderer && {\n              customLabel: customTableOptionLabelRenderer(table),\n            }),\n          }))\n        : [],\n    [data, customTableOptionLabelRenderer],\n  );\n\n  useEffect(() => {\n    // reset selections\n    if (database === undefined) {\n      setCurrentCatalog(undefined);\n      setCurrentSchema(undefined);\n      setTableSelectValue(undefined);\n    }\n  }, [database, tableSelectMode]);\n\n  useEffect(() => {\n    if (tableSelectMode === 'single') {\n      setTableSelectValue(\n        tableOptions.find(option => option.value === tableValue),\n      );\n    } else {\n      setTableSelectValue(\n        tableOptions?.filter(\n          option => option && tableValue?.includes(option.value),\n        ) || [],\n      );\n    }\n  }, [tableOptions, tableValue, tableSelectMode]);\n\n  const internalTableChange = (\n    selectedOptions: TableOption | TableOption[] | undefined,\n  ) => {\n    if (currentSchema) {\n      onTableSelectChange?.(\n        Array.isArray(selectedOptions)\n          ? selectedOptions.map(option => option?.value)\n          : selectedOptions?.value,\n        currentCatalog,\n        currentSchema,\n      );\n    } else {\n      setTableSelectValue(selectedOptions);\n    }\n  };\n\n  const internalDbChange = (db: DatabaseObject) => {\n    if (onDbChange) {\n      onDbChange(db);\n    }\n\n    setCurrentCatalog(undefined);\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const internalCatalogChange = (catalog?: string | null) => {\n    setCurrentCatalog(catalog);\n    if (onCatalogChange) {\n      onCatalogChange(catalog);\n    }\n\n    setCurrentSchema(undefined);\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const internalSchemaChange = (schema?: string) => {\n    setCurrentSchema(schema);\n    if (onSchemaChange) {\n      onSchemaChange(schema);\n    }\n\n    const value = tableSelectMode === 'single' ? undefined : [];\n    setTableSelectValue(value);\n  };\n\n  const handleFilterOption = useMemo(\n    () => (search: string, option: TableOption) => {\n      const searchValue = search.trim().toLowerCase();\n      const { value } = option;\n      return value.toLowerCase().includes(searchValue);\n    },\n    [],\n  );\n\n  function renderTableSelect() {\n    const disabled = (currentSchema && !formMode && readOnly) || !currentSchema;\n\n    const header = sqlLabMode ? (\n      <FormLabel>{t('See table schema')}</FormLabel>\n    ) : (\n      <FormLabel>{t('Table')}</FormLabel>\n    );\n\n    const select = (\n      <Select\n        ariaLabel={t('Select table or type to search tables')}\n        disabled={disabled}\n        filterOption={handleFilterOption}\n        header={header}\n        labelInValue\n        loading={loadingTables}\n        name=\"select-table\"\n        onChange={(options: TableOption | TableOption[]) =>\n          internalTableChange(options)\n        }\n        options={tableOptions}\n        placeholder={t('Select table or type to search tables')}\n        showSearch\n        mode={tableSelectMode}\n        value={tableSelectValue}\n        allowClear={tableSelectMode === 'multiple'}\n        allowSelectAll={false}\n      />\n    );\n\n    const refreshLabel = !readOnly && (\n      <RefreshLabel\n        onClick={() => refetch()}\n        tooltipContent={t('Force refresh table list')}\n      />\n    );\n\n    return renderSelectRow(select, refreshLabel);\n  }\n\n  return (\n    <TableSelectorWrapper>\n      <DatabaseSelector\n        db={database}\n        emptyState={emptyState}\n        formMode={formMode}\n        getDbList={getDbList}\n        handleError={handleError}\n        onDbChange={readOnly ? undefined : internalDbChange}\n        onEmptyResults={onEmptyResults}\n        onCatalogChange={readOnly ? undefined : internalCatalogChange}\n        catalog={currentCatalog}\n        onSchemaChange={readOnly ? undefined : internalSchemaChange}\n        schema={currentSchema}\n        sqlLabMode={sqlLabMode}\n        isDatabaseSelectEnabled={isDatabaseSelectEnabled && !readOnly}\n        readOnly={readOnly}\n      />\n      {sqlLabMode && !formMode && <div className=\"divider\" />}\n      {renderTableSelect()}\n    </TableSelectorWrapper>\n  );\n};\n\nexport const TableSelectorMultiple: FunctionComponent<\n  TableSelectorProps\n> = props => <TableSelector tableSelectMode=\"multiple\" {...props} />;\n\nexport default TableSelector;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { useCallback, useEffect } from 'react';\nimport useEffectEvent from 'src/hooks/useEffectEvent';\nimport { api, JsonResponse } from './queryApi';\n\nexport type CatalogOption = {\n  value: string;\n  label: string;\n  title: string;\n};\n\nexport type FetchCatalogsQueryParams = {\n  dbId?: string | number;\n  forceRefresh: boolean;\n  onSuccess?: (data: CatalogOption[], isRefetched: boolean) => void;\n  onError?: () => void;\n};\n\ntype Params = Omit<FetchCatalogsQueryParams, 'forceRefresh'>;\n\nconst catalogApi = api.injectEndpoints({\n  endpoints: builder => ({\n    catalogs: builder.query<CatalogOption[], FetchCatalogsQueryParams>({\n      providesTags: [{ type: 'Catalogs', id: 'LIST' }],\n      query: ({ dbId, forceRefresh }) => ({\n        endpoint: `/api/v1/database/${dbId}/catalogs/`,\n        urlParams: {\n          force: forceRefresh,\n        },\n        transformResponse: ({ json }: JsonResponse) =>\n          json.result.sort().map((value: string) => ({\n            value,\n            label: value,\n            title: value,\n          })),\n      }),\n      serializeQueryArgs: ({ queryArgs: { dbId } }) => ({\n        dbId,\n      }),\n    }),\n  }),\n});\n\nexport const {\n  useLazyCatalogsQuery,\n  useCatalogsQuery,\n  endpoints: catalogEndpoints,\n  util: catalogApiUtil,\n} = catalogApi;\n\nexport const EMPTY_CATALOGS = [] as CatalogOption[];\n\nexport function useCatalogs(options: Params) {\n  const { dbId, onSuccess, onError } = options || {};\n  const [trigger] = useLazyCatalogsQuery();\n  const result = useCatalogsQuery(\n    { dbId, forceRefresh: false },\n    {\n      skip: !dbId,\n    },\n  );\n\n  const fetchData = useEffectEvent(\n    (dbId: FetchCatalogsQueryParams['dbId'], forceRefresh = false) => {\n      if (dbId && (!result.currentData || forceRefresh)) {\n        trigger({ dbId, forceRefresh }).then(({ isSuccess, isError, data }) => {\n          if (isSuccess) {\n            onSuccess?.(data || EMPTY_CATALOGS, forceRefresh);\n          }\n          if (isError) {\n            onError?.();\n          }\n        });\n      }\n    },\n  );\n\n  const refetch = useCallback(() => {\n    fetchData(dbId, true);\n  }, [dbId, fetchData]);\n\n  useEffect(() => {\n    fetchData(dbId, false);\n  }, [dbId, fetchData]);\n\n  return {\n    ...result,\n    refetch,\n  };\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport rison from 'rison';\nimport Chart from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nfunction extractOwnerNames({ owners }: Chart) {\n  if (!owners) return null;\n  return owners.map(owner => `${owner.first_name} ${owner.last_name}`);\n}\n\nconst ownerNamesQuery = rison.encode({\n  columns: ['owners.first_name', 'owners.last_name'],\n  keys: ['none'],\n});\n\nexport function useChartOwnerNames(chartId: string) {\n  return useTransformedResource(\n    useApiV1Resource<Chart>(`/api/v1/chart/${chartId}?q=${ownerNamesQuery}`),\n    extractOwnerNames,\n  );\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { Dashboard, Datasource, EmbeddedDashboard } from 'src/dashboard/types';\nimport { Chart } from 'src/types/Chart';\nimport { useApiV1Resource, useTransformedResource } from './apiResources';\n\nexport const useDashboard = (idOrSlug: string | number) =>\n  useTransformedResource(\n    useApiV1Resource<Dashboard>(`/api/v1/dashboard/${idOrSlug}`),\n    dashboard => ({\n      ...dashboard,\n      // TODO: load these at the API level\n      metadata:\n        (dashboard.json_metadata && JSON.parse(dashboard.json_metadata)) || {},\n      position_data:\n        dashboard.position_json && JSON.parse(dashboard.position_json),\n      owners: dashboard.owners || [],\n    }),\n  );\n\n// gets the chart definitions for a dashboard\nexport const useDashboardCharts = (idOrSlug: string | number) =>\n  useApiV1Resource<Chart[]>(`/api/v1/dashboard/${idOrSlug}/charts`);\n\n// gets the datasets for a dashboard\n// important: this endpoint only returns the fields in the dataset\n// that are necessary for rendering the given dashboard\nexport const useDashboardDatasets = (idOrSlug: string | number) =>\n  useApiV1Resource<Datasource[]>(`/api/v1/dashboard/${idOrSlug}/datasets`);\n\nexport const useEmbeddedDashboard = (idOrSlug: string | number) =>\n  useApiV1Resource<EmbeddedDashboard>(`/api/v1/dashboard/${idOrSlug}/embedded`);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { api, JsonResponse } from './queryApi';\n\nexport type FetchValidationQueryParams = {\n  dbId?: string | number;\n  catalog?: string | null;\n  schema?: string;\n  sql: string;\n  templateParams?: string;\n};\n\nexport type ValidationResult = {\n  end_column: number | null;\n  line_number: number | null;\n  message: string | null;\n  start_column: number | null;\n};\n\nconst queryValidationApi = api.injectEndpoints({\n  endpoints: builder => ({\n    queryValidations: builder.query<\n      ValidationResult[],\n      FetchValidationQueryParams\n    >({\n      providesTags: ['QueryValidations'],\n      query: ({ dbId, catalog, schema, sql, templateParams }) => {\n        let template_params = templateParams;\n        try {\n          template_params = JSON.parse(templateParams || '');\n        } catch (e) {\n          template_params = undefined;\n        }\n        const postPayload = {\n          catalog,\n          schema,\n          sql,\n          ...(template_params && { template_params }),\n        };\n        return {\n          method: 'post',\n          endpoint: `/api/v1/database/${dbId}/validate_sql/`,\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postPayload),\n          transformResponse: ({ json }: JsonResponse) => json.result,\n        };\n      },\n    }),\n  }),\n});\n\nexport const { useQueryValidationsQuery } = queryValidationApi;\n"],"names":["styled","props","_jsx","AntdBadge","theme","color","count","undefined","colors","primary","base","DatabaseSelectorWrapper","div","gridUnit","LabelStyle","SelectLabel","backend","databaseName","_jsxs","children","Label","className","title","EMPTY_CATALOG_OPTIONS","EMPTY_SCHEMA_OPTIONS","DatabaseSelector","db","formMode","emptyState","getDbList","handleError","isDatabaseSelectEnabled","onDbChange","onEmptyResults","onCatalogChange","catalog","onSchemaChange","schema","readOnly","sqlLabMode","showCatalogSelector","allow_multi_catalog","currentDb","setCurrentDb","useState","currentCatalog","setCurrentCatalog","label","value","catalogRef","useRef","current","currentSchema","setCurrentSchema","schemaRef","addSuccessToast","useToasts","sortComparator","useCallback","itemA","itemB","order","loadDatabases","useMemo","async","search","page","pageSize","endpoint","rison","order_column","order_direction","page_size","filters","col","opr","SupersetClient","get","then","json","result","length","options","map","row","database_name","id","data","totalCount","changeSchema","useEffect","currentData","schemaData","isFetching","loadingSchemas","refetch","refetchSchemas","useSchemas","dbId","onSuccess","schemas","isFetched","find","schemaOption","onError","t","schemaOptions","changeCatalog","catalogData","loadingCatalogs","refetchCatalogs","useCatalogs","catalogs","catalogOption","catalogOptions","renderSelectRow","select","refreshBtn","AsyncSelect","ariaLabel","optionFilterProps","header","FormLabel","lazyLoading","notFoundContent","onChange","database","placeholder","disabled","refreshIcon","RefreshLabel","onClick","tooltipContent","Select","labelInValue","loading","name","item","showSearch","allowClear","renderCatalogSelect","renderSchemaSelect","IconWithoutRef","forwardRef","ref","Icons","Refresh","Tooltip","role","css","cursor","grayscale","TableSelectorWrapper","secondary","light5","light1","TableLabel","span","TableOption","table","type","extra","Eye","iconSize","Table","certification","CertifiedBadge","certifiedBy","certified_by","details","size","warning_markdown","WarningIconWithTooltip","warningMarkdown","marginRight","TableSelector","tableSelectMode","tableValue","onTableSelectChange","customTableOptionLabelRenderer","tableSelectValue","setTableSelectValue","loadingTables","useTables","err","getClientErrorObject","clientError","getClientErrorMessage","tableOptions","text","customLabel","option","filter","includes","handleFilterOption","searchValue","trim","toLowerCase","filterOption","internalTableChange","selectedOptions","Array","isArray","mode","allowSelectAll","renderTableSelect","TableSelectorMultiple","catalogApi","api","injectEndpoints","endpoints","builder","query","providesTags","forceRefresh","urlParams","force","transformResponse","sort","serializeQueryArgs","queryArgs","useLazyCatalogsQuery","useCatalogsQuery","catalogEndpoints","util","catalogApiUtil","EMPTY_CATALOGS","trigger","skip","fetchData","useEffectEvent","isSuccess","isError","extractOwnerNames","owners","owner","first_name","last_name","ownerNamesQuery","columns","keys","useChartOwnerNames","chartId","useTransformedResource","useApiV1Resource","useDashboard","idOrSlug","dashboard","metadata","json_metadata","JSON","parse","position_data","position_json","useDashboardCharts","useDashboardDatasets","queryValidationApi","queryValidations","sql","templateParams","template_params","e","postPayload","method","headers","body","stringify","useQueryValidationsQuery"],"sourceRoot":""}
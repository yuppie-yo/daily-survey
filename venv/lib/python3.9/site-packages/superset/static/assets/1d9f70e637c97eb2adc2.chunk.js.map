{"version":3,"file":"1d9f70e637c97eb2adc2.chunk.js","mappings":"mIAAA,MACMA,EAAyB,CAC7BC,qBAAsB,KACtBC,sBAH8B,IAAIC,WAAW,CAAC,EAAG,IAAK,IAAK,MAI3DC,eAAe,EACfC,kBAAkB,GCSpB,GACEC,OAAQ,CACN,+BAAgC,mGAIhC,yBAA0B,0DAI1B,WAAY,yCAGZ,yBAA0B,CACxBC,MAAO,GACPC,UAAW,2ODcfC,KAAM,UACNC,GAJS,+rCAKTC,GAJS,qhCAKTC,YAtCF,WACE,IAAIC,EAAOC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAKd,EAC/E,MAAMiB,EAAW,CAAC,EAElB,QAAkCD,IAA9BH,EAAKZ,qBACP,GAAKY,EAAKZ,qBAEH,CACL,MAAMiB,EAAgBL,EAAKZ,qBAAqBkB,MAAM,EAAG,GACzDF,EAASG,4BAA8B,EACvCH,EAASI,uBAAyBH,CACpC,MALED,EAASG,4BAA8B,EAQ3C,GAAIP,EAAKX,sBAAuB,CAC9B,MAAMoB,EAAQC,MAAMC,KAAKX,EAAKX,uBAAuBuB,GAAKA,EAAI,MAEzDC,OAAOC,SAASL,EAAM,MACzBA,EAAM,GAAK,GAGbL,EAASW,wBAA0BN,CACrC,CAOA,YAL2BN,IAAvBH,EAAKT,gBACPa,EAASY,gBAAkBC,QAAQjB,EAAKT,eACxCa,EAASc,mBAAqBD,QAAQjB,EAAKR,mBAGtCY,CACT,E,4HElBA,MCkBMe,EAAkD,CAAC,EAAG,EAAG,EAAG,KA6G5DC,EAAoD,CACxDC,YAAa,SACbC,YAAa,CAACC,KAAM,SAAUC,IAAK,EAAGC,MAAO,GAC7CC,gBAAiB,CAACH,KAAM,SAAUC,IAAK,EAAGC,MAAO,GACjDE,gBAAiB,CAACJ,KAAM,SAAUC,IAAK,EAAGC,MAAOZ,OAAOe,kBAExDC,eAAgB,SAChBC,eAAgB,CAACP,KAAM,SAAUC,IAAK,EAAGC,MAAO,GAChDM,mBAAoB,CAACR,KAAM,SAAUC,IAAK,EAAGC,MAAO,GACpDO,mBAAoB,CAACT,KAAM,SAAUC,IAAK,EAAGC,MAAOZ,OAAOe,kBAE3DK,SAAS,EACTC,QAAQ,EACRC,WAAW,EACXC,cAAc,EAEdC,YAAa,CAACd,KAAM,WAAYE,MAAOb,GAAKA,EAAE0B,UAC9CC,UAAW,CAAChB,KAAM,WAAYE,MAAO,GACrCe,aAAc,CAACjB,KAAM,WAAYE,MAAON,GACxCsB,aAAc,CAAClB,KAAM,WAAYE,MAAON,GACxCuB,aAAc,CAACnB,KAAM,WAAYE,MAAO,GAGxCkB,YAAa,CAACC,cAAe,gBAC7BC,QAAS,CAACD,cAAe,WACzBE,SAAU,CAACF,cAAe,CAAC,eAAgB,kBAI9B,MAAMG,UAAmEC,EAAAA,EAMtFC,UAAAA,GACE,OAAOC,MAAMD,WAAW,CAACpD,GDnK7B,4/ECmKiCC,GCnKjC,8qCDmKqCqD,QAAS,CAACC,EAAAA,EAAWC,EAAAA,IACvD,CAEDC,eAAAA,GACEC,KAAKC,sBAAuBC,aAAa,CACvCC,kBAAmB,CACjBC,KAAM,EACNpC,KAAM,KACNqC,KAAML,KAAKM,oBACXC,YAAY,EACZC,SAAU,eAEZC,eAAgB,CACdL,KAAM,EACNG,YAAY,EACZC,SAAU,YACVE,aAAc,GAEhBC,mBAAoB,CAClBP,KAAMJ,KAAKY,MAAMC,YAAYlE,OAC7B4D,YAAY,EACZO,YAAY,EACZ9C,KAAM,KACNwC,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BK,mBAAoB,CAClBX,KAAMJ,KAAKY,MAAMC,YAAYlE,OAC7B4D,YAAY,EACZO,YAAY,EACZ9C,KAAM,KACNwC,SAAU,eACVE,aAAc,CAAC,EAAG,EAAG,EAAG,MAE1BM,mBAAoB,CAClBZ,KAAM,EACNG,YAAY,EACZC,SAAU,eACVE,aAAc,IAGnB,CAEDO,WAAAA,CAAYC,GAGV,GAFAvB,MAAMsB,YAAYC,GAEdA,EAAOC,YAAYC,kBAAmB,KAAAC,EACxC,MAAM,GAACC,GAAMtB,KAAKuB,QAClB,QAAAF,EAAArB,KAAKwB,MAAMC,aAAX,IAAAJ,GAAAA,EAAkBK,SAClB1B,KAAKwB,MAAMC,MAAQzB,KAAK2B,UAAUL,GAClCtB,KAAKC,sBAAuB2B,eAC7B,CACF,CAEDC,IAAAA,EAAK,SAAChF,IACJ,MAAM,YACJiB,EADI,YAEJC,EAFI,gBAGJI,EAHI,gBAIJC,EAJI,QAKJM,EALI,OAMJC,EANI,UAOJC,EAPI,aAQJC,EARI,eASJP,EATI,eAUJC,EAVI,mBAWJC,EAXI,mBAYJC,GACEuB,KAAKY,MAETZ,KAAKwB,MAAMC,MACRK,YAAYjF,GACZiF,YAAY,CACXpD,QAASA,EAAU,EAAI,EACvBC,SACAC,YACAC,eACAf,YAAaiE,EAAAA,GAAKjE,GAClBC,cACAI,kBACAC,kBACAE,eAAgByD,EAAAA,GAAKzD,GACrBC,iBACAC,qBACAC,uBAEDoD,MACJ,CAESF,SAAAA,CAAUL,GAIlB,OAAO,IAAIU,EAAAA,EAAMV,EAAI,IAChBtB,KAAKN,aACRuC,GAAIjC,KAAKY,MAAMqB,GACfC,SAAU,IAAIC,EAAAA,EAAS,CACrBC,SAAU,EACVC,YAAa,EACbC,WAAY,CACVC,UAAW,CAACnC,KAAM,EAAGlC,MAAO,IAAIsE,aATpB,EAAE,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,QAYtDC,aAAa,GAEhB,G,OAhHkBjD,EAAAA,eAGG3B,I,OAHH2B,EAAAA,YAIQ,mB,yIEzJtB,MAQDkD,EAAgB,Q,gBCCtB,SAASC,EACPC,EACAC,GAEA,OAAQC,IAAiB,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACvB,MAAMC,GACM,MAAVX,OAAU,EAAVA,EAAaD,EAASa,mBAAmBvF,UACzCwF,EAAAA,EAAAA,GAA0C,OAA5BX,EAACH,EAASa,yBAAkB,EAA3BV,EAA6B7E,OAC9C,OACEyF,EAAAA,EAAAA,IAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,IAACC,EAAAA,EACC,CACAP,OAAOQ,EAAAA,EAAAA,GAAE,0BAA4B,KACrC9F,MAAO,GAAW,OAAX8E,EAAGF,EAAEmB,SAAgB,OAAVhB,EAARD,EAAUjE,eAAF,EAARkE,EAAqB,OAAe,OAAbC,EAAKJ,EAAEmB,SAAgB,OAAVd,EAARD,EAAUnE,eAAF,EAARoE,EAAqB,QAEpD,OAARC,EAAAN,EAAEmB,aAAM,EAARb,EAAUc,aACTJ,EAAAA,EAAAA,IAACC,EAAAA,EACC,CACAP,OAAOQ,EAAAA,EAAAA,GAAE,YAAc,KACvB9F,MAAO,GAAW,OAAXmF,EAAGP,EAAEmB,aAAM,EAARZ,EAAUa,eAGf,OAARZ,EAAAR,EAAEmB,aAAM,EAARX,EAAUa,UACTL,EAAAA,EAAAA,IAACC,EAAAA,EAAU,CAACP,MAAO,GAAGA,MAAWtF,MAAO,GAAW,OAAXqF,EAAGT,EAAEmB,aAAM,EAARV,EAAUY,aAEnD,CAGZ,CAEM,SAAUC,EACdxB,EACAyB,EACAC,EACAC,EACAC,GAEA,MAAMC,EAAK7B,EACL8B,EAAiBL,EAAQM,KAAKC,SAASC,KAAKC,IAChD,IAAIC,GDtCqBC,ECsCCP,EAAGQ,WDtCQC,ECsCIJ,EAAEC,QDrChC,aAATC,EACKG,KAAKC,KAAKF,EAAMC,KAAKE,IAEjB,aAATL,EACKE,EAEI,cAATF,EACW,IAANE,EAEI,iBAATF,EACKE,EAAMxC,EAEF,cAATsC,EACgC,IAA3BG,KAAKC,KAAKF,EAAMC,KAAKE,IAEjB,iBAATL,EACKG,KAAKC,KAAKF,EAAMC,KAAKE,IAAM3C,EAG7B,OCkBiD,IDtCpD,IAAuBsC,EAAYE,EC0CrC,GAHIT,EAAGa,aACLP,GAAUN,EAAGa,YAEXR,EAAE5H,MACJ,MAAO,IAAK4H,EAAGC,UAEjB,MAAMQ,EAAId,EAAGe,cAAgB,CAAEC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,EAAG,GAC9C1I,EAAQ,CAACqI,EAAEE,EAAGF,EAAEG,EAAGH,EAAEI,EAAS,IAANJ,EAAEK,GAEhC,MAAO,IAAKd,EAAGC,SAAQ7H,QAAO,IAGhC,OAAO,IAAIsC,EAAAA,EAAiB,CAC1ByC,GAAI,iBAAiBwC,EAAGoB,WACxBlB,KAAMD,EACNrE,MAAM,EACNpB,aAAc6F,GAAKA,EAAE5H,MACrB8B,UAAW8F,GAAKA,EAAEC,OAClB5G,gBAAiBb,OAAOmH,EAAGqB,kBAAelJ,EAC1CwB,gBAAiBd,OAAOmH,EAAGsB,kBAAenJ,EAC1C8B,SAAS,MACNsH,EAAAA,EAAAA,GACDvB,EACAF,EACA5B,EAAkB8B,EAAc,MAAVD,OAAU,EAAVA,EAAY3B,cAGxC,CAEA,SAAeoD,EAAAA,EAAAA,GAAiC7B,GAzEhD,SAAmBO,GACjB,OAAOA,EAAKE,KAAIC,GAAKA,EAAE/F,UACzB,G","sources":["webpack://superset/./node_modules/@luma.gl/shadertools/dist/esm/modules/picking/picking.js","webpack://superset/../../../../src/shaderlib/picking/picking.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer-vertex.glsl.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer.ts","webpack://superset/../../../src/scatterplot-layer/scatterplot-layer-fragment.glsl.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/geo.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Scatter/Scatter.tsx"],"sourcesContent":["const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  pickingActive: false,\n  pickingAttribute: false\n};\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor) {\n    const color = Array.from(opts.pickingHighlightColor, x => x / 255);\n\n    if (!Number.isFinite(color[3])) {\n      color[3] = 1;\n    }\n\n    uniforms.picking_uHighlightColor = color;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n\n  return uniforms;\n}\n\nconst vs = \"uniform bool picking_uActive;\\nuniform bool picking_uAttribute;\\nuniform vec3 picking_uSelectedColor;\\nuniform bool picking_uSelectedColorValid;\\n\\nout vec4 picking_vRGBcolor_Avalid;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool picking_isColorValid(vec3 color) {\\n  return dot(color, vec3(1.0)) > 0.001;\\n}\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  if (picking_uActive) {\\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\\n\\n    if (!picking_uAttribute) {\\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\\n    }\\n  } else {\\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\\n  }\\n}\\n\\nvoid picking_setPickingAttribute(float value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.r = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec2 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rg = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec3 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rgb = value;\\n  }\\n}\\n\";\nconst fs = \"uniform bool picking_uActive;\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nin vec4 picking_vRGBcolor_Avalid;\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  if (picking_uActive) {\\n    return color;\\n  }\\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\\n\\n  if (selected) {\\n    float highLightAlpha = picking_uHighlightColor.a;\\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\\n    float highLightRatio = highLightAlpha / blendedAlpha;\\n\\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\\n    return vec4(blendedRGB, blendedAlpha);\\n  } else {\\n    return color;\\n  }\\n}\\nvec4 picking_filterPickingColor(vec4 color) {\\n  if (picking_uActive) {\\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\\n      discard;\\n    }\\n    return picking_vRGBcolor_Avalid;\\n  }\\n  return color;\\n}\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n\";\nexport const picking = {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n//# sourceMappingURL=picking.js.map","import {picking} from '@luma.gl/core';\nimport type {ShaderModule} from '../../types/types';\n\ntype PickingModuleSettings = {\n  /** Set to a picking color to visually highlight that item */\n  pickingSelectedColor?: [number, number, number] | null;\n  /** Color of the highlight */\n  pickingHighlightColor?: [number, number, number, number];\n  /** Set to true when rendering to off-screen \"picking\" buffer */\n  pickingActive?: boolean;\n  /** Set to true when picking an attribute value instead of object index */\n  pickingAttribute?: boolean;\n};\n\nexport default {\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': `\n    // for picking depth values\n    picking_setPickingAttribute(position.z / position.w);\n  `,\n    'vs:DECKGL_FILTER_COLOR': `\n  picking_setPickingColor(geometry.pickingColor);\n  `,\n    // TODO - this should be declared in the luma module\n    'fs:#decl': `\nuniform bool picking_uAttribute;\n  `,\n    'fs:DECKGL_FILTER_COLOR': {\n      order: 99,\n      injection: `\n  // use highlight color if this fragment belongs to the selected object.\n  color = picking_filterHighlightColor(color);\n\n  // use picking color if rendering to picking FBO.\n  color = picking_filterPickingColor(color);\n    `\n    }\n  },\n  ...picking\n} as ShaderModule<PickingModuleSettings>;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-vertex-shader\n\nattribute vec3 positions;\n\nattribute vec3 instancePositions;\nattribute vec3 instancePositions64Low;\nattribute float instanceRadius;\nattribute float instanceLineWidths;\nattribute vec4 instanceFillColors;\nattribute vec4 instanceLineColors;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform float radiusScale;\nuniform float radiusMinPixels;\nuniform float radiusMaxPixels;\nuniform float lineWidthScale;\nuniform float lineWidthMinPixels;\nuniform float lineWidthMaxPixels;\nuniform float stroked;\nuniform bool filled;\nuniform bool antialiasing;\nuniform bool billboard;\nuniform int radiusUnits;\nuniform int lineWidthUnits;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\n\nvoid main(void) {\n  geometry.worldPosition = instancePositions;\n\n  // Multiply out radius and clamp to limits\n  outerRadiusPixels = clamp(\n    project_size_to_pixel(radiusScale * instanceRadius, radiusUnits),\n    radiusMinPixels, radiusMaxPixels\n  );\n  \n  // Multiply out line width and clamp to limits\n  float lineWidthPixels = clamp(\n    project_size_to_pixel(lineWidthScale * instanceLineWidths, lineWidthUnits),\n    lineWidthMinPixels, lineWidthMaxPixels\n  );\n\n  // outer radius needs to offset by half stroke width\n  outerRadiusPixels += stroked * lineWidthPixels / 2.0;\n\n  // Expand geometry to accomodate edge smoothing\n  float edgePadding = antialiasing ? (outerRadiusPixels + SMOOTH_EDGE_RADIUS) / outerRadiusPixels : 1.0;\n\n  // position on the containing square in [-1, 1] space\n  unitPosition = edgePadding * positions.xy;\n  geometry.uv = unitPosition;\n  geometry.pickingColor = instancePickingColors;\n\n  innerUnitRadius = 1.0 - stroked * lineWidthPixels / outerRadiusPixels;\n  \n  if (billboard) {\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, vec3(0.0), geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n    vec3 offset = edgePadding * positions * outerRadiusPixels;\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position.xy += project_pixel_size_to_clipspace(offset.xy);\n  } else {\n    vec3 offset = edgePadding * positions * project_pixel_size(outerRadiusPixels);\n    DECKGL_FILTER_SIZE(offset, geometry);\n    gl_Position = project_position_to_clipspace(instancePositions, instancePositions64Low, offset, geometry.position);\n    DECKGL_FILTER_GL_POSITION(gl_Position, geometry);\n  }\n\n  // Apply opacity to instance color, or return instance picking color\n  vFillColor = vec4(instanceFillColors.rgb, instanceFillColors.a * opacity);\n  DECKGL_FILTER_COLOR(vFillColor, geometry);\n  vLineColor = vec4(instanceLineColors.rgb, instanceLineColors.a * opacity);\n  DECKGL_FILTER_COLOR(vLineColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {Layer, project32, picking, UNIT} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './scatterplot-layer-vertex.glsl';\nimport fs from './scatterplot-layer-fragment.glsl';\n\nimport type {\n  LayerProps,\n  LayerDataSource,\n  UpdateParameters,\n  Accessor,\n  Unit,\n  Position,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\n/** All props supported by the ScatterplotLayer */\nexport type ScatterplotLayerProps<DataT = any> = _ScatterplotLayerProps<DataT> & LayerProps;\n\n/** Props added by the ScatterplotLayer */\ntype _ScatterplotLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * The units of the radius, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  radiusUnits?: Unit;\n  /**\n   * Radius multiplier.\n   * @default 1\n   */\n  radiusScale?: number;\n  /**\n   * The minimum radius in pixels. This prop can be used to prevent the circle from getting too small when zoomed out.\n   * @default 0\n   */\n  radiusMinPixels?: number;\n  /**\n   * The maximum radius in pixels. This prop can be used to prevent the circle from getting too big when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  radiusMaxPixels?: number;\n\n  /**\n   * The units of the stroke width, one of `'meters'`, `'common'`, and `'pixels'`.\n   * @default 'meters'\n   */\n  lineWidthUnits?: Unit;\n  /**\n   * Stroke width multiplier.\n   * @default 1\n   */\n  lineWidthScale?: number;\n  /**\n   * The minimum stroke width in pixels. This prop can be used to prevent the line from getting too thin when zoomed out.\n   * @default 0\n   */\n  lineWidthMinPixels?: number;\n  /**\n   * The maximum stroke width in pixels. This prop can be used to prevent the circle from getting too thick when zoomed in.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  lineWidthMaxPixels?: number;\n\n  /**\n   * Draw the outline of points.\n   * @default false\n   */\n  stroked?: boolean;\n  /**\n   * Draw the filled area of points.\n   * @default true\n   */\n  filled?: boolean;\n  /**\n   * If `true`, rendered circles always face the camera. If `false` circles face up (i.e. are parallel with the ground plane).\n   * @default false\n   */\n  billboard?: boolean;\n  /**\n   * If `true`, circles are rendered with smoothed edges. If `false`, circles are rendered with rough edges. Antialiasing can cause artifacts on edges of overlapping circles.\n   * @default true\n   */\n  antialiasing?: boolean;\n\n  /**\n   * Center position accessor.\n   */\n  getPosition?: Accessor<DataT, Position>;\n  /**\n   * Radius accessor.\n   * @default 1\n   */\n  getRadius?: Accessor<DataT, number>;\n  /**\n   * Fill color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getFillColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke color accessor.\n   * @default [0, 0, 0, 255]\n   */\n  getLineColor?: Accessor<DataT, Color>;\n  /**\n   * Stroke width accessor.\n   * @default 1\n   */\n  getLineWidth?: Accessor<DataT, number>;\n  /**\n   * @deprecated Use `getLineWidth` instead\n   */\n  strokeWidth?: number;\n  /**\n   * @deprecated Use `stroked` instead\n   */\n  outline?: boolean;\n  /**\n   * @deprecated Use `getFillColor` and `getLineColor` instead\n   */\n  getColor?: Accessor<DataT, Color>;\n};\n\nconst defaultProps: DefaultProps<ScatterplotLayerProps> = {\n  radiusUnits: 'meters',\n  radiusScale: {type: 'number', min: 0, value: 1},\n  radiusMinPixels: {type: 'number', min: 0, value: 0}, //  min point radius in pixels\n  radiusMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER}, // max point radius in pixels\n\n  lineWidthUnits: 'meters',\n  lineWidthScale: {type: 'number', min: 0, value: 1},\n  lineWidthMinPixels: {type: 'number', min: 0, value: 0},\n  lineWidthMaxPixels: {type: 'number', min: 0, value: Number.MAX_SAFE_INTEGER},\n\n  stroked: false,\n  filled: true,\n  billboard: false,\n  antialiasing: true,\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getRadius: {type: 'accessor', value: 1},\n  getFillColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getLineWidth: {type: 'accessor', value: 1},\n\n  // deprecated\n  strokeWidth: {deprecatedFor: 'getLineWidth'},\n  outline: {deprecatedFor: 'stroked'},\n  getColor: {deprecatedFor: ['getFillColor', 'getLineColor']}\n};\n\n/** Render circles at given coordinates. */\nexport default class ScatterplotLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScatterplotLayerProps<DataT>>\n> {\n  static defaultProps = defaultProps;\n  static layerName: string = 'ScatterplotLayer';\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager()!.addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceRadius: {\n        size: 1,\n        transition: true,\n        accessor: 'getRadius',\n        defaultValue: 1\n      },\n      instanceFillColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: this.props.colorFormat.length,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    if (params.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {\n      radiusUnits,\n      radiusScale,\n      radiusMinPixels,\n      radiusMaxPixels,\n      stroked,\n      filled,\n      billboard,\n      antialiasing,\n      lineWidthUnits,\n      lineWidthScale,\n      lineWidthMinPixels,\n      lineWidthMaxPixels\n    } = this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        stroked: stroked ? 1 : 0,\n        filled,\n        billboard,\n        antialiasing,\n        radiusUnits: UNIT[radiusUnits],\n        radiusScale,\n        radiusMinPixels,\n        radiusMaxPixels,\n        lineWidthUnits: UNIT[lineWidthUnits],\n        lineWidthScale,\n        lineWidthMinPixels,\n        lineWidthMaxPixels\n      })\n      .draw();\n  }\n\n  protected _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [-1, -1, 0, 1, -1, 0, 1, 1, 0, -1, 1, 0];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 3, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME scatterplot-layer-fragment-shader\n\nprecision highp float;\n\nuniform bool filled;\nuniform float stroked;\nuniform bool antialiasing;\n\nvarying vec4 vFillColor;\nvarying vec4 vLineColor;\nvarying vec2 unitPosition;\nvarying float innerUnitRadius;\nvarying float outerRadiusPixels;\n\nvoid main(void) {\n  geometry.uv = unitPosition;\n\n  float distToCenter = length(unitPosition) * outerRadiusPixels;\n  float inCircle = antialiasing ? \n    smoothedge(distToCenter, outerRadiusPixels) : \n    step(distToCenter, outerRadiusPixels);\n\n  if (inCircle == 0.0) {\n    discard;\n  }\n\n  if (stroked > 0.5) {\n    float isLine = antialiasing ? \n      smoothedge(innerUnitRadius * outerRadiusPixels, distToCenter) :\n      step(innerUnitRadius * outerRadiusPixels, distToCenter);\n\n    if (filled) {\n      gl_FragColor = mix(vFillColor, vLineColor, isLine);\n    } else {\n      if (isLine == 0.0) {\n        discard;\n      }\n      gl_FragColor = vec4(vLineColor.rgb, vLineColor.a * isLine);\n    }\n  } else if (filled) {\n    gl_FragColor = vFillColor;\n  } else {\n    discard;\n  }\n\n  gl_FragColor.a *= inCircle;\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nexport type Unit =\n  | 'square_m'\n  | 'radius_m'\n  | 'radius_km'\n  | 'radius_miles'\n  | 'square_km'\n  | 'square_miles';\n\nexport const defaultViewport = {\n  bearing: 0,\n  latitude: 31.222656842808707,\n  longitude: 6.85236157047845,\n  pitch: 0,\n  zoom: 1,\n};\n\nconst METER_TO_MILE = 1609.34;\n\nexport function unitToRadius(unit: Unit, num: number) {\n  if (unit === 'square_m') {\n    return Math.sqrt(num / Math.PI);\n  }\n  if (unit === 'radius_m') {\n    return num;\n  }\n  if (unit === 'radius_km') {\n    return num * 1000;\n  }\n  if (unit === 'radius_miles') {\n    return num * METER_TO_MILE;\n  }\n  if (unit === 'square_km') {\n    return Math.sqrt(num / Math.PI) * 1000;\n  }\n  if (unit === 'square_miles') {\n    return Math.sqrt(num / Math.PI) * METER_TO_MILE;\n  }\n\n  return null;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ScatterplotLayer } from 'deck.gl/typed';\nimport {\n  Datasource,\n  getMetricLabel,\n  JsonObject,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { unitToRadius } from '../../utils/geo';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nfunction setTooltipContent(\n  formData: QueryFormData,\n  verboseMap?: Record<string, string>,\n) {\n  return (o: JsonObject) => {\n    const label =\n      verboseMap?.[formData.point_radius_fixed.value] ||\n      getMetricLabel(formData.point_radius_fixed?.value);\n    return (\n      <div className=\"deckgl-tooltip\">\n        <TooltipRow\n          // eslint-disable-next-line prefer-template\n          label={t('Longitude and Latitude') + ': '}\n          value={`${o.object?.position?.[0]}, ${o.object?.position?.[1]}`}\n        />\n        {o.object?.cat_color && (\n          <TooltipRow\n            // eslint-disable-next-line prefer-template\n            label={t('Category') + ': '}\n            value={`${o.object?.cat_color}`}\n          />\n        )}\n        {o.object?.metric && (\n          <TooltipRow label={`${label}: `} value={`${o.object?.metric}`} />\n        )}\n      </div>\n    );\n  };\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  datasource: Datasource,\n) {\n  const fd = formData;\n  const dataWithRadius = payload.data.features.map((d: JsonObject) => {\n    let radius = unitToRadius(fd.point_unit, d.radius) || 10;\n    if (fd.multiplier) {\n      radius *= fd.multiplier;\n    }\n    if (d.color) {\n      return { ...d, radius };\n    }\n    const c = fd.color_picker || { r: 0, g: 0, b: 0, a: 1 };\n    const color = [c.r, c.g, c.b, c.a * 255];\n\n    return { ...d, radius, color };\n  });\n\n  return new ScatterplotLayer({\n    id: `scatter-layer-${fd.slice_id}` as const,\n    data: dataWithRadius,\n    fp64: true,\n    getFillColor: d => d.color,\n    getRadius: d => d.radius,\n    radiusMinPixels: Number(fd.min_radius) || undefined,\n    radiusMaxPixels: Number(fd.max_radius) || undefined,\n    stroked: false,\n    ...commonLayerProps(\n      fd,\n      setTooltip,\n      setTooltipContent(fd, datasource?.verboseMap),\n    ),\n  });\n}\n\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);\n"],"names":["DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","Uint8Array","pickingActive","pickingAttribute","inject","order","injection","name","vs","fs","getUniforms","opts","arguments","length","undefined","uniforms","selectedColor","slice","picking_uSelectedColorValid","picking_uSelectedColor","color","Array","from","x","Number","isFinite","picking_uHighlightColor","picking_uActive","Boolean","picking_uAttribute","DEFAULT_COLOR","defaultProps","radiusUnits","radiusScale","type","min","value","radiusMinPixels","radiusMaxPixels","MAX_SAFE_INTEGER","lineWidthUnits","lineWidthScale","lineWidthMinPixels","lineWidthMaxPixels","stroked","filled","billboard","antialiasing","getPosition","position","getRadius","getFillColor","getLineColor","getLineWidth","strokeWidth","deprecatedFor","outline","getColor","ScatterplotLayer","Layer","getShaders","super","modules","project32","picking","initializeState","this","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceRadius","defaultValue","instanceFillColors","props","colorFormat","normalized","instanceLineColors","instanceLineWidths","updateState","params","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","setUniforms","UNIT","Model","id","geometry","Geometry","drawMode","vertexCount","attributes","positions","Float32Array","isInstanced","METER_TO_MILE","setTooltipContent","formData","verboseMap","o","_formData$point_radiu","_o$object","_o$object$position","_o$object2","_o$object2$position","_o$object3","_o$object4","_o$object5","_o$object6","label","point_radius_fixed","getMetricLabel","_jsxs","className","children","_jsx","TooltipRow","t","object","cat_color","metric","getLayer","payload","onAddFilter","setTooltip","datasource","fd","dataWithRadius","data","features","map","d","radius","unit","point_unit","num","Math","sqrt","PI","multiplier","c","color_picker","r","g","b","a","slice_id","min_radius","max_radius","commonLayerProps","createCategoricalDeckGLComponent"],"sourceRoot":""}
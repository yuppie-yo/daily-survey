{"version":3,"file":"a5dcb602d4d7cfd66d9b.chunk.js","mappings":"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","sources":["webpack://superset/./node_modules/@luma.gl/shadertools/dist/esm/modules/picking/picking.js","webpack://superset/../../../../src/shaderlib/picking/picking.ts","webpack://superset/../../../src/arc-layer/arc-layer-vertex.glsl.ts","webpack://superset/../../../src/arc-layer/arc-layer.ts","webpack://superset/../../../src/arc-layer/arc-layer-fragment.glsl.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Arc/Arc.tsx"],"sourcesContent":["const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  pickingActive: false,\n  pickingAttribute: false\n};\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor) {\n    const color = Array.from(opts.pickingHighlightColor, x => x / 255);\n\n    if (!Number.isFinite(color[3])) {\n      color[3] = 1;\n    }\n\n    uniforms.picking_uHighlightColor = color;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n\n  return uniforms;\n}\n\nconst vs = \"uniform bool picking_uActive;\\nuniform bool picking_uAttribute;\\nuniform vec3 picking_uSelectedColor;\\nuniform bool picking_uSelectedColorValid;\\n\\nout vec4 picking_vRGBcolor_Avalid;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool picking_isColorValid(vec3 color) {\\n  return dot(color, vec3(1.0)) > 0.001;\\n}\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  if (picking_uActive) {\\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\\n\\n    if (!picking_uAttribute) {\\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\\n    }\\n  } else {\\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\\n  }\\n}\\n\\nvoid picking_setPickingAttribute(float value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.r = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec2 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rg = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec3 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rgb = value;\\n  }\\n}\\n\";\nconst fs = \"uniform bool picking_uActive;\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nin vec4 picking_vRGBcolor_Avalid;\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  if (picking_uActive) {\\n    return color;\\n  }\\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\\n\\n  if (selected) {\\n    float highLightAlpha = picking_uHighlightColor.a;\\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\\n    float highLightRatio = highLightAlpha / blendedAlpha;\\n\\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\\n    return vec4(blendedRGB, blendedAlpha);\\n  } else {\\n    return color;\\n  }\\n}\\nvec4 picking_filterPickingColor(vec4 color) {\\n  if (picking_uActive) {\\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\\n      discard;\\n    }\\n    return picking_vRGBcolor_Avalid;\\n  }\\n  return color;\\n}\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n\";\nexport const picking = {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n//# sourceMappingURL=picking.js.map","import {picking} from '@luma.gl/core';\nimport type {ShaderModule} from '../../types/types';\n\ntype PickingModuleSettings = {\n  /** Set to a picking color to visually highlight that item */\n  pickingSelectedColor?: [number, number, number] | null;\n  /** Color of the highlight */\n  pickingHighlightColor?: [number, number, number, number];\n  /** Set to true when rendering to off-screen \"picking\" buffer */\n  pickingActive?: boolean;\n  /** Set to true when picking an attribute value instead of object index */\n  pickingAttribute?: boolean;\n};\n\nexport default {\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': `\n    // for picking depth values\n    picking_setPickingAttribute(position.z / position.w);\n  `,\n    'vs:DECKGL_FILTER_COLOR': `\n  picking_setPickingColor(geometry.pickingColor);\n  `,\n    // TODO - this should be declared in the luma module\n    'fs:#decl': `\nuniform bool picking_uAttribute;\n  `,\n    'fs:DECKGL_FILTER_COLOR': {\n      order: 99,\n      injection: `\n  // use highlight color if this fragment belongs to the selected object.\n  color = picking_filterHighlightColor(color);\n\n  // use picking color if rendering to picking FBO.\n  color = picking_filterPickingColor(color);\n    `\n    }\n  },\n  ...picking\n} as ShaderModule<PickingModuleSettings>;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-vertex-shader\n\nattribute vec3 positions;\nattribute vec4 instanceSourceColors;\nattribute vec4 instanceTargetColors;\nattribute vec3 instanceSourcePositions;\nattribute vec3 instanceSourcePositions64Low;\nattribute vec3 instanceTargetPositions;\nattribute vec3 instanceTargetPositions64Low;\nattribute vec3 instancePickingColors;\nattribute float instanceWidths;\nattribute float instanceHeights;\nattribute float instanceTilts;\n\nuniform bool greatCircle;\nuniform bool useShortestPath;\nuniform float numSegments;\nuniform float opacity;\nuniform float widthScale;\nuniform float widthMinPixels;\nuniform float widthMaxPixels;\nuniform int widthUnits;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nfloat paraboloid(float distance, float sourceZ, float targetZ, float ratio) {\n  // d: distance on the xy plane\n  // r: ratio of the current point\n  // p: ratio of the peak of the arc\n  // h: height multiplier\n  // z = f(r) = sqrt(r * (p * 2 - r)) * d * h\n  // f(0) = 0\n  // f(1) = dz\n\n  float deltaZ = targetZ - sourceZ;\n  float dh = distance * instanceHeights;\n  if (dh == 0.0) {\n    return sourceZ + deltaZ * ratio;\n  }\n  float unitZ = deltaZ / dh;\n  float p2 = unitZ * unitZ + 1.0;\n\n  // sqrt does not deal with negative values, manually flip source and target if delta.z < 0\n  float dir = step(deltaZ, 0.0);\n  float z0 = mix(sourceZ, targetZ, dir);\n  float r = mix(ratio, 1.0 - ratio, dir);\n  return sqrt(r * (p2 - r)) * dh + z0;\n}\n\n// offset vector by strokeWidth pixels\n// offset_direction is -1 (left) or 1 (right)\nvec2 getExtrusionOffset(vec2 line_clipspace, float offset_direction, float width) {\n  // normalized direction of the line\n  vec2 dir_screenspace = normalize(line_clipspace * project_uViewportSize);\n  // rotate by 90 degrees\n  dir_screenspace = vec2(-dir_screenspace.y, dir_screenspace.x);\n\n  return dir_screenspace * offset_direction * width / 2.0;\n}\n\nfloat getSegmentRatio(float index) {\n  return smoothstep(0.0, 1.0, index / (numSegments - 1.0));\n}\n\nvec3 interpolateFlat(vec3 source, vec3 target, float segmentRatio) {\n  float distance = length(source.xy - target.xy);\n  float z = paraboloid(distance, source.z, target.z, segmentRatio);\n\n  float tiltAngle = radians(instanceTilts);\n  vec2 tiltDirection = normalize(target.xy - source.xy);\n  vec2 tilt = vec2(-tiltDirection.y, tiltDirection.x) * z * sin(tiltAngle);\n\n  return vec3(\n    mix(source.xy, target.xy, segmentRatio) + tilt,\n    z * cos(tiltAngle)\n  );\n}\n\n/* Great circle interpolation\n * http://www.movable-type.co.uk/scripts/latlong.html\n */\nfloat getAngularDist (vec2 source, vec2 target) {\n  vec2 sourceRadians = radians(source);\n  vec2 targetRadians = radians(target);\n  vec2 sin_half_delta = sin((sourceRadians - targetRadians) / 2.0);\n  vec2 shd_sq = sin_half_delta * sin_half_delta;\n\n  float a = shd_sq.y + cos(sourceRadians.y) * cos(targetRadians.y) * shd_sq.x;\n  return 2.0 * asin(sqrt(a));\n}\n\nvec3 interpolateGreatCircle(vec3 source, vec3 target, vec3 source3D, vec3 target3D, float angularDist, float t) {\n  vec2 lngLat;\n\n  // if the angularDist is PI, linear interpolation is applied. otherwise, use spherical interpolation\n  if(abs(angularDist - PI) < 0.001) {\n    lngLat = (1.0 - t) * source.xy + t * target.xy;\n  } else {\n    float a = sin((1.0 - t) * angularDist);\n    float b = sin(t * angularDist);\n    vec3 p = source3D.yxz * a + target3D.yxz * b;\n    lngLat = degrees(vec2(atan(p.y, -p.x), atan(p.z, length(p.xy))));\n  }\n\n  float z = paraboloid(angularDist * EARTH_RADIUS, source.z, target.z, t);\n\n  return vec3(lngLat, z);\n}\n\n/* END GREAT CIRCLE */\n\nvoid main(void) {\n  geometry.worldPosition = instanceSourcePositions;\n  geometry.worldPositionAlt = instanceTargetPositions;\n\n  float segmentIndex = positions.x;\n  float segmentRatio = getSegmentRatio(segmentIndex);\n  float prevSegmentRatio = getSegmentRatio(max(0.0, segmentIndex - 1.0));\n  float nextSegmentRatio = getSegmentRatio(min(numSegments - 1.0, segmentIndex + 1.0));\n\n  // if it's the first point, use next - current as direction\n  // otherwise use current - prev\n  float indexDir = mix(-1.0, 1.0, step(segmentIndex, 0.0));\n  isValid = 1.0;\n\n  uv = vec2(segmentRatio, positions.y);\n  geometry.uv = uv;\n  geometry.pickingColor = instancePickingColors;\n\n  vec4 curr;\n  vec4 next;\n  vec3 source;\n  vec3 target;\n\n  if ((greatCircle || project_uProjectionMode == PROJECTION_MODE_GLOBE) && project_uCoordinateSystem == COORDINATE_SYSTEM_LNGLAT) {\n    source = project_globe_(vec3(instanceSourcePositions.xy, 0.0));\n    target = project_globe_(vec3(instanceTargetPositions.xy, 0.0));\n    float angularDist = getAngularDist(instanceSourcePositions.xy, instanceTargetPositions.xy);\n\n    vec3 prevPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, prevSegmentRatio);\n    vec3 currPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, segmentRatio);\n    vec3 nextPos = interpolateGreatCircle(instanceSourcePositions, instanceTargetPositions, source, target, angularDist, nextSegmentRatio);\n\n    if (abs(currPos.x - prevPos.x) > 180.0) {\n      indexDir = -1.0;\n      isValid = 0.0;\n    } else if (abs(currPos.x - nextPos.x) > 180.0) {\n      indexDir = 1.0;\n      isValid = 0.0;\n    }\n    nextPos = indexDir < 0.0 ? prevPos : nextPos;\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n\n    if (isValid == 0.0) {\n      // split at the 180th meridian\n      nextPos.x += nextPos.x > 0.0 ? -360.0 : 360.0;\n      float t = ((currPos.x > 0.0 ? 180.0 : -180.0) - currPos.x) / (nextPos.x - currPos.x);\n      currPos = mix(currPos, nextPos, t);\n      segmentRatio = mix(segmentRatio, nextSegmentRatio, t);\n    }\n\n    vec3 currPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, segmentRatio);\n    vec3 nextPos64Low = mix(instanceSourcePositions64Low, instanceTargetPositions64Low, nextSegmentRatio);\n  \n    curr = project_position_to_clipspace(currPos, currPos64Low, vec3(0.0), geometry.position);\n    next = project_position_to_clipspace(nextPos, nextPos64Low, vec3(0.0));\n  \n  } else {\n    vec3 source_world = instanceSourcePositions;\n    vec3 target_world = instanceTargetPositions;\n    if (useShortestPath) {\n      source_world.x = mod(source_world.x + 180., 360.0) - 180.;\n      target_world.x = mod(target_world.x + 180., 360.0) - 180.;\n\n      float deltaLng = target_world.x - source_world.x;\n      if (deltaLng > 180.) target_world.x -= 360.;\n      if (deltaLng < -180.) source_world.x -= 360.;\n    }\n    source = project_position(source_world, instanceSourcePositions64Low);\n    target = project_position(target_world, instanceTargetPositions64Low);\n\n    // common x at longitude=-180\n    float antiMeridianX = 0.0;\n\n    if (useShortestPath) {\n      if (project_uProjectionMode == PROJECTION_MODE_WEB_MERCATOR_AUTO_OFFSET) {\n        antiMeridianX = -(project_uCoordinateOrigin.x + 180.) / 360. * TILE_SIZE;\n      }\n      float thresholdRatio = (antiMeridianX - source.x) / (target.x - source.x);\n\n      if (prevSegmentRatio <= thresholdRatio && nextSegmentRatio > thresholdRatio) {\n        isValid = 0.0;\n        indexDir = sign(segmentRatio - thresholdRatio);\n        segmentRatio = thresholdRatio;\n      }\n    }\n\n    nextSegmentRatio = indexDir < 0.0 ? prevSegmentRatio : nextSegmentRatio;\n    vec3 currPos = interpolateFlat(source, target, segmentRatio);\n    vec3 nextPos = interpolateFlat(source, target, nextSegmentRatio);\n\n    if (useShortestPath) {\n      if (nextPos.x < antiMeridianX) {\n        currPos.x += TILE_SIZE;\n        nextPos.x += TILE_SIZE;\n      }\n    }\n\n    curr = project_common_position_to_clipspace(vec4(currPos, 1.0));\n    next = project_common_position_to_clipspace(vec4(nextPos, 1.0));\n    geometry.position = vec4(currPos, 1.0);\n  }\n\n  // Multiply out width and clamp to limits\n  // mercator pixels are interpreted as screen pixels\n  float widthPixels = clamp(\n    project_size_to_pixel(instanceWidths * widthScale, widthUnits),\n    widthMinPixels, widthMaxPixels\n  );\n\n  // extrude\n  vec3 offset = vec3(\n    getExtrusionOffset((next.xy - curr.xy) * indexDir, positions.y, widthPixels),\n    0.0);\n  DECKGL_FILTER_SIZE(offset, geometry);\n  DECKGL_FILTER_GL_POSITION(curr, geometry);\n  gl_Position = curr + vec4(project_pixel_size_to_clipspace(offset.xy), 0.0, 0.0);\n\n  vec4 color = mix(instanceSourceColors, instanceTargetColors, segmentRatio);\n  vColor = vec4(color.rgb, color.a * opacity);\n  DECKGL_FILTER_COLOR(vColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Layer,\n  project32,\n  picking,\n  UNIT,\n  UpdateParameters,\n  LayerProps,\n  LayerDataSource,\n  Unit,\n  AccessorFunction,\n  Position,\n  Accessor,\n  Color,\n  DefaultProps\n} from '@deck.gl/core';\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './arc-layer-vertex.glsl';\nimport fs from './arc-layer-fragment.glsl';\n\nconst DEFAULT_COLOR: [number, number, number, number] = [0, 0, 0, 255];\n\nconst defaultProps: DefaultProps<ArcLayerProps> = {\n  getSourcePosition: {type: 'accessor', value: x => x.sourcePosition},\n  getTargetPosition: {type: 'accessor', value: x => x.targetPosition},\n  getSourceColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getTargetColor: {type: 'accessor', value: DEFAULT_COLOR},\n  getWidth: {type: 'accessor', value: 1},\n  getHeight: {type: 'accessor', value: 1},\n  getTilt: {type: 'accessor', value: 0},\n\n  greatCircle: false,\n\n  widthUnits: 'pixels',\n  widthScale: {type: 'number', value: 1, min: 0},\n  widthMinPixels: {type: 'number', value: 0, min: 0},\n  widthMaxPixels: {type: 'number', value: Number.MAX_SAFE_INTEGER, min: 0}\n};\n\n/** All properties supported by ArcLayer. */\nexport type ArcLayerProps<DataT = any> = _ArcLayerProps<DataT> & LayerProps;\n\n/** Properties added by ArcLayer. */\ntype _ArcLayerProps<DataT> = {\n  data: LayerDataSource<DataT>;\n  /**\n   * If `true`, create the arc along the shortest path on the earth surface.\n   * @default false\n   */\n  greatCircle?: boolean;\n\n  /**\n   * The units of the line width, one of `'meters'`, `'common'`, and `'pixels'`\n   * @default 'pixels'\n   */\n  widthUnits?: Unit;\n\n  /**\n   * The scaling multiplier for the width of each line.\n   * @default 1\n   */\n  widthScale?: number;\n\n  /**\n   * The minimum line width in pixels.\n   * @default 0\n   */\n  widthMinPixels?: number;\n\n  /**\n   * The maximum line width in pixels.\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  widthMaxPixels?: number;\n\n  /**\n   * Method called to retrieve the source position of each object.\n   * @default object => object.sourcePosition\n   */\n  getSourcePosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * Method called to retrieve the target position of each object.\n   * @default object => object.targetPosition\n   */\n  getTargetPosition?: AccessorFunction<DataT, Position>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getSourceColor?: Accessor<DataT, Color>;\n\n  /**\n   * The rgba color is in the format of `[r, g, b, [a]]`.\n   * @default [0, 0, 0, 255]\n   */\n  getTargetColor?: Accessor<DataT, Color>;\n\n  /**\n   * The line width of each object, in units specified by `widthUnits`.\n   * @default 1\n   */\n  getWidth?: Accessor<DataT, number>;\n\n  /**\n   * Multiplier of layer height. `0` will make the layer flat.\n   * @default 1\n   */\n  getHeight?: Accessor<DataT, number>;\n\n  /**\n   * Use to tilt the arc to the side if you have multiple arcs with the same source and target positions.\n   * @default 0\n   */\n  getTilt?: Accessor<DataT, number>;\n};\n\n/** Render raised arcs joining pairs of source and target coordinates. */\nexport default class ArcLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ArcLayerProps<DataT>>\n> {\n  static layerName = 'ArcLayer';\n  static defaultProps = defaultProps;\n\n  state!: Layer['state'] & {\n    model?: Model;\n  };\n\n  getBounds(): [number[], number[]] | null {\n    return this.getAttributeManager()?.getBounds([\n      'instanceSourcePositions',\n      'instanceTargetPositions'\n    ]);\n  }\n\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]}); // 'project' module added by default.\n  }\n\n  // This layer has its own wrapLongitude logic\n  get wrapLongitude() {\n    return false;\n  }\n\n  initializeState() {\n    const attributeManager = this.getAttributeManager()!;\n\n    /* eslint-disable max-len */\n    attributeManager.addInstanced({\n      instanceSourcePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getSourcePosition'\n      },\n      instanceTargetPositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getTargetPosition'\n      },\n      instanceSourceColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getSourceColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceTargetColors: {\n        size: this.props.colorFormat.length,\n        type: GL.UNSIGNED_BYTE,\n        normalized: true,\n        transition: true,\n        accessor: 'getTargetColor',\n        defaultValue: DEFAULT_COLOR\n      },\n      instanceWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getWidth',\n        defaultValue: 1\n      },\n      instanceHeights: {\n        size: 1,\n        transition: true,\n        accessor: 'getHeight',\n        defaultValue: 1\n      },\n      instanceTilts: {\n        size: 1,\n        transition: true,\n        accessor: 'getTilt',\n        defaultValue: 0\n      }\n    });\n    /* eslint-enable max-len */\n  }\n\n  updateState(opts: UpdateParameters<this>): void {\n    super.updateState(opts);\n    // Re-generate model if geometry changed\n    if (opts.changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager()!.invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {widthUnits, widthScale, widthMinPixels, widthMaxPixels, greatCircle, wrapLongitude} =\n      this.props;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        greatCircle,\n        widthUnits: UNIT[widthUnits],\n        widthScale,\n        widthMinPixels,\n        widthMaxPixels,\n        useShortestPath: wrapLongitude\n      })\n      .draw();\n  }\n\n  protected _getModel(gl: WebGLRenderingContext): Model {\n    let positions: number[] = [];\n    const NUM_SEGMENTS = 50;\n    /*\n     *  (0, -1)-------------_(1, -1)\n     *       |          _,-\"  |\n     *       o      _,-\"      o\n     *       |  _,-\"          |\n     *   (0, 1)\"-------------(1, 1)\n     */\n    for (let i = 0; i < NUM_SEGMENTS; i++) {\n      positions = positions.concat([i, 1, 0, i, -1, 0]);\n    }\n\n    const model = new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_STRIP,\n        attributes: {\n          positions: new Float32Array(positions)\n        }\n      }),\n      isInstanced: true\n    });\n\n    model.setUniforms({numSegments: NUM_SEGMENTS});\n\n    return model;\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME arc-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying vec2 uv;\nvarying float isValid;\n\nvoid main(void) {\n  if (isValid == 0.0) {\n    discard;\n  }\n\n  gl_FragColor = vColor;\n  geometry.uv = uv;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ArcLayer } from 'deck.gl/typed';\nimport {\n  HandlerFunction,\n  JsonObject,\n  QueryFormData,\n  t,\n} from '@superset-ui/core';\nimport { commonLayerProps } from '../common';\nimport { createCategoricalDeckGLComponent } from '../../factory';\nimport TooltipRow from '../../TooltipRow';\nimport { TooltipProps } from '../../components/Tooltip';\nimport { Point } from '../../types';\n\nfunction getPoints(data: JsonObject[]) {\n  const points: Point[] = [];\n  data.forEach(d => {\n    points.push(d.sourcePosition);\n    points.push(d.targetPosition);\n  });\n\n  return points;\n}\n\nfunction setTooltipContent(formData: QueryFormData) {\n  return (o: JsonObject) => (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        label={t('Start (Longitude, Latitude): ')}\n        value={`${o.object?.sourcePosition?.[0]}, ${o.object?.sourcePosition?.[1]}`}\n      />\n      <TooltipRow\n        label={t('End (Longitude, Latitude): ')}\n        value={`${o.object?.targetPosition?.[0]}, ${o.object?.targetPosition?.[1]}`}\n      />\n      {formData.dimension && (\n        <TooltipRow\n          label={`${formData?.dimension}: `}\n          value={`${o.object?.cat_color}`}\n        />\n      )}\n    </div>\n  );\n}\n\nexport function getLayer(\n  fd: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: HandlerFunction,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const data = payload.data.features;\n  const sc = fd.color_picker;\n  const tc = fd.target_color_picker;\n\n  return new ArcLayer({\n    data,\n    getSourceColor: d =>\n      d.sourceColor || d.color || [sc.r, sc.g, sc.b, 255 * sc.a],\n    getTargetColor: d =>\n      d.targetColor || d.color || [tc.r, tc.g, tc.b, 255 * tc.a],\n    id: `path-layer-${fd.slice_id}` as const,\n    strokeWidth: fd.stroke_width ? fd.stroke_width : 3,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent(fd)),\n  });\n}\n\nexport default createCategoricalDeckGLComponent(getLayer, getPoints);\n"],"names":["DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","Uint8Array","pickingActive","pickingAttribute","inject","order","injection","name","vs","fs","getUniforms","opts","arguments","length","undefined","uniforms","selectedColor","slice","picking_uSelectedColorValid","picking_uSelectedColor","color","Array","from","x","Number","isFinite","picking_uHighlightColor","picking_uActive","Boolean","picking_uAttribute","DEFAULT_COLOR","defaultProps","getSourcePosition","type","value","sourcePosition","getTargetPosition","targetPosition","getSourceColor","getTargetColor","getWidth","getHeight","getTilt","greatCircle","widthUnits","widthScale","min","widthMinPixels","widthMaxPixels","MAX_SAFE_INTEGER","ArcLayer","Layer","constructor","args","_defineProperty","getBounds","_this$getAttributeMan","this","getAttributeManager","getShaders","super","modules","project32","picking","wrapLongitude","initializeState","addInstanced","instanceSourcePositions","size","fp64","use64bitPositions","transition","accessor","instanceTargetPositions","instanceSourceColors","props","colorFormat","normalized","defaultValue","instanceTargetColors","instanceWidths","instanceHeights","instanceTilts","updateState","changeFlags","extensionsChanged","_this$state$model","gl","context","state","model","delete","_getModel","invalidateAll","draw","setUniforms","UNIT","useShortestPath","positions","i","concat","Model","id","geometry","Geometry","drawMode","attributes","Float32Array","isInstanced","numSegments","getLayer","fd","payload","onAddFilter","setTooltip","data","features","sc","color_picker","tc","target_color_picker","d","sourceColor","r","g","b","a","targetColor","slice_id","strokeWidth","stroke_width","commonLayerProps","formData","o","_o$object","_o$object$sourcePosit","_o$object2","_o$object2$sourcePosi","_o$object3","_o$object3$targetPosi","_o$object4","_o$object4$targetPosi","_o$object5","_jsxs","className","children","_jsx","TooltipRow","label","t","object","dimension","cat_color","createCategoricalDeckGLComponent","points","forEach","push"],"sourceRoot":""}
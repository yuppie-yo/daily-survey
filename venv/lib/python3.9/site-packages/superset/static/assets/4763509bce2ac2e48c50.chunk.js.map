{"version":3,"file":"4763509bce2ac2e48c50.chunk.js","mappings":"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","sources":["webpack://superset/../../../src/utils/color-utils.ts","webpack://superset/./node_modules/@luma.gl/shadertools/dist/esm/modules/picking/picking.js","webpack://superset/../../../../src/shaderlib/picking/picking.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/components/Tooltip.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/DeckGLContainer.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/TooltipRow.tsx","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer-vertex.glsl.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-cell-layer.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer-fragment.glsl.ts","webpack://superset/../../../src/screen-grid-layer/screen-grid-layer.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/Screengrid/Screengrid.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/layers/common.tsx","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/colors.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/computeBoundsFromPoints.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/fitViewport.ts","webpack://superset/./plugins/legacy-preset-chart-deckgl/src/utils/sandbox.ts"],"sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport const defaultColorRange: [number, number, number][] = [\n  [255, 255, 178],\n  [254, 217, 118],\n  [254, 178, 76],\n  [253, 141, 60],\n  [240, 59, 32],\n  [189, 0, 38]\n];\n\n// Converts a colorRange array to a flat array with 4 components per color\nexport function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {\n  let flatArray;\n\n  if (Number.isFinite(colorRange[0])) {\n    // its already a flat array.\n    flatArray = new ArrayType(colorRange);\n  } else {\n    // flatten it\n    flatArray = new ArrayType(colorRange.length * 4);\n    let index = 0;\n\n    for (let i = 0; i < colorRange.length; i++) {\n      const color = colorRange[i];\n      flatArray[index++] = color[0];\n      flatArray[index++] = color[1];\n      flatArray[index++] = color[2];\n      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;\n    }\n  }\n\n  if (normalize) {\n    for (let i = 0; i < flatArray.length; i++) {\n      flatArray[i] /= 255;\n    }\n  }\n  return flatArray;\n}\n","const DEFAULT_HIGHLIGHT_COLOR = new Uint8Array([0, 255, 255, 255]);\nconst DEFAULT_MODULE_OPTIONS = {\n  pickingSelectedColor: null,\n  pickingHighlightColor: DEFAULT_HIGHLIGHT_COLOR,\n  pickingActive: false,\n  pickingAttribute: false\n};\n\nfunction getUniforms() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_MODULE_OPTIONS;\n  const uniforms = {};\n\n  if (opts.pickingSelectedColor !== undefined) {\n    if (!opts.pickingSelectedColor) {\n      uniforms.picking_uSelectedColorValid = 0;\n    } else {\n      const selectedColor = opts.pickingSelectedColor.slice(0, 3);\n      uniforms.picking_uSelectedColorValid = 1;\n      uniforms.picking_uSelectedColor = selectedColor;\n    }\n  }\n\n  if (opts.pickingHighlightColor) {\n    const color = Array.from(opts.pickingHighlightColor, x => x / 255);\n\n    if (!Number.isFinite(color[3])) {\n      color[3] = 1;\n    }\n\n    uniforms.picking_uHighlightColor = color;\n  }\n\n  if (opts.pickingActive !== undefined) {\n    uniforms.picking_uActive = Boolean(opts.pickingActive);\n    uniforms.picking_uAttribute = Boolean(opts.pickingAttribute);\n  }\n\n  return uniforms;\n}\n\nconst vs = \"uniform bool picking_uActive;\\nuniform bool picking_uAttribute;\\nuniform vec3 picking_uSelectedColor;\\nuniform bool picking_uSelectedColorValid;\\n\\nout vec4 picking_vRGBcolor_Avalid;\\n\\nconst float COLOR_SCALE = 1. / 255.;\\n\\nbool picking_isColorValid(vec3 color) {\\n  return dot(color, vec3(1.0)) > 0.001;\\n}\\n\\nbool isVertexPicked(vec3 vertexColor) {\\n  return\\n    picking_uSelectedColorValid &&\\n    !picking_isColorValid(abs(vertexColor - picking_uSelectedColor));\\n}\\n\\nvoid picking_setPickingColor(vec3 pickingColor) {\\n  if (picking_uActive) {\\n    picking_vRGBcolor_Avalid.a = float(picking_isColorValid(pickingColor));\\n\\n    if (!picking_uAttribute) {\\n      picking_vRGBcolor_Avalid.rgb = pickingColor * COLOR_SCALE;\\n    }\\n  } else {\\n    picking_vRGBcolor_Avalid.a = float(isVertexPicked(pickingColor));\\n  }\\n}\\n\\nvoid picking_setPickingAttribute(float value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.r = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec2 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rg = value;\\n  }\\n}\\nvoid picking_setPickingAttribute(vec3 value) {\\n  if (picking_uAttribute) {\\n    picking_vRGBcolor_Avalid.rgb = value;\\n  }\\n}\\n\";\nconst fs = \"uniform bool picking_uActive;\\nuniform vec3 picking_uSelectedColor;\\nuniform vec4 picking_uHighlightColor;\\n\\nin vec4 picking_vRGBcolor_Avalid;\\nvec4 picking_filterHighlightColor(vec4 color) {\\n  if (picking_uActive) {\\n    return color;\\n  }\\n  bool selected = bool(picking_vRGBcolor_Avalid.a);\\n\\n  if (selected) {\\n    float highLightAlpha = picking_uHighlightColor.a;\\n    float blendedAlpha = highLightAlpha + color.a * (1.0 - highLightAlpha);\\n    float highLightRatio = highLightAlpha / blendedAlpha;\\n\\n    vec3 blendedRGB = mix(color.rgb, picking_uHighlightColor.rgb, highLightRatio);\\n    return vec4(blendedRGB, blendedAlpha);\\n  } else {\\n    return color;\\n  }\\n}\\nvec4 picking_filterPickingColor(vec4 color) {\\n  if (picking_uActive) {\\n    if (picking_vRGBcolor_Avalid.a == 0.0) {\\n      discard;\\n    }\\n    return picking_vRGBcolor_Avalid;\\n  }\\n  return color;\\n}\\nvec4 picking_filterColor(vec4 color) {\\n  vec4 highightColor = picking_filterHighlightColor(color);\\n  return picking_filterPickingColor(highightColor);\\n}\\n\\n\";\nexport const picking = {\n  name: 'picking',\n  vs,\n  fs,\n  getUniforms\n};\n//# sourceMappingURL=picking.js.map","import {picking} from '@luma.gl/core';\nimport type {ShaderModule} from '../../types/types';\n\ntype PickingModuleSettings = {\n  /** Set to a picking color to visually highlight that item */\n  pickingSelectedColor?: [number, number, number] | null;\n  /** Color of the highlight */\n  pickingHighlightColor?: [number, number, number, number];\n  /** Set to true when rendering to off-screen \"picking\" buffer */\n  pickingActive?: boolean;\n  /** Set to true when picking an attribute value instead of object index */\n  pickingAttribute?: boolean;\n};\n\nexport default {\n  inject: {\n    'vs:DECKGL_FILTER_GL_POSITION': `\n    // for picking depth values\n    picking_setPickingAttribute(position.z / position.w);\n  `,\n    'vs:DECKGL_FILTER_COLOR': `\n  picking_setPickingColor(geometry.pickingColor);\n  `,\n    // TODO - this should be declared in the luma module\n    'fs:#decl': `\nuniform bool picking_uAttribute;\n  `,\n    'fs:DECKGL_FILTER_COLOR': {\n      order: 99,\n      injection: `\n  // use highlight color if this fragment belongs to the selected object.\n  color = picking_filterHighlightColor(color);\n\n  // use picking color if rendering to picking FBO.\n  color = picking_filterPickingColor(color);\n    `\n    }\n  },\n  ...picking\n} as ShaderModule<PickingModuleSettings>;\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { styled, safeHtmlSpan } from '@superset-ui/core';\nimport { ReactNode } from 'react';\n\nexport type TooltipProps = {\n  tooltip:\n    | {\n        x: number;\n        y: number;\n        content: ReactNode;\n      }\n    | null\n    | undefined;\n};\n\nconst StyledDiv = styled.div<{ top: number; left: number }>`\n  ${({ theme, top, left }) => `\n    position: absolute;\n    top: ${top}px;\n    left: ${left}px;\n    padding: ${theme.gridUnit * 2}px;\n    margin: ${theme.gridUnit * 2}px;\n    background: ${theme.colors.grayscale.dark2};\n    color: ${theme.colors.grayscale.light5};\n    maxWidth: 300px;\n    fontSize: ${theme.typography.sizes.s}px;\n    zIndex: 9;\n    pointerEvents: none;\n  `}\n`;\n\nexport default function Tooltip(props: TooltipProps) {\n  const { tooltip } = props;\n  if (typeof tooltip === 'undefined' || tooltip === null) {\n    return null;\n  }\n\n  const { x, y, content } = tooltip;\n  const safeContent =\n    typeof content === 'string' ? safeHtmlSpan(content) : content;\n\n  return (\n    <StyledDiv top={y} left={x}>\n      {safeContent}\n    </StyledDiv>\n  );\n}\n","/* eslint-disable react/jsx-sort-default-props */\n/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/* eslint-disable react/forbid-prop-types */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  forwardRef,\n  memo,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { isEqual } from 'lodash';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL, { Layer } from 'deck.gl/typed';\nimport { JsonObject, JsonValue, styled, usePrevious } from '@superset-ui/core';\nimport Tooltip, { TooltipProps } from './components/Tooltip';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport { Viewport } from './utils/fitViewport';\n\nconst TICK = 250; // milliseconds\n\nexport type DeckGLContainerProps = {\n  viewport: Viewport;\n  setControlValue?: (control: string, value: JsonValue) => void;\n  mapStyle?: string;\n  mapboxApiAccessToken: string;\n  children?: ReactNode;\n  width: number;\n  height: number;\n  layers: (Layer | (() => Layer))[];\n  onViewportChange?: (viewport: Viewport) => void;\n};\n\nexport const DeckGLContainer = memo(\n  forwardRef((props: DeckGLContainerProps, ref) => {\n    const [tooltip, setTooltip] = useState<TooltipProps['tooltip']>(null);\n    const [lastUpdate, setLastUpdate] = useState<number | null>(null);\n    const [viewState, setViewState] = useState(props.viewport);\n    const prevViewport = usePrevious(props.viewport);\n\n    useImperativeHandle(ref, () => ({ setTooltip }), []);\n\n    const tick = useCallback(() => {\n      // Rate limiting updating viewport controls as it triggers lots of renders\n      if (lastUpdate && Date.now() - lastUpdate > TICK) {\n        const setCV = props.setControlValue;\n        if (setCV) {\n          setCV('viewport', viewState);\n        }\n        setLastUpdate(null);\n      }\n    }, [lastUpdate, props.setControlValue, viewState]);\n\n    useEffect(() => {\n      const timer = setInterval(tick, TICK);\n      return clearInterval(timer);\n    }, [tick]);\n\n    useEffect(() => {\n      if (!isEqual(props.viewport, prevViewport)) {\n        setViewState(props.viewport);\n      }\n    }, [prevViewport, props.viewport]);\n\n    const onViewStateChange = useCallback(\n      ({ viewState }: { viewState: JsonObject }) => {\n        setViewState(viewState as Viewport);\n        setLastUpdate(Date.now());\n      },\n      [],\n    );\n\n    const layers = useCallback(() => {\n      // Support for layer factory\n      if (props.layers.some(l => typeof l === 'function')) {\n        return props.layers.map(l =>\n          typeof l === 'function' ? l() : l,\n        ) as Layer[];\n      }\n\n      return props.layers as Layer[];\n    }, [props.layers]);\n\n    const { children = null, height, width } = props;\n\n    return (\n      <>\n        <div style={{ position: 'relative', width, height }}>\n          <DeckGL\n            controller\n            width={width}\n            height={height}\n            layers={layers()}\n            viewState={viewState}\n            glOptions={{ preserveDrawingBuffer: true }}\n            onViewStateChange={onViewStateChange}\n          >\n            <StaticMap\n              preserveDrawingBuffer\n              mapStyle={props.mapStyle || 'light'}\n              mapboxApiAccessToken={props.mapboxApiAccessToken}\n            />\n          </DeckGL>\n          {children}\n        </div>\n        <Tooltip tooltip={tooltip} />\n      </>\n    );\n  }),\n);\n\nexport const DeckGLContainerStyledWrapper = styled(DeckGLContainer)`\n  .deckgl-tooltip > div {\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n\nexport type DeckGLContainerHandle = typeof DeckGLContainer & {\n  setTooltip: (tooltip: ReactNode) => void;\n};\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\ntype TooltipRowProps = {\n  label: string;\n  value: string;\n};\n\nconst TooltipRow = ({ label, value }: TooltipRowProps) => (\n  <div>\n    {label}\n    <strong>{value}</strong>\n  </div>\n);\n\nexport default TooltipRow;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nexport default `\\\n#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\n\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n\n  // Set color to be rendered to picking fbo (also used to check for selection highlight).\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n`;\n","// Copyright (c) 2015 - 2019 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry, FEATURES, hasFeatures, Texture2D, DefaultProps} from '@luma.gl/core';\nimport {Layer, LayerProps, log, picking, UpdateParameters} from '@deck.gl/core';\nimport {defaultColorRange, colorRangeToFlatArray} from '../utils/color-utils';\nimport vs from './screen-grid-layer-vertex.glsl';\nimport fs from './screen-grid-layer-fragment.glsl';\nimport type {_ScreenGridLayerProps} from './screen-grid-layer';\n\nconst DEFAULT_MINCOLOR = [0, 0, 0, 0];\nconst DEFAULT_MAXCOLOR = [0, 255, 0, 255];\nconst COLOR_PROPS = ['minColor', 'maxColor', 'colorRange', 'colorDomain'];\n\nconst defaultProps: DefaultProps<ScreenGridCellLayerProps> = {\n  cellSizePixels: {value: 100, min: 1},\n  cellMarginPixels: {value: 2, min: 0, max: 5},\n\n  colorDomain: null,\n  colorRange: defaultColorRange\n};\n\n/** All properties supported by ScreenGridCellLayer. */\nexport type ScreenGridCellLayerProps<DataT = any> = _ScreenGridCellLayerProps<DataT> & LayerProps;\n\n/** Proprties added by ScreenGridCellLayer. */\nexport type _ScreenGridCellLayerProps<DataT> = _ScreenGridLayerProps<DataT> & {\n  maxTexture: Texture2D;\n};\n\nexport default class ScreenGridCellLayer<DataT = any, ExtraPropsT extends {} = {}> extends Layer<\n  ExtraPropsT & Required<_ScreenGridCellLayerProps<DataT>>\n> {\n  static layerName = 'ScreenGridCellLayer';\n  static defaultProps = defaultProps;\n\n  static isSupported(gl) {\n    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);\n  }\n\n  state!: Layer['state'] & {\n    model: Model;\n  };\n  getShaders() {\n    return {vs, fs, modules: [picking]};\n  }\n\n  initializeState() {\n    const {gl} = this.context;\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.addInstanced({\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      instancePositions: {size: 3, update: this.calculateInstancePositions},\n      instanceCounts: {size: 4, noAlloc: true}\n    });\n    this.setState({\n      model: this._getModel(gl)\n    });\n  }\n\n  shouldUpdateState({changeFlags}) {\n    // 'instanceCounts' buffer contetns change on viewport change.\n    return changeFlags.somethingChanged;\n  }\n\n  updateState(params: UpdateParameters<this>) {\n    super.updateState(params);\n\n    const {oldProps, props, changeFlags} = params;\n\n    const attributeManager = this.getAttributeManager()!;\n    if (props.numInstances !== oldProps.numInstances) {\n      attributeManager.invalidateAll();\n    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {\n      attributeManager.invalidate('instancePositions');\n    }\n\n    this._updateUniforms(oldProps, props, changeFlags);\n  }\n\n  draw({uniforms}) {\n    const {parameters, maxTexture} = this.props;\n    const minColor = this.props.minColor || DEFAULT_MINCOLOR;\n    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;\n\n    // If colorDomain not specified we use default domain [1, maxCount]\n    // maxCount value will be sampled form maxTexture in vertex shader.\n    const colorDomain = this.props.colorDomain || [1, 0];\n    const {model} = this.state;\n    model\n      .setUniforms(uniforms)\n      .setUniforms({\n        minColor,\n        maxColor,\n        maxTexture,\n        colorDomain\n      })\n      .draw({\n        parameters: {\n          depthTest: false,\n          depthMask: false,\n          ...parameters\n        }\n      });\n  }\n\n  calculateInstancePositions(attribute, {numInstances}) {\n    const {width, height} = this.context.viewport;\n    const {cellSizePixels} = this.props;\n    const numCol = Math.ceil(width / cellSizePixels);\n\n    const {value, size} = attribute;\n\n    for (let i = 0; i < numInstances; i++) {\n      const x = i % numCol;\n      const y = Math.floor(i / numCol);\n      value[i * size + 0] = ((x * cellSizePixels) / width) * 2 - 1;\n      value[i * size + 1] = 1 - ((y * cellSizePixels) / height) * 2;\n      value[i * size + 2] = 0;\n    }\n  }\n\n  // Private Methods\n\n  _getModel(gl: WebGLRenderingContext): Model {\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        attributes: {\n          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])\n        }\n      }),\n      isInstanced: true\n    });\n  }\n\n  _shouldUseMinMax(): boolean {\n    const {minColor, maxColor, colorDomain, colorRange} = this.props;\n    if (minColor || maxColor) {\n      log.deprecated('ScreenGridLayer props: minColor and maxColor', 'colorRange, colorDomain')();\n      return true;\n    }\n    // minColor and maxColor not supplied, check if colorRange or colorDomain supplied.\n    // NOTE: colorDomain and colorRange are experimental features, use them only when supplied.\n    if (colorDomain || colorRange) {\n      return false;\n    }\n    // None specified, use default minColor and maxColor\n    return true;\n  }\n\n  _updateUniforms(oldProps, props, changeFlags): void {\n    const {model} = this.state;\n    if (COLOR_PROPS.some(key => oldProps[key] !== props[key])) {\n      model.setUniforms({shouldUseMinMax: this._shouldUseMinMax()});\n    }\n\n    if (oldProps.colorRange !== props.colorRange) {\n      model.setUniforms({colorRange: colorRangeToFlatArray(props.colorRange)});\n    }\n\n    if (\n      oldProps.cellMarginPixels !== props.cellMarginPixels ||\n      oldProps.cellSizePixels !== props.cellSizePixels ||\n      changeFlags.viewportChanged\n    ) {\n      const {width, height} = this.context.viewport;\n      const {cellSizePixels, cellMarginPixels} = this.props;\n      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;\n\n      const cellScale = new Float32Array([\n        ((cellSizePixels - margin) / width) * 2,\n        (-(cellSizePixels - margin) / height) * 2,\n        1\n      ]);\n      model.setUniforms({cellScale});\n    }\n  }\n}\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/* fragment shader for the grid-layer */\nexport default `\\\n#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n`;\n","// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {\n  Accessor,\n  Color,\n  GetPickingInfoParams,\n  Layer,\n  LayerContext,\n  LayersList,\n  log,\n  PickingInfo,\n  Position,\n  UpdateParameters,\n  DefaultProps\n} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport type {Texture2D} from '@luma.gl/core';\nimport GPUGridAggregator from '../utils/gpu-grid-aggregation/gpu-grid-aggregator';\nimport {AGGREGATION_OPERATION, getValueFunc} from '../utils/aggregation-operation-utils';\nimport ScreenGridCellLayer from './screen-grid-cell-layer';\nimport GridAggregationLayer, {GridAggregationLayerProps} from '../grid-aggregation-layer';\nimport {getFloatTexture} from '../utils/resource-utils.js';\n\nconst defaultProps: DefaultProps<ScreenGridLayerProps> = {\n  ...ScreenGridCellLayer.defaultProps,\n  getPosition: {type: 'accessor', value: d => d.position},\n  getWeight: {type: 'accessor', value: 1},\n\n  gpuAggregation: true,\n  aggregation: 'SUM'\n};\n\nconst POSITION_ATTRIBUTE_NAME = 'positions';\nconst DIMENSIONS = {\n  data: {\n    props: ['cellSizePixels']\n  },\n  weights: {\n    props: ['aggregation'],\n    accessors: ['getWeight']\n  }\n};\n\n/** All properties supported by ScreenGridLayer. */\nexport type ScreenGridLayerProps<DataT = any> = _ScreenGridLayerProps<DataT> &\n  GridAggregationLayerProps<DataT>;\n\n/** Properties added by ScreenGridLayer. */\nexport type _ScreenGridLayerProps<DataT> = {\n  /**\n   * Unit width/height of the bins.\n   * @default 100\n   */\n  cellSizePixels?: number;\n\n  /**\n   * Cell margin size in pixels.\n   * @default 2\n   */\n  cellMarginPixels?: number;\n\n  /**\n   * Expressed as an rgba array, minimal color that could be rendered by a tile.\n   * @default [0, 0, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  minColor?: Color | null;\n\n  /**\n   * Expressed as an rgba array, maximal color that could be rendered by a tile.\n   * @default [0, 255, 0, 255]\n   * @deprecated Deprecated in version 5.2.0, use `colorRange` and `colorDomain` instead.\n   */\n  maxColor?: Color | null;\n\n  /**\n   * Color scale input domain. The color scale maps continues numeric domain into discrete color range.\n   * @default [1, max(weight)]\n   */\n  colorDomain?: [number, number] | null;\n\n  /**\n   * Specified as an array of colors [color1, color2, ...].\n   *\n   * @default `6-class YlOrRd` - [colorbrewer](http://colorbrewer2.org/#type=sequential&scheme=YlOrRd&n=6)\n   */\n  colorRange?: Color[];\n\n  /**\n   * Method called to retrieve the position of each object.\n   *\n   * @default d => d.position\n   */\n  getPosition?: Accessor<DataT, Position>;\n\n  /**\n   * The weight of each object.\n   *\n   * @default 1\n   */\n  getWeight?: Accessor<DataT, number>;\n\n  /**\n   * Perform aggregation is performed on GPU.\n   *\n   * NOTE: GPU Aggregation requires WebGL2 support by the browser.\n   * When `gpuAggregation` is set to true and browser doesn't support WebGL2, aggregation falls back to CPU.\n   *\n   * @default true\n   */\n  gpuAggregation?: boolean;\n\n  /**\n   * Defines the type of aggregation operation\n   *\n   * V valid values are 'SUM', 'MEAN', 'MIN' and 'MAX'.\n   *\n   * @default 'SUM'\n   */\n  aggregation?: 'SUM' | 'MEAN' | 'MIN' | 'MAX';\n};\n\n/** Aggregates data into histogram bins and renders them as a grid. */\nexport default class ScreenGridLayer<\n  DataT = any,\n  ExtraProps extends {} = {}\n> extends GridAggregationLayer<DataT, ExtraProps & Required<_ScreenGridLayerProps<DataT>>> {\n  static layerName = 'ScreenGridLayer';\n  static defaultProps = defaultProps;\n\n  state!: GridAggregationLayer<DataT>['state'] & {\n    supported: boolean;\n    gpuGridAggregator?: any;\n    gpuAggregation?: any;\n    weights?: any;\n    maxTexture?: Texture2D;\n  };\n\n  initializeState() {\n    const {gl} = this.context;\n    if (!ScreenGridCellLayer.isSupported(gl)) {\n      // max aggregated value is sampled from a float texture\n      this.setState({supported: false});\n      log.error(`ScreenGridLayer: ${this.id} is not supported on this browser`)();\n      return;\n    }\n    super.initializeAggregationLayer({\n      dimensions: DIMENSIONS,\n      // @ts-expect-error\n      getCellSize: props => props.cellSizePixels // TODO\n    });\n    const weights = {\n      count: {\n        size: 1,\n        operation: AGGREGATION_OPERATION.SUM,\n        needMax: true,\n        maxTexture: getFloatTexture(gl, {id: `${this.id}-max-texture`})\n      }\n    };\n    this.setState({\n      supported: true,\n      projectPoints: true, // aggregation in screen space\n      weights,\n      subLayerData: {attributes: {}},\n      maxTexture: weights.count.maxTexture,\n      positionAttributeName: 'positions',\n      posOffset: [0, 0],\n      translation: [1, -1]\n    });\n    const attributeManager = this.getAttributeManager()!;\n    attributeManager.add({\n      [POSITION_ATTRIBUTE_NAME]: {\n        size: 3,\n        accessor: 'getPosition',\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions()\n      },\n      // this attribute is used in gpu aggregation path only\n      count: {size: 3, accessor: 'getWeight'}\n    });\n  }\n\n  shouldUpdateState({changeFlags}: UpdateParameters<this>) {\n    return this.state.supported && changeFlags.somethingChanged;\n  }\n\n  updateState(opts: UpdateParameters<this>) {\n    super.updateState(opts);\n  }\n\n  renderLayers(): LayersList | Layer {\n    if (!this.state.supported) {\n      return [];\n    }\n    const {maxTexture, numRow, numCol, weights} = this.state;\n    const {updateTriggers} = this.props;\n    const {aggregationBuffer} = weights.count;\n    const CellLayerClass = this.getSubLayerClass('cells', ScreenGridCellLayer);\n\n    return new CellLayerClass(\n      this.props,\n      this.getSubLayerProps({\n        id: 'cell-layer',\n        updateTriggers\n      }),\n      {\n        data: {attributes: {instanceCounts: aggregationBuffer}},\n        maxTexture,\n        numInstances: numRow * numCol\n      }\n    );\n  }\n\n  finalizeState(context: LayerContext): void {\n    super.finalizeState(context);\n\n    const {aggregationBuffer, maxBuffer, maxTexture} = this.state;\n\n    aggregationBuffer?.delete();\n    maxBuffer?.delete();\n    maxTexture?.delete();\n  }\n\n  getPickingInfo({info}: GetPickingInfoParams): PickingInfo {\n    const {index} = info;\n    if (index >= 0) {\n      const {gpuGridAggregator, gpuAggregation, weights} = this.state;\n      // Get count aggregation results\n      const aggregationResults = gpuAggregation\n        ? gpuGridAggregator.getData('count')\n        : weights.count;\n\n      // Each instance (one cell) is aggregated into single pixel,\n      // Get current instance's aggregation details.\n      info.object = GPUGridAggregator.getAggregationData({\n        pixelIndex: index,\n        ...aggregationResults\n      });\n    }\n\n    return info;\n  }\n\n  // Aggregation Overrides\n\n  updateResults({aggregationData, maxData}) {\n    const {count} = this.state.weights;\n    count.aggregationData = aggregationData;\n    count.aggregationBuffer.setData({data: aggregationData});\n    count.maxData = maxData;\n    count.maxTexture.setImageData({data: maxData});\n  }\n\n  /* eslint-disable complexity, max-statements */\n  updateAggregationState(opts) {\n    const cellSize = opts.props.cellSizePixels;\n    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;\n    const {viewportChanged} = opts.changeFlags;\n    let gpuAggregation = opts.props.gpuAggregation;\n    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {\n      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {\n        log.warn('GPU Grid Aggregation not supported, falling back to CPU')();\n        gpuAggregation = false;\n      }\n    }\n    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;\n    this.setState({\n      gpuAggregation\n    });\n\n    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);\n\n    const {dimensions} = this.state;\n    const {data, weights} = dimensions;\n    const aggregationDataDirty =\n      positionsChanged ||\n      gpuAggregationChanged ||\n      viewportChanged ||\n      this.isAggregationDirty(opts, {\n        compareAll: gpuAggregation, // check for all (including extentions props) when using gpu aggregation\n        dimension: data\n      });\n    const aggregationWeightsDirty = this.isAggregationDirty(opts, {dimension: weights});\n\n    this.setState({\n      aggregationDataDirty,\n      aggregationWeightsDirty\n    });\n\n    const {viewport} = this.context;\n\n    if (viewportChanged || cellSizeChanged) {\n      const {width, height} = viewport;\n      const numCol = Math.ceil(width / cellSize);\n      const numRow = Math.ceil(height / cellSize);\n      this.allocateResources(numRow, numCol);\n      this.setState({\n        // transformation from clipspace to screen(pixel) space\n        scaling: [width / 2, -height / 2, 1],\n\n        gridOffset: {xOffset: cellSize, yOffset: cellSize},\n        width,\n        height,\n        numCol,\n        numRow\n      });\n    }\n\n    if (aggregationWeightsDirty) {\n      this._updateAccessors(opts);\n    }\n    if (aggregationDataDirty || aggregationWeightsDirty) {\n      this._resetResults();\n    }\n  }\n  /* eslint-enable complexity, max-statements */\n\n  // Private\n\n  _updateAccessors(opts) {\n    const {getWeight, aggregation, data} = opts.props;\n    const {count} = this.state.weights;\n    if (count) {\n      count.getWeight = getWeight;\n      count.operation = AGGREGATION_OPERATION[aggregation];\n    }\n    this.setState({getValue: getValueFunc(aggregation, getWeight, {data})});\n  }\n\n  _resetResults() {\n    const {count} = this.state.weights;\n    if (count) {\n      count.aggregationData = null;\n    }\n  }\n}\n","/* eslint-disable react/sort-prop-types */\n/* eslint-disable react/jsx-handler-names */\n/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-underscore-dangle: [\"error\", { \"allow\": [\"\", \"__timestamp\"] }] */\n\nimport { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { ScreenGridLayer } from 'deck.gl/typed';\nimport { JsonObject, JsonValue, QueryFormData, t } from '@superset-ui/core';\nimport { noop } from 'lodash';\nimport sandboxedEval from '../../utils/sandbox';\nimport { commonLayerProps } from '../common';\nimport TooltipRow from '../../TooltipRow';\n// eslint-disable-next-line import/extensions\nimport fitViewport, { Viewport } from '../../utils/fitViewport';\nimport {\n  DeckGLContainerHandle,\n  DeckGLContainerStyledWrapper,\n} from '../../DeckGLContainer';\nimport { TooltipProps } from '../../components/Tooltip';\n\nfunction getPoints(data: JsonObject[]) {\n  return data.map(d => d.position);\n}\n\nfunction setTooltipContent(o: JsonObject) {\n  return (\n    <div className=\"deckgl-tooltip\">\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Longitude and Latitude') + ': '}\n        value={`${o?.coordinate?.[0]}, ${o?.coordinate?.[1]}`}\n      />\n      <TooltipRow\n        // eslint-disable-next-line prefer-template\n        label={t('Weight') + ': '}\n        value={`${o.object?.cellWeight}`}\n      />\n    </div>\n  );\n}\n\nexport function getLayer(\n  formData: QueryFormData,\n  payload: JsonObject,\n  onAddFilter: () => void,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n) {\n  const fd = formData;\n  const c = fd.color_picker;\n  let data = payload.data.features.map((d: JsonObject) => ({\n    ...d,\n    color: [c.r, c.g, c.b, 255 * c.a],\n  }));\n\n  if (fd.js_data_mutator) {\n    // Applying user defined data mutator if defined\n    const jsFnMutator = sandboxedEval(fd.js_data_mutator);\n    data = jsFnMutator(data);\n  }\n\n  // Passing a layer creator function instead of a layer since the\n  // layer needs to be regenerated at each render\n  return new ScreenGridLayer({\n    id: `screengrid-layer-${fd.slice_id}` as const,\n    data,\n    cellSizePixels: fd.grid_size,\n    minColor: [c.r, c.g, c.b, 0],\n    maxColor: [c.r, c.g, c.b, 255 * c.a],\n    outline: false,\n    getWeight: d => d.weight || 0,\n    ...commonLayerProps(fd, setTooltip, setTooltipContent),\n  });\n}\n\nexport type DeckGLScreenGridProps = {\n  formData: QueryFormData;\n  payload: JsonObject;\n  setControlValue: (control: string, value: JsonValue) => void;\n  viewport: Viewport;\n  width: number;\n  height: number;\n  onAddFilter: () => void;\n};\n\nconst DeckGLScreenGrid = (props: DeckGLScreenGridProps) => {\n  const containerRef = useRef<DeckGLContainerHandle>();\n\n  const getAdjustedViewport = useCallback(() => {\n    const features = props.payload.data.features || [];\n\n    const { width, height, formData } = props;\n\n    if (formData.autozoom) {\n      return fitViewport(props.viewport, {\n        width,\n        height,\n        points: getPoints(features),\n      });\n    }\n    return props.viewport;\n  }, [props]);\n\n  const [stateFormData, setStateFormData] = useState(props.payload.form_data);\n  const [viewport, setViewport] = useState(getAdjustedViewport());\n\n  useEffect(() => {\n    if (props.payload.form_data !== stateFormData) {\n      setViewport(getAdjustedViewport());\n      setStateFormData(props.payload.form_data);\n    }\n  }, [getAdjustedViewport, props.payload.form_data, stateFormData]);\n\n  const setTooltip = useCallback((tooltip: TooltipProps['tooltip']) => {\n    const { current } = containerRef;\n    if (current) {\n      current.setTooltip(tooltip);\n    }\n  }, []);\n\n  const getLayers = useCallback(() => {\n    const layer = getLayer(props.formData, props.payload, noop, setTooltip);\n\n    return [layer];\n  }, [props.formData, props.payload, setTooltip]);\n\n  const { formData, payload, setControlValue } = props;\n\n  return (\n    <div>\n      <DeckGLContainerStyledWrapper\n        ref={containerRef}\n        viewport={viewport}\n        layers={getLayers()}\n        setControlValue={setControlValue}\n        mapStyle={formData.mapbox_style}\n        mapboxApiAccessToken={payload.data.mapboxApiKey}\n        width={props.width}\n        height={props.height}\n      />\n    </div>\n  );\n};\n\nexport default memo(DeckGLScreenGrid);\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ReactNode } from 'react';\nimport * as d3array from 'd3-array';\nimport { JsonObject, JsonValue, QueryFormData } from '@superset-ui/core';\nimport sandboxedEval from '../utils/sandbox';\nimport { TooltipProps } from '../components/Tooltip';\n\nexport function commonLayerProps(\n  formData: QueryFormData,\n  setTooltip: (tooltip: TooltipProps['tooltip']) => void,\n  setTooltipContent: (content: JsonObject) => ReactNode,\n  onSelect?: (value: JsonValue) => void,\n) {\n  const fd = formData;\n  let onHover;\n  let tooltipContentGenerator = setTooltipContent;\n  if (fd.js_tooltip) {\n    tooltipContentGenerator = sandboxedEval(fd.js_tooltip);\n  }\n  if (tooltipContentGenerator) {\n    onHover = (o: JsonObject) => {\n      if (o.picked) {\n        setTooltip({\n          content: tooltipContentGenerator(o),\n          x: o.x,\n          y: o.y,\n        });\n      } else {\n        setTooltip(null);\n      }\n      return true;\n    };\n  }\n  let onClick;\n  if (fd.js_onclick_href) {\n    onClick = (o: any) => {\n      const href = sandboxedEval(fd.js_onclick_href)(o);\n      window.open(href);\n      return true;\n    };\n  } else if (fd.table_filter && onSelect !== undefined) {\n    onClick = (o: any) => {\n      onSelect(o.object[fd.line_column]);\n      return true;\n    };\n  }\n\n  return {\n    onClick,\n    onHover,\n    pickable: Boolean(onHover),\n  };\n}\n\nconst percentiles = {\n  p1: 0.01,\n  p5: 0.05,\n  p95: 0.95,\n  p99: 0.99,\n};\n\n/* Get a stat function that operates on arrays, aligns with control=js_agg_function  */\nexport function getAggFunc(\n  type = 'sum',\n  accessor: ((object: any) => number | undefined) | null = null,\n) {\n  if (type === 'count') {\n    return (arr: number[]) => arr.length;\n  }\n  let d3func: (\n    iterable: Array<unknown>,\n    accessor?: (object: JsonObject) => number | undefined,\n  ) => number[] | number | undefined;\n  if (type in percentiles) {\n    d3func = (arr, acc: (object: JsonObject) => number | undefined) => {\n      let sortedArr;\n      if (accessor) {\n        sortedArr = arr.sort((o1: JsonObject, o2: JsonObject) =>\n          d3array.ascending(accessor(o1), accessor(o2)),\n        );\n      } else {\n        sortedArr = arr.sort(d3array.ascending);\n      }\n\n      return d3array.quantile(sortedArr, percentiles[type], acc);\n    };\n  } else {\n    d3func = d3array[type];\n  }\n  if (!accessor) {\n    return (arr: JsonObject[]) => d3func(arr);\n  }\n\n  return (arr: JsonObject[]) => d3func(arr.map(x => accessor(x)));\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { rgb } from 'd3-color';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function hexToRGB(\n  hex: string | undefined,\n  alpha = 255,\n): [number, number, number, number] {\n  if (!hex) {\n    return [0, 0, 0, alpha];\n  }\n  const { r, g, b } = rgb(hex);\n\n  return [r, g, b, alpha];\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { extent as d3Extent } from 'd3-array';\nimport { Point, Range } from '../types';\n\nconst LAT_LIMIT: Range = [-90, 90];\nconst LNG_LIMIT: Range = [-180, 180];\n\n/**\n * Expand a coordinate range by `padding` and within limits, if needed\n */\nfunction expandIfNeeded(\n  [curMin, curMax]: Range,\n  [minBound, maxBound]: Range,\n  padding = 0.25,\n) {\n  return curMin < curMax\n    ? [curMin, curMax]\n    : [\n        Math.max(minBound, curMin - padding),\n        Math.min(maxBound, curMax + padding),\n      ];\n}\n\nexport default function computeBoundsFromPoints(\n  points: Point[],\n): [Point, Point] {\n  const latBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[1]) as Range,\n    LAT_LIMIT,\n  );\n  const lngBounds = expandIfNeeded(\n    d3Extent(points, (x: Point) => x[0]) as Range,\n    LNG_LIMIT,\n  );\n  return [\n    [lngBounds[0], latBounds[0]],\n    [lngBounds[1], latBounds[1]],\n  ];\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { fitBounds } from '@math.gl/web-mercator';\nimport computeBoundsFromPoints from './computeBoundsFromPoints';\nimport { Point } from '../types';\n\nexport type Viewport = {\n  longitude: number;\n  latitude: number;\n  zoom: number;\n  bearing?: number;\n  pitch?: number;\n};\n\nexport type FitViewportOptions = {\n  points: Point[];\n  width: number;\n  height: number;\n  minExtent?: number;\n  maxZoom?: number;\n  offset?: [number, number];\n  padding?: number;\n};\n\nexport default function fitViewport(\n  originalViewPort: Viewport,\n  {\n    points,\n    width,\n    height,\n    minExtent,\n    maxZoom,\n    offset,\n    padding = 20,\n  }: FitViewportOptions,\n): Viewport {\n  const { bearing, pitch } = originalViewPort;\n  const bounds = computeBoundsFromPoints(points);\n\n  try {\n    return {\n      ...fitBounds({\n        bounds,\n        width,\n        height,\n        minExtent,\n        maxZoom,\n        offset,\n        padding,\n      }),\n      bearing,\n      pitch,\n    };\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('Could not fit viewport', error);\n  }\n\n  return originalViewPort;\n}\n","/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// A safe alternative to JS's eval\nimport vm, { Context, RunningScriptOptions } from 'vm';\nimport _ from 'underscore';\nimport * as d3array from 'd3-array';\nimport * as colors from './colors';\n\n// Objects exposed here should be treated like a public API\n// if `underscore` had backwards incompatible changes in a future release, we'd\n// have to be careful about bumping the library as those changes could break user charts\nconst GLOBAL_CONTEXT = {\n  console,\n  _,\n  colors,\n  d3array,\n};\n\n// Copied/modified from https://github.com/hacksparrow/safe-eval/blob/master/index.js\nexport default function sandboxedEval(\n  code: string,\n  context?: Context,\n  opts?: RunningScriptOptions | string,\n) {\n  const sandbox = {};\n  const resultKey = `SAFE_EVAL_${Math.floor(Math.random() * 1000000)}`;\n  sandbox[resultKey] = {};\n  const codeToEval = `${resultKey}=${code}`;\n  const sandboxContext = { ...GLOBAL_CONTEXT, ...context };\n  Object.keys(sandboxContext).forEach(key => {\n    sandbox[key] = sandboxContext[key];\n  });\n  try {\n    vm.runInNewContext(codeToEval, sandbox, opts);\n\n    return sandbox[resultKey];\n  } catch (error) {\n    return () => error;\n  }\n}\n"],"names":["defaultColorRange","colorRangeToFlatArray","colorRange","normalize","ArrayType","Float32Array","flatArray","Number","isFinite","length","index","i","color","DEFAULT_MODULE_OPTIONS","pickingSelectedColor","pickingHighlightColor","Uint8Array","pickingActive","pickingAttribute","inject","order","injection","name","vs","fs","getUniforms","opts","arguments","undefined","uniforms","selectedColor","slice","picking_uSelectedColorValid","picking_uSelectedColor","Array","from","x","picking_uHighlightColor","picking_uActive","Boolean","picking_uAttribute","StyledDiv","styled","div","theme","top","left","gridUnit","colors","grayscale","dark2","light5","typography","sizes","s","Tooltip","props","tooltip","y","content","safeContent","safeHtmlSpan","_jsx","children","DeckGLContainer","memo","forwardRef","ref","setTooltip","useState","lastUpdate","setLastUpdate","viewState","setViewState","viewport","prevViewport","usePrevious","useImperativeHandle","tick","useCallback","Date","now","setCV","setControlValue","useEffect","timer","setInterval","clearInterval","_isEqual","onViewStateChange","layers","some","l","map","height","width","_jsxs","_Fragment","style","position","DeckGL","controller","glOptions","preserveDrawingBuffer","StaticMap","mapStyle","mapboxApiAccessToken","DeckGLContainerStyledWrapper","TooltipRow","label","value","DEFAULT_MINCOLOR","DEFAULT_MAXCOLOR","COLOR_PROPS","defaultProps","cellSizePixels","min","cellMarginPixels","max","colorDomain","ScreenGridCellLayer","Layer","constructor","args","_defineProperty","isSupported","gl","hasFeatures","FEATURES","TEXTURE_FLOAT","getShaders","modules","picking","initializeState","this","context","getAttributeManager","addInstanced","instancePositions","size","update","calculateInstancePositions","instanceCounts","noAlloc","setState","model","_getModel","shouldUpdateState","changeFlags","somethingChanged","updateState","params","super","oldProps","attributeManager","numInstances","invalidateAll","invalidate","_updateUniforms","draw","parameters","maxTexture","minColor","maxColor","state","setUniforms","depthTest","depthMask","attribute","numCol","Math","ceil","floor","Model","id","geometry","Geometry","drawMode","attributes","positions","isInstanced","_shouldUseMinMax","log","deprecated","key","shouldUseMinMax","viewportChanged","margin","cellScale","getPosition","type","d","getWeight","gpuAggregation","aggregation","POSITION_ATTRIBUTE_NAME","DIMENSIONS","data","weights","accessors","ScreenGridLayer","GridAggregationLayer","supported","error","concat","initializeAggregationLayer","dimensions","getCellSize","count","operation","AGGREGATION_OPERATION","SUM","needMax","getFloatTexture","projectPoints","subLayerData","positionAttributeName","posOffset","translation","add","accessor","fp64","use64bitPositions","renderLayers","numRow","updateTriggers","aggregationBuffer","getSubLayerClass","getSubLayerProps","finalizeState","maxBuffer","delete","getPickingInfo","info","gpuGridAggregator","aggregationResults","getData","object","GPUGridAggregator","getAggregationData","pixelIndex","updateResults","aggregationData","maxData","setData","setImageData","updateAggregationState","cellSize","cellSizeChanged","warn","gpuAggregationChanged","positionsChanged","isAttributeChanged","aggregationDataDirty","isAggregationDirty","compareAll","dimension","aggregationWeightsDirty","allocateResources","scaling","gridOffset","xOffset","yOffset","_updateAccessors","_resetResults","getValue","getValueFunc","setTooltipContent","o","_o$coordinate","_o$coordinate2","_o$object","className","t","coordinate","cellWeight","getLayer","formData","payload","onAddFilter","fd","c","color_picker","features","r","g","b","a","js_data_mutator","sandboxedEval","jsFnMutator","slice_id","grid_size","outline","weight","commonLayerProps","DeckGLScreenGrid","containerRef","useRef","getAdjustedViewport","autozoom","fitViewport","points","stateFormData","setStateFormData","form_data","setViewport","current","getLayers","_noop","mapbox_style","mapboxApiKey","onSelect","onHover","onClick","tooltipContentGenerator","js_tooltip","picked","js_onclick_href","href","window","open","table_filter","line_column","pickable","percentiles","p1","p5","p95","p99","getAggFunc","arr","d3func","acc","sortedArr","sort","o1","o2","d3array","hexToRGB","hex","alpha","rgb","LAT_LIMIT","LNG_LIMIT","expandIfNeeded","curMin","curMax","minBound","maxBound","padding","originalViewPort","minExtent","maxZoom","offset","bearing","pitch","bounds","latBounds","d3Extent","lngBounds","computeBoundsFromPoints","fitBounds","console","GLOBAL_CONTEXT","_","code","sandbox","resultKey","random","codeToEval","sandboxContext","Object","keys","forEach","vm"],"sourceRoot":""}